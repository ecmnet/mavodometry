package com.comino.mavodometry.librealsense.t265.wrapper;
import com.sun.jna.Callback;
import com.sun.jna.Library;
import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;
import com.sun.jna.NativeLong;
import com.sun.jna.Pointer;
import com.sun.jna.PointerType;
import com.sun.jna.Structure;
import com.sun.jna.ptr.FloatByReference;
import com.sun.jna.ptr.IntByReference;
import com.sun.jna.ptr.PointerByReference;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import java.util.Arrays;
import java.util.List;
/**
 * JNA Wrapper for library <b>Realsense2</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> , <a href="http://rococoa.dev.java.net/">Rococoa</a>, or <a href="http://jna.dev.java.net/">JNA</a>.
 */
public interface Realsense2Library extends Library {
	public static final String JNA_LIBRARY_NAME = "realsense2";
	public static final NativeLibrary JNA_NATIVE_LIB = NativeLibrary.getInstance(Realsense2Library.JNA_LIBRARY_NAME);
	public static final Realsense2Library INSTANCE = (Realsense2Library)Native.loadLibrary(Realsense2Library.JNA_LIBRARY_NAME, Realsense2Library.class);
	/** enum values */
	public static interface rs2_notification_category {
		/**
		 * < Frames didn't arrived within 5 seconds<br>
		 * <i>native declaration : line 6</i>
		 */
		public static final int RS2_NOTIFICATION_CATEGORY_FRAMES_TIMEOUT = 0;
		/**
		 * < Received partial/incomplete frame<br>
		 * <i>native declaration : line 7</i>
		 */
		public static final int RS2_NOTIFICATION_CATEGORY_FRAME_CORRUPTED = 1;
		/**
		 * < Error reported from the device<br>
		 * <i>native declaration : line 8</i>
		 */
		public static final int RS2_NOTIFICATION_CATEGORY_HARDWARE_ERROR = 2;
		/**
		 * < General Hardeware notification that is not an error<br>
		 * <i>native declaration : line 9</i>
		 */
		public static final int RS2_NOTIFICATION_CATEGORY_HARDWARE_EVENT = 3;
		/**
		 * < Received unknown error from the device<br>
		 * <i>native declaration : line 10</i>
		 */
		public static final int RS2_NOTIFICATION_CATEGORY_UNKNOWN_ERROR = 4;
		/**
		 * < Current firmware version installed is not the latest available<br>
		 * <i>native declaration : line 11</i>
		 */
		public static final int RS2_NOTIFICATION_CATEGORY_FIRMWARE_UPDATE_RECOMMENDED = 5;
		/**
		 * < A relocalization event has updated the pose provided by a pose sensor<br>
		 * <i>native declaration : line 12</i>
		 */
		public static final int RS2_NOTIFICATION_CATEGORY_POSE_RELOCALIZATION = 6;
		/**
		 * < Number of enumeration values. Not a valid input: intended to be used in for-loops.<br>
		 * <i>native declaration : line 13</i>
		 */
		public static final int RS2_NOTIFICATION_CATEGORY_COUNT = 7;
	};
	/** enum values */
	public static interface rs2_exception_type {
		/** <i>native declaration : line 20</i> */
		public static final int RS2_EXCEPTION_TYPE_UNKNOWN = 0;
		/**
		 * < Device was disconnected, this can be caused by outside intervention, by internal firmware error or due to insufficient power<br>
		 * <i>native declaration : line 21</i>
		 */
		public static final int RS2_EXCEPTION_TYPE_CAMERA_DISCONNECTED = 1;
		/**
		 * < Error was returned from the underlying OS-specific layer<br>
		 * <i>native declaration : line 22</i>
		 */
		public static final int RS2_EXCEPTION_TYPE_BACKEND = 2;
		/**
		 * < Invalid value was passed to the API<br>
		 * <i>native declaration : line 23</i>
		 */
		public static final int RS2_EXCEPTION_TYPE_INVALID_VALUE = 3;
		/**
		 * < Function precondition was violated<br>
		 * <i>native declaration : line 24</i>
		 */
		public static final int RS2_EXCEPTION_TYPE_WRONG_API_CALL_SEQUENCE = 4;
		/**
		 * < The method is not implemented at this point<br>
		 * <i>native declaration : line 25</i>
		 */
		public static final int RS2_EXCEPTION_TYPE_NOT_IMPLEMENTED = 5;
		/**
		 * < Device is in recovery mode and might require firmware update<br>
		 * <i>native declaration : line 26</i>
		 */
		public static final int RS2_EXCEPTION_TYPE_DEVICE_IN_RECOVERY_MODE = 6;
		/**
		 * < IO Device failure<br>
		 * <i>native declaration : line 27</i>
		 */
		public static final int RS2_EXCEPTION_TYPE_IO = 7;
		/**
		 * < Number of enumeration values. Not a valid input: intended to be used in for-loops.<br>
		 * <i>native declaration : line 28</i>
		 */
		public static final int RS2_EXCEPTION_TYPE_COUNT = 8;
	};
	/** enum values */
	public static interface rs2_distortion {
		/**
		 * < Rectilinear images. No distortion compensation required.<br>
		 * <i>native declaration : line 35</i>
		 */
		public static final int RS2_DISTORTION_NONE = 0;
		/**
		 * < Equivalent to Brown-Conrady distortion, except that tangential distortion is applied to radially distorted points<br>
		 * <i>native declaration : line 36</i>
		 */
		public static final int RS2_DISTORTION_MODIFIED_BROWN_CONRADY = 1;
		/**
		 * < Equivalent to Brown-Conrady distortion, except undistorts image instead of distorting it<br>
		 * <i>native declaration : line 37</i>
		 */
		public static final int RS2_DISTORTION_INVERSE_BROWN_CONRADY = 2;
		/**
		 * < F-Theta fish-eye distortion model<br>
		 * <i>native declaration : line 38</i>
		 */
		public static final int RS2_DISTORTION_FTHETA = 3;
		/**
		 * < Unmodified Brown-Conrady distortion model<br>
		 * <i>native declaration : line 39</i>
		 */
		public static final int RS2_DISTORTION_BROWN_CONRADY = 4;
		/**
		 * < Four parameter Kannala Brandt distortion model<br>
		 * <i>native declaration : line 40</i>
		 */
		public static final int RS2_DISTORTION_KANNALA_BRANDT4 = 5;
		/**
		 * < Number of enumeration values. Not a valid input: intended to be used in for-loops.<br>
		 * <i>native declaration : line 41</i>
		 */
		public static final int RS2_DISTORTION_COUNT = 6;
	};
	/** enum values */
	public static interface rs2_log_severity {
		/**
		 * < Detailed information about ordinary operations<br>
		 * <i>native declaration : line 110</i>
		 */
		public static final int RS2_LOG_SEVERITY_DEBUG = 0;
		/**
		 * < Terse information about ordinary operations<br>
		 * <i>native declaration : line 111</i>
		 */
		public static final int RS2_LOG_SEVERITY_INFO = 1;
		/**
		 * < Indication of possible failure<br>
		 * <i>native declaration : line 112</i>
		 */
		public static final int RS2_LOG_SEVERITY_WARN = 2;
		/**
		 * < Indication of definite failure<br>
		 * <i>native declaration : line 113</i>
		 */
		public static final int RS2_LOG_SEVERITY_ERROR = 3;
		/**
		 * < Indication of unrecoverable failure<br>
		 * <i>native declaration : line 114</i>
		 */
		public static final int RS2_LOG_SEVERITY_FATAL = 4;
		/**
		 * < No logging will occur<br>
		 * <i>native declaration : line 115</i>
		 */
		public static final int RS2_LOG_SEVERITY_NONE = 5;
		/**
		 * < Number of enumeration values. Not a valid input: intended to be used in for-loops.<br>
		 * <i>native declaration : line 116</i>
		 */
		public static final int RS2_LOG_SEVERITY_COUNT = 6;
	};
	/** enum values */
	public static interface rs2_extension {
		/** <i>native declaration : line 123</i> */
		public static final int RS2_EXTENSION_UNKNOWN = 0;
		/** <i>native declaration : line 124</i> */
		public static final int RS2_EXTENSION_DEBUG = 1;
		/** <i>native declaration : line 125</i> */
		public static final int RS2_EXTENSION_INFO = 2;
		/** <i>native declaration : line 126</i> */
		public static final int RS2_EXTENSION_MOTION = 3;
		/** <i>native declaration : line 127</i> */
		public static final int RS2_EXTENSION_OPTIONS = 4;
		/** <i>native declaration : line 128</i> */
		public static final int RS2_EXTENSION_VIDEO = 5;
		/** <i>native declaration : line 129</i> */
		public static final int RS2_EXTENSION_ROI = 6;
		/** <i>native declaration : line 130</i> */
		public static final int RS2_EXTENSION_DEPTH_SENSOR = 7;
		/** <i>native declaration : line 131</i> */
		public static final int RS2_EXTENSION_VIDEO_FRAME = 8;
		/** <i>native declaration : line 132</i> */
		public static final int RS2_EXTENSION_MOTION_FRAME = 9;
		/** <i>native declaration : line 133</i> */
		public static final int RS2_EXTENSION_COMPOSITE_FRAME = 10;
		/** <i>native declaration : line 134</i> */
		public static final int RS2_EXTENSION_POINTS = 11;
		/** <i>native declaration : line 135</i> */
		public static final int RS2_EXTENSION_DEPTH_FRAME = 12;
		/** <i>native declaration : line 136</i> */
		public static final int RS2_EXTENSION_ADVANCED_MODE = 13;
		/** <i>native declaration : line 137</i> */
		public static final int RS2_EXTENSION_RECORD = 14;
		/** <i>native declaration : line 138</i> */
		public static final int RS2_EXTENSION_VIDEO_PROFILE = 15;
		/** <i>native declaration : line 139</i> */
		public static final int RS2_EXTENSION_PLAYBACK = 16;
		/** <i>native declaration : line 140</i> */
		public static final int RS2_EXTENSION_DEPTH_STEREO_SENSOR = 17;
		/** <i>native declaration : line 141</i> */
		public static final int RS2_EXTENSION_DISPARITY_FRAME = 18;
		/** <i>native declaration : line 142</i> */
		public static final int RS2_EXTENSION_MOTION_PROFILE = 19;
		/** <i>native declaration : line 143</i> */
		public static final int RS2_EXTENSION_POSE_FRAME = 20;
		/** <i>native declaration : line 144</i> */
		public static final int RS2_EXTENSION_POSE_PROFILE = 21;
		/** <i>native declaration : line 145</i> */
		public static final int RS2_EXTENSION_TM2 = 22;
		/** <i>native declaration : line 146</i> */
		public static final int RS2_EXTENSION_SOFTWARE_DEVICE = 23;
		/** <i>native declaration : line 147</i> */
		public static final int RS2_EXTENSION_SOFTWARE_SENSOR = 24;
		/** <i>native declaration : line 148</i> */
		public static final int RS2_EXTENSION_DECIMATION_FILTER = 25;
		/** <i>native declaration : line 149</i> */
		public static final int RS2_EXTENSION_THRESHOLD_FILTER = 26;
		/** <i>native declaration : line 150</i> */
		public static final int RS2_EXTENSION_DISPARITY_FILTER = 27;
		/** <i>native declaration : line 151</i> */
		public static final int RS2_EXTENSION_SPATIAL_FILTER = 28;
		/** <i>native declaration : line 152</i> */
		public static final int RS2_EXTENSION_TEMPORAL_FILTER = 29;
		/** <i>native declaration : line 153</i> */
		public static final int RS2_EXTENSION_HOLE_FILLING_FILTER = 30;
		/** <i>native declaration : line 154</i> */
		public static final int RS2_EXTENSION_ZERO_ORDER_FILTER = 31;
		/** <i>native declaration : line 155</i> */
		public static final int RS2_EXTENSION_RECOMMENDED_FILTERS = 32;
		/** <i>native declaration : line 156</i> */
		public static final int RS2_EXTENSION_POSE = 33;
		/** <i>native declaration : line 157</i> */
		public static final int RS2_EXTENSION_POSE_SENSOR = 34;
		/** <i>native declaration : line 158</i> */
		public static final int RS2_EXTENSION_WHEEL_ODOMETER = 35;
		/** <i>native declaration : line 159</i> */
		public static final int RS2_EXTENSION_GLOBAL_TIMER = 36;
		/** <i>native declaration : line 160</i> */
		public static final int RS2_EXTENSION_UPDATABLE = 37;
		/** <i>native declaration : line 161</i> */
		public static final int RS2_EXTENSION_UPDATE_DEVICE = 38;
		/** <i>native declaration : line 162</i> */
		public static final int RS2_EXTENSION_L500_DEPTH_SENSOR = 39;
		/** <i>native declaration : line 163</i> */
		public static final int RS2_EXTENSION_TM2_SENSOR = 40;
		/** <i>native declaration : line 164</i> */
		public static final int RS2_EXTENSION_COUNT = 41;
	};
	/** enum values */
	public static interface rs2_matchers {
		/**
		 * compare depth and ir based on frame number<br>
		 * <i>native declaration : line 172</i>
		 */
		public static final int RS2_MATCHER_DI = 0;
		/**
		 * compare depth and ir based on frame number,<br>
		 * <i>native declaration : line 174</i>
		 */
		public static final int RS2_MATCHER_DI_C = 1;
		/**
		 * compare depth, left and right ir based on frame number,<br>
		 * <i>native declaration : line 178</i>
		 */
		public static final int RS2_MATCHER_DLR_C = 2;
		/**
		 * compare depth, left and right ir based on frame number,<br>
		 * <i>native declaration : line 182</i>
		 */
		public static final int RS2_MATCHER_DLR = 3;
		/**
		 * compare depth, ir and confidence based on frame number used by RS500<br>
		 * <i>native declaration : line 185</i>
		 */
		public static final int RS2_MATCHER_DIC = 4;
		/**
		 * compare depth, ir and confidence based on frame number,<br>
		 * <i>native declaration : line 187</i>
		 */
		public static final int RS2_MATCHER_DIC_C = 5;
		/**
		 * the default matcher compare all the streams based on closest timestamp<br>
		 * <i>native declaration : line 191</i>
		 */
		public static final int RS2_MATCHER_DEFAULT = 6;
		/** <i>native declaration : line 193</i> */
		public static final int RS2_MATCHER_COUNT = 7;
	};
	/** enum values */
	public static interface rs2_camera_info {
		/**
		 * < Friendly name<br>
		 * <i>native declaration : line 377</i>
		 */
		public static final int RS2_CAMERA_INFO_NAME = 0;
		/**
		 * < Device serial number<br>
		 * <i>native declaration : line 378</i>
		 */
		public static final int RS2_CAMERA_INFO_SERIAL_NUMBER = 1;
		/**
		 * < Primary firmware version<br>
		 * <i>native declaration : line 379</i>
		 */
		public static final int RS2_CAMERA_INFO_FIRMWARE_VERSION = 2;
		/**
		 * < Recommended firmware version<br>
		 * <i>native declaration : line 380</i>
		 */
		public static final int RS2_CAMERA_INFO_RECOMMENDED_FIRMWARE_VERSION = 3;
		/**
		 * < Unique identifier of the port the device is connected to (platform specific)<br>
		 * <i>native declaration : line 381</i>
		 */
		public static final int RS2_CAMERA_INFO_PHYSICAL_PORT = 4;
		/**
		 * < If device supports firmware logging, this is the command to send to get logs from firmware<br>
		 * <i>native declaration : line 382</i>
		 */
		public static final int RS2_CAMERA_INFO_DEBUG_OP_CODE = 5;
		/**
		 * < True iff the device is in advanced mode<br>
		 * <i>native declaration : line 383</i>
		 */
		public static final int RS2_CAMERA_INFO_ADVANCED_MODE = 6;
		/**
		 * < Product ID as reported in the USB descriptor<br>
		 * <i>native declaration : line 384</i>
		 */
		public static final int RS2_CAMERA_INFO_PRODUCT_ID = 7;
		/**
		 * < True iff EEPROM is locked<br>
		 * <i>native declaration : line 385</i>
		 */
		public static final int RS2_CAMERA_INFO_CAMERA_LOCKED = 8;
		/**
		 * < Designated USB specification: USB2/USB3<br>
		 * <i>native declaration : line 386</i>
		 */
		public static final int RS2_CAMERA_INFO_USB_TYPE_DESCRIPTOR = 9;
		/**
		 * < Device product line D400/SR300/L500/T200<br>
		 * <i>native declaration : line 387</i>
		 */
		public static final int RS2_CAMERA_INFO_PRODUCT_LINE = 10;
		/**
		 * < ASIC serial number<br>
		 * <i>native declaration : line 388</i>
		 */
		public static final int RS2_CAMERA_INFO_ASIC_SERIAL_NUMBER = 11;
		/**
		 * < Firmware update ID<br>
		 * <i>native declaration : line 389</i>
		 */
		public static final int RS2_CAMERA_INFO_FIRMWARE_UPDATE_ID = 12;
		/**
		 * < Number of enumeration values. Not a valid input: intended to be used in for-loops.<br>
		 * <i>native declaration : line 390</i>
		 */
		public static final int RS2_CAMERA_INFO_COUNT = 13;
	};
	/** enum values */
	public static interface rs2_stream {
		/** <i>native declaration : line 397</i> */
		public static final int RS2_STREAM_ANY = 0;
		/**
		 * < Native stream of depth data produced by RealSense device<br>
		 * <i>native declaration : line 398</i>
		 */
		public static final int RS2_STREAM_DEPTH = 1;
		/**
		 * < Native stream of color data captured by RealSense device<br>
		 * <i>native declaration : line 399</i>
		 */
		public static final int RS2_STREAM_COLOR = 2;
		/**
		 * < Native stream of infrared data captured by RealSense device<br>
		 * <i>native declaration : line 400</i>
		 */
		public static final int RS2_STREAM_INFRARED = 3;
		/**
		 * < Native stream of fish-eye (wide) data captured from the dedicate motion camera<br>
		 * <i>native declaration : line 401</i>
		 */
		public static final int RS2_STREAM_FISHEYE = 4;
		/**
		 * < Native stream of gyroscope motion data produced by RealSense device<br>
		 * <i>native declaration : line 402</i>
		 */
		public static final int RS2_STREAM_GYRO = 5;
		/**
		 * < Native stream of accelerometer motion data produced by RealSense device<br>
		 * <i>native declaration : line 403</i>
		 */
		public static final int RS2_STREAM_ACCEL = 6;
		/**
		 * < Signals from external device connected through GPIO<br>
		 * <i>native declaration : line 404</i>
		 */
		public static final int RS2_STREAM_GPIO = 7;
		/**
		 * < 6 Degrees of Freedom pose data, calculated by RealSense device<br>
		 * <i>native declaration : line 405</i>
		 */
		public static final int RS2_STREAM_POSE = 8;
		/**
		 * < 4 bit per-pixel depth confidence level<br>
		 * <i>native declaration : line 406</i>
		 */
		public static final int RS2_STREAM_CONFIDENCE = 9;
		/** <i>native declaration : line 407</i> */
		public static final int RS2_STREAM_COUNT = 10;
	};
	/** enum values */
	public static interface rs2_format {
		/**
		 * < When passed to enable stream, librealsense will try to provide best suited format<br>
		 * <i>native declaration : line 414</i>
		 */
		public static final int RS2_FORMAT_ANY = 0;
		/**
		 * < 16-bit linear depth values. The depth is meters is equal to depth scale * pixel value.<br>
		 * <i>native declaration : line 415</i>
		 */
		public static final int RS2_FORMAT_Z16 = 1;
		/**
		 * < 16-bit float-point disparity values. Depth->Disparity conversion : Disparity = Baseline*FocalLength/Depth.<br>
		 * <i>native declaration : line 416</i>
		 */
		public static final int RS2_FORMAT_DISPARITY16 = 2;
		/**
		 * < 32-bit floating point 3D coordinates.<br>
		 * <i>native declaration : line 417</i>
		 */
		public static final int RS2_FORMAT_XYZ32F = 3;
		/**
		 * < 32-bit y0, u, y1, v data for every two pixels. Similar to YUV422 but packed in a different order - https://en.wikipedia.org/wiki/YUV<br>
		 * <i>native declaration : line 418</i>
		 */
		public static final int RS2_FORMAT_YUYV = 4;
		/**
		 * < 8-bit red, green and blue channels<br>
		 * <i>native declaration : line 419</i>
		 */
		public static final int RS2_FORMAT_RGB8 = 5;
		/**
		 * < 8-bit blue, green, and red channels -- suitable for OpenCV<br>
		 * <i>native declaration : line 420</i>
		 */
		public static final int RS2_FORMAT_BGR8 = 6;
		/**
		 * < 8-bit red, green and blue channels + constant alpha channel equal to FF<br>
		 * <i>native declaration : line 421</i>
		 */
		public static final int RS2_FORMAT_RGBA8 = 7;
		/**
		 * < 8-bit blue, green, and red channels + constant alpha channel equal to FF<br>
		 * <i>native declaration : line 422</i>
		 */
		public static final int RS2_FORMAT_BGRA8 = 8;
		/**
		 * < 8-bit per-pixel grayscale image<br>
		 * <i>native declaration : line 423</i>
		 */
		public static final int RS2_FORMAT_Y8 = 9;
		/**
		 * < 16-bit per-pixel grayscale image<br>
		 * <i>native declaration : line 424</i>
		 */
		public static final int RS2_FORMAT_Y16 = 10;
		/**
		 * < Four 10 bits per pixel luminance values packed into a 5-byte macropixel<br>
		 * <i>native declaration : line 425</i>
		 */
		public static final int RS2_FORMAT_RAW10 = 11;
		/**
		 * < 16-bit raw image<br>
		 * <i>native declaration : line 426</i>
		 */
		public static final int RS2_FORMAT_RAW16 = 12;
		/**
		 * < 8-bit raw image<br>
		 * <i>native declaration : line 427</i>
		 */
		public static final int RS2_FORMAT_RAW8 = 13;
		/**
		 * < Similar to the standard YUYV pixel format, but packed in a different order<br>
		 * <i>native declaration : line 428</i>
		 */
		public static final int RS2_FORMAT_UYVY = 14;
		/**
		 * < Raw data from the motion sensor<br>
		 * <i>native declaration : line 429</i>
		 */
		public static final int RS2_FORMAT_MOTION_RAW = 15;
		/**
		 * < Motion data packed as 3 32-bit float values, for X, Y, and Z axis<br>
		 * <i>native declaration : line 430</i>
		 */
		public static final int RS2_FORMAT_MOTION_XYZ32F = 16;
		/**
		 * < Raw data from the external sensors hooked to one of the GPIO's<br>
		 * <i>native declaration : line 431</i>
		 */
		public static final int RS2_FORMAT_GPIO_RAW = 17;
		/**
		 * < Pose data packed as floats array, containing translation vector, rotation quaternion and prediction velocities and accelerations vectors<br>
		 * <i>native declaration : line 432</i>
		 */
		public static final int RS2_FORMAT_6DOF = 18;
		/**
		 * < 32-bit float-point disparity values. Depth->Disparity conversion : Disparity = Baseline*FocalLength/Depth<br>
		 * <i>native declaration : line 433</i>
		 */
		public static final int RS2_FORMAT_DISPARITY32 = 19;
		/**
		 * < 16-bit per-pixel grayscale image unpacked from 10 bits per pixel packed ([8:8:8:8:2222]) grey-scale image. The data is unpacked to LSB and padded with 6 zero bits<br>
		 * <i>native declaration : line 434</i>
		 */
		public static final int RS2_FORMAT_Y10BPACK = 20;
		/**
		 * < 32-bit float-point depth distance value.<br>
		 * <i>native declaration : line 435</i>
		 */
		public static final int RS2_FORMAT_DISTANCE = 21;
		/**
		 * < Bitstream encoding for video in which an image of each frame is encoded as JPEG-DIB<br>
		 * <i>native declaration : line 436</i>
		 */
		public static final int RS2_FORMAT_MJPEG = 22;
		/**
		 * < Number of enumeration values. Not a valid input: intended to be used in for-loops.<br>
		 * <i>native declaration : line 437</i>
		 */
		public static final int RS2_FORMAT_COUNT = 23;
	};
	/** enum values */
	public static interface rs2_timestamp_domain {
		/**
		 * < Frame timestamp was measured in relation to the camera clock<br>
		 * <i>native declaration : line 1165</i>
		 */
		public static final int RS2_TIMESTAMP_DOMAIN_HARDWARE_CLOCK = 0;
		/**
		 * < Frame timestamp was measured in relation to the OS system clock<br>
		 * <i>native declaration : line 1166</i>
		 */
		public static final int RS2_TIMESTAMP_DOMAIN_SYSTEM_TIME = 1;
		/**
		 * < Frame timestamp was measured in relation to the camera clock and converted to OS system clock by constantly measure the difference<br>
		 * <i>native declaration : line 1167</i>
		 */
		public static final int RS2_TIMESTAMP_DOMAIN_GLOBAL_TIME = 2;
		/**
		 * < Number of enumeration values. Not a valid input: intended to be used in for-loops.<br>
		 * <i>native declaration : line 1168</i>
		 */
		public static final int RS2_TIMESTAMP_DOMAIN_COUNT = 3;
	};
	/** enum values */
	public static interface rs2_frame_metadata_value {
		/**
		 * < A sequential index managed per-stream. Integer value<br>
		 * <i>native declaration : line 1175</i>
		 */
		public static final int RS2_FRAME_METADATA_FRAME_COUNTER = 0;
		/**
		 * < Timestamp set by device clock when data readout and transmit commence. usec<br>
		 * <i>native declaration : line 1176</i>
		 */
		public static final int RS2_FRAME_METADATA_FRAME_TIMESTAMP = 1;
		/**
		 * < Timestamp of the middle of sensor's exposure calculated by device. usec<br>
		 * <i>native declaration : line 1177</i>
		 */
		public static final int RS2_FRAME_METADATA_SENSOR_TIMESTAMP = 2;
		/**
		 * < Sensor's exposure width. When Auto Exposure (AE) is on the value is controlled by firmware. usec<br>
		 * <i>native declaration : line 1178</i>
		 */
		public static final int RS2_FRAME_METADATA_ACTUAL_EXPOSURE = 3;
		/**
		 * < A relative value increasing which will increase the Sensor's gain factor.                                                               When AE is set On, the value is controlled by firmware. Integer value<br>
		 * <i>native declaration : line 1179</i>
		 */
		public static final int RS2_FRAME_METADATA_GAIN_LEVEL = 4;
		/**
		 * < Auto Exposure Mode indicator. Zero corresponds to AE switched off.<br>
		 * <i>native declaration : line 1181</i>
		 */
		public static final int RS2_FRAME_METADATA_AUTO_EXPOSURE = 5;
		/**
		 * < White Balance setting as a color temperature. Kelvin degrees<br>
		 * <i>native declaration : line 1182</i>
		 */
		public static final int RS2_FRAME_METADATA_WHITE_BALANCE = 6;
		/**
		 * < Time of arrival in system clock<br>
		 * <i>native declaration : line 1183</i>
		 */
		public static final int RS2_FRAME_METADATA_TIME_OF_ARRIVAL = 7;
		/**
		 * < Temperature of the device, measured at the time of the frame capture. Celsius degrees<br>
		 * <i>native declaration : line 1184</i>
		 */
		public static final int RS2_FRAME_METADATA_TEMPERATURE = 8;
		/**
		 * < Timestamp get from uvc driver. usec<br>
		 * <i>native declaration : line 1185</i>
		 */
		public static final int RS2_FRAME_METADATA_BACKEND_TIMESTAMP = 9;
		/**
		 * < Actual fps<br>
		 * <i>native declaration : line 1186</i>
		 */
		public static final int RS2_FRAME_METADATA_ACTUAL_FPS = 10;
		/**
		 * < Laser power value 0-360.<br>
		 * <i>native declaration : line 1187</i>
		 */
		public static final int RS2_FRAME_METADATA_FRAME_LASER_POWER = 11;
		/**
		 * < Laser power mode. Zero corresponds to Laser power switched off and one for switched on.<br>
		 * <i>native declaration : line 1188</i>
		 */
		public static final int RS2_FRAME_METADATA_FRAME_LASER_POWER_MODE = 12;
		/**
		 * < Exposure priority.<br>
		 * <i>native declaration : line 1189</i>
		 */
		public static final int RS2_FRAME_METADATA_EXPOSURE_PRIORITY = 13;
		/**
		 * < Left region of interest for the auto exposure Algorithm.<br>
		 * <i>native declaration : line 1190</i>
		 */
		public static final int RS2_FRAME_METADATA_EXPOSURE_ROI_LEFT = 14;
		/**
		 * < Right region of interest for the auto exposure Algorithm.<br>
		 * <i>native declaration : line 1191</i>
		 */
		public static final int RS2_FRAME_METADATA_EXPOSURE_ROI_RIGHT = 15;
		/**
		 * < Top region of interest for the auto exposure Algorithm.<br>
		 * <i>native declaration : line 1192</i>
		 */
		public static final int RS2_FRAME_METADATA_EXPOSURE_ROI_TOP = 16;
		/**
		 * < Bottom region of interest for the auto exposure Algorithm.<br>
		 * <i>native declaration : line 1193</i>
		 */
		public static final int RS2_FRAME_METADATA_EXPOSURE_ROI_BOTTOM = 17;
		/**
		 * < Color image brightness.<br>
		 * <i>native declaration : line 1194</i>
		 */
		public static final int RS2_FRAME_METADATA_BRIGHTNESS = 18;
		/**
		 * < Color image contrast.<br>
		 * <i>native declaration : line 1195</i>
		 */
		public static final int RS2_FRAME_METADATA_CONTRAST = 19;
		/**
		 * < Color image saturation.<br>
		 * <i>native declaration : line 1196</i>
		 */
		public static final int RS2_FRAME_METADATA_SATURATION = 20;
		/**
		 * < Color image sharpness.<br>
		 * <i>native declaration : line 1197</i>
		 */
		public static final int RS2_FRAME_METADATA_SHARPNESS = 21;
		/**
		 * < Auto white balance temperature Mode indicator. Zero corresponds to automatic mode switched off.<br>
		 * <i>native declaration : line 1198</i>
		 */
		public static final int RS2_FRAME_METADATA_AUTO_WHITE_BALANCE_TEMPERATURE = 22;
		/**
		 * < Color backlight compensation. Zero corresponds to switched off.<br>
		 * <i>native declaration : line 1199</i>
		 */
		public static final int RS2_FRAME_METADATA_BACKLIGHT_COMPENSATION = 23;
		/**
		 * < Color image hue.<br>
		 * <i>native declaration : line 1200</i>
		 */
		public static final int RS2_FRAME_METADATA_HUE = 24;
		/**
		 * < Color image gamma.<br>
		 * <i>native declaration : line 1201</i>
		 */
		public static final int RS2_FRAME_METADATA_GAMMA = 25;
		/**
		 * < Color image white balance.<br>
		 * <i>native declaration : line 1202</i>
		 */
		public static final int RS2_FRAME_METADATA_MANUAL_WHITE_BALANCE = 26;
		/**
		 * < Power Line Frequency for anti-flickering Off/50Hz/60Hz/Auto.<br>
		 * <i>native declaration : line 1203</i>
		 */
		public static final int RS2_FRAME_METADATA_POWER_LINE_FREQUENCY = 27;
		/**
		 * < Color lowlight compensation. Zero corresponds to switched off.<br>
		 * <i>native declaration : line 1204</i>
		 */
		public static final int RS2_FRAME_METADATA_LOW_LIGHT_COMPENSATION = 28;
		/** <i>native declaration : line 1205</i> */
		public static final int RS2_FRAME_METADATA_COUNT = 29;
	};
	/** enum values */
	public static interface rs2_option {
		/**
		 * < Enable / disable color backlight compensation<br>
		 * <i>native declaration : line 1468</i>
		 */
		public static final int RS2_OPTION_BACKLIGHT_COMPENSATION = 0;
		/**
		 * < Color image brightness<br>
		 * <i>native declaration : line 1469</i>
		 */
		public static final int RS2_OPTION_BRIGHTNESS = 1;
		/**
		 * < Color image contrast<br>
		 * <i>native declaration : line 1470</i>
		 */
		public static final int RS2_OPTION_CONTRAST = 2;
		/**
		 * < Controls exposure time of color camera. Setting any value will disable auto exposure<br>
		 * <i>native declaration : line 1471</i>
		 */
		public static final int RS2_OPTION_EXPOSURE = 3;
		/**
		 * < Color image gain<br>
		 * <i>native declaration : line 1472</i>
		 */
		public static final int RS2_OPTION_GAIN = 4;
		/**
		 * < Color image gamma setting<br>
		 * <i>native declaration : line 1473</i>
		 */
		public static final int RS2_OPTION_GAMMA = 5;
		/**
		 * < Color image hue<br>
		 * <i>native declaration : line 1474</i>
		 */
		public static final int RS2_OPTION_HUE = 6;
		/**
		 * < Color image saturation setting<br>
		 * <i>native declaration : line 1475</i>
		 */
		public static final int RS2_OPTION_SATURATION = 7;
		/**
		 * < Color image sharpness setting<br>
		 * <i>native declaration : line 1476</i>
		 */
		public static final int RS2_OPTION_SHARPNESS = 8;
		/**
		 * < Controls white balance of color image. Setting any value will disable auto white balance<br>
		 * <i>native declaration : line 1477</i>
		 */
		public static final int RS2_OPTION_WHITE_BALANCE = 9;
		/**
		 * < Enable / disable color image auto-exposure<br>
		 * <i>native declaration : line 1478</i>
		 */
		public static final int RS2_OPTION_ENABLE_AUTO_EXPOSURE = 10;
		/**
		 * < Enable / disable color image auto-white-balance<br>
		 * <i>native declaration : line 1479</i>
		 */
		public static final int RS2_OPTION_ENABLE_AUTO_WHITE_BALANCE = 11;
		/**
		 * < Provide access to several recommend sets of option presets for the depth camera<br>
		 * <i>native declaration : line 1480</i>
		 */
		public static final int RS2_OPTION_VISUAL_PRESET = 12;
		/**
		 * < Power of the F200 / SR300 projector, with 0 meaning projector off<br>
		 * <i>native declaration : line 1481</i>
		 */
		public static final int RS2_OPTION_LASER_POWER = 13;
		/**
		 * < Set the number of patterns projected per frame. The higher the accuracy value the more patterns projected. Increasing the number of patterns help to achieve better accuracy. Note that this control is affecting the Depth FPS<br>
		 * <i>native declaration : line 1482</i>
		 */
		public static final int RS2_OPTION_ACCURACY = 14;
		/**
		 * < Motion vs. Range trade-off, with lower values allowing for better motion sensitivity and higher values allowing for better depth range<br>
		 * <i>native declaration : line 1483</i>
		 */
		public static final int RS2_OPTION_MOTION_RANGE = 15;
		/**
		 * < Set the filter to apply to each depth frame. Each one of the filter is optimized per the application requirements<br>
		 * <i>native declaration : line 1484</i>
		 */
		public static final int RS2_OPTION_FILTER_OPTION = 16;
		/**
		 * < The confidence level threshold used by the Depth algorithm pipe to set whether a pixel will get a valid range or will be marked with invalid range<br>
		 * <i>native declaration : line 1485</i>
		 */
		public static final int RS2_OPTION_CONFIDENCE_THRESHOLD = 17;
		/**
		 * < Laser Emitter enabled<br>
		 * <i>native declaration : line 1486</i>
		 */
		public static final int RS2_OPTION_EMITTER_ENABLED = 18;
		/**
		 * < Number of frames the user is allowed to keep per stream. Trying to hold-on to more frames will cause frame-drops.<br>
		 * <i>native declaration : line 1487</i>
		 */
		public static final int RS2_OPTION_FRAMES_QUEUE_SIZE = 19;
		/**
		 * < Total number of detected frame drops from all streams<br>
		 * <i>native declaration : line 1488</i>
		 */
		public static final int RS2_OPTION_TOTAL_FRAME_DROPS = 20;
		/**
		 * < Auto-Exposure modes: Static, Anti-Flicker and Hybrid<br>
		 * <i>native declaration : line 1489</i>
		 */
		public static final int RS2_OPTION_AUTO_EXPOSURE_MODE = 21;
		/**
		 * < Power Line Frequency control for anti-flickering Off/50Hz/60Hz/Auto<br>
		 * <i>native declaration : line 1490</i>
		 */
		public static final int RS2_OPTION_POWER_LINE_FREQUENCY = 22;
		/**
		 * < Current Asic Temperature<br>
		 * <i>native declaration : line 1491</i>
		 */
		public static final int RS2_OPTION_ASIC_TEMPERATURE = 23;
		/**
		 * < disable error handling<br>
		 * <i>native declaration : line 1492</i>
		 */
		public static final int RS2_OPTION_ERROR_POLLING_ENABLED = 24;
		/**
		 * < Current Projector Temperature<br>
		 * <i>native declaration : line 1493</i>
		 */
		public static final int RS2_OPTION_PROJECTOR_TEMPERATURE = 25;
		/**
		 * < Enable / disable trigger to be outputed from the camera to any external device on every depth frame<br>
		 * <i>native declaration : line 1494</i>
		 */
		public static final int RS2_OPTION_OUTPUT_TRIGGER_ENABLED = 26;
		/**
		 * < Current Motion-Module Temperature<br>
		 * <i>native declaration : line 1495</i>
		 */
		public static final int RS2_OPTION_MOTION_MODULE_TEMPERATURE = 27;
		/**
		 * < Number of meters represented by a single depth unit<br>
		 * <i>native declaration : line 1496</i>
		 */
		public static final int RS2_OPTION_DEPTH_UNITS = 28;
		/**
		 * < Enable/Disable automatic correction of the motion data<br>
		 * <i>native declaration : line 1497</i>
		 */
		public static final int RS2_OPTION_ENABLE_MOTION_CORRECTION = 29;
		/**
		 * < Allows sensor to dynamically ajust the frame rate depending on lighting conditions<br>
		 * <i>native declaration : line 1498</i>
		 */
		public static final int RS2_OPTION_AUTO_EXPOSURE_PRIORITY = 30;
		/**
		 * < Color scheme for data visualization<br>
		 * <i>native declaration : line 1499</i>
		 */
		public static final int RS2_OPTION_COLOR_SCHEME = 31;
		/**
		 * < Perform histogram equalization post-processing on the depth data<br>
		 * <i>native declaration : line 1500</i>
		 */
		public static final int RS2_OPTION_HISTOGRAM_EQUALIZATION_ENABLED = 32;
		/**
		 * < Minimal distance to the target<br>
		 * <i>native declaration : line 1501</i>
		 */
		public static final int RS2_OPTION_MIN_DISTANCE = 33;
		/**
		 * < Maximum distance to the target<br>
		 * <i>native declaration : line 1502</i>
		 */
		public static final int RS2_OPTION_MAX_DISTANCE = 34;
		/**
		 * < Texture mapping stream unique ID<br>
		 * <i>native declaration : line 1503</i>
		 */
		public static final int RS2_OPTION_TEXTURE_SOURCE = 35;
		/**
		 * < The 2D-filter effect. The specific interpretation is given within the context of the filter<br>
		 * <i>native declaration : line 1504</i>
		 */
		public static final int RS2_OPTION_FILTER_MAGNITUDE = 36;
		/**
		 * < 2D-filter parameter controls the weight/radius for smoothing.<br>
		 * <i>native declaration : line 1505</i>
		 */
		public static final int RS2_OPTION_FILTER_SMOOTH_ALPHA = 37;
		/**
		 * < 2D-filter range/validity threshold<br>
		 * <i>native declaration : line 1506</i>
		 */
		public static final int RS2_OPTION_FILTER_SMOOTH_DELTA = 38;
		/**
		 * < Enhance depth data post-processing with holes filling where appropriate<br>
		 * <i>native declaration : line 1507</i>
		 */
		public static final int RS2_OPTION_HOLES_FILL = 39;
		/**
		 * < The distance in mm between the first and the second imagers in stereo-based depth cameras<br>
		 * <i>native declaration : line 1508</i>
		 */
		public static final int RS2_OPTION_STEREO_BASELINE = 40;
		/**
		 * < Allows dynamically ajust the converge step value of the target exposure in Auto-Exposure algorithm<br>
		 * <i>native declaration : line 1509</i>
		 */
		public static final int RS2_OPTION_AUTO_EXPOSURE_CONVERGE_STEP = 41;
		/**
		 * < Impose Inter-camera HW synchronization mode. Applicable for D400/Rolling Shutter SKUs<br>
		 * <i>native declaration : line 1510</i>
		 */
		public static final int RS2_OPTION_INTER_CAM_SYNC_MODE = 42;
		/**
		 * < Select a stream to process<br>
		 * <i>native declaration : line 1511</i>
		 */
		public static final int RS2_OPTION_STREAM_FILTER = 43;
		/**
		 * < Select a stream format to process<br>
		 * <i>native declaration : line 1512</i>
		 */
		public static final int RS2_OPTION_STREAM_FORMAT_FILTER = 44;
		/**
		 * < Select a stream index to process<br>
		 * <i>native declaration : line 1513</i>
		 */
		public static final int RS2_OPTION_STREAM_INDEX_FILTER = 45;
		/**
		 * < When supported, this option make the camera to switch the emitter state every frame. 0 for disabled, 1 for enabled<br>
		 * <i>native declaration : line 1514</i>
		 */
		public static final int RS2_OPTION_EMITTER_ON_OFF = 46;
		/**
		 * < Zero order point x<br>
		 * <i>native declaration : line 1515</i>
		 */
		public static final int RS2_OPTION_ZERO_ORDER_POINT_X = 47;
		/**
		 * < Zero order point y<br>
		 * <i>native declaration : line 1516</i>
		 */
		public static final int RS2_OPTION_ZERO_ORDER_POINT_Y = 48;
		/**
		 * < LLD temperature<br>
		 * <i>native declaration : line 1517</i>
		 */
		public static final int RS2_OPTION_LLD_TEMPERATURE = 49;
		/**
		 * < MC temperature<br>
		 * <i>native declaration : line 1518</i>
		 */
		public static final int RS2_OPTION_MC_TEMPERATURE = 50;
		/**
		 * < MA temperature<br>
		 * <i>native declaration : line 1519</i>
		 */
		public static final int RS2_OPTION_MA_TEMPERATURE = 51;
		/**
		 * < Hardware stream configuration<br>
		 * <i>native declaration : line 1520</i>
		 */
		public static final int RS2_OPTION_HARDWARE_PRESET = 52;
		/**
		 * < disable global time<br>
		 * <i>native declaration : line 1521</i>
		 */
		public static final int RS2_OPTION_GLOBAL_TIME_ENABLED = 53;
		/**
		 * < APD temperature<br>
		 * <i>native declaration : line 1522</i>
		 */
		public static final int RS2_OPTION_APD_TEMPERATURE = 54;
		/**
		 * < Enable an internal map<br>
		 * <i>native declaration : line 1523</i>
		 */
		public static final int RS2_OPTION_ENABLE_MAPPING = 55;
		/**
		 * < Enable appearance based relocalization<br>
		 * <i>native declaration : line 1524</i>
		 */
		public static final int RS2_OPTION_ENABLE_RELOCALIZATION = 56;
		/**
		 * < Enable position jumping<br>
		 * <i>native declaration : line 1525</i>
		 */
		public static final int RS2_OPTION_ENABLE_POSE_JUMPING = 57;
		/**
		 * < Enable dynamic calibration<br>
		 * <i>native declaration : line 1526</i>
		 */
		public static final int RS2_OPTION_ENABLE_DYNAMIC_CALIBRATION = 58;
		/**
		 * < Offset from sensor to depth origin in millimetrers<br>
		 * <i>native declaration : line 1527</i>
		 */
		public static final int RS2_OPTION_DEPTH_OFFSET = 59;
		/**
		 * < Number of enumeration values. Not a valid input: intended to be used in for-loops.<br>
		 * <i>native declaration : line 1528</i>
		 */
		public static final int RS2_OPTION_COUNT = 60;
	};
	/** enum values */
	public static interface rs2_sr300_visual_preset {
		/**
		 * < Preset for short range<br>
		 * <i>native declaration : line 1537</i>
		 */
		public static final int RS2_SR300_VISUAL_PRESET_SHORT_RANGE = 0;
		/**
		 * < Preset for long range<br>
		 * <i>native declaration : line 1538</i>
		 */
		public static final int RS2_SR300_VISUAL_PRESET_LONG_RANGE = 1;
		/**
		 * < Preset for background segmentation<br>
		 * <i>native declaration : line 1539</i>
		 */
		public static final int RS2_SR300_VISUAL_PRESET_BACKGROUND_SEGMENTATION = 2;
		/**
		 * < Preset for gesture recognition<br>
		 * <i>native declaration : line 1540</i>
		 */
		public static final int RS2_SR300_VISUAL_PRESET_GESTURE_RECOGNITION = 3;
		/**
		 * < Preset for object scanning<br>
		 * <i>native declaration : line 1541</i>
		 */
		public static final int RS2_SR300_VISUAL_PRESET_OBJECT_SCANNING = 4;
		/**
		 * < Preset for face analytics<br>
		 * <i>native declaration : line 1542</i>
		 */
		public static final int RS2_SR300_VISUAL_PRESET_FACE_ANALYTICS = 5;
		/**
		 * < Preset for face login<br>
		 * <i>native declaration : line 1543</i>
		 */
		public static final int RS2_SR300_VISUAL_PRESET_FACE_LOGIN = 6;
		/**
		 * < Preset for GR cursor<br>
		 * <i>native declaration : line 1544</i>
		 */
		public static final int RS2_SR300_VISUAL_PRESET_GR_CURSOR = 7;
		/**
		 * < Camera default settings<br>
		 * <i>native declaration : line 1545</i>
		 */
		public static final int RS2_SR300_VISUAL_PRESET_DEFAULT = 8;
		/**
		 * < Preset for mid-range<br>
		 * <i>native declaration : line 1546</i>
		 */
		public static final int RS2_SR300_VISUAL_PRESET_MID_RANGE = 9;
		/**
		 * < Preset for IR only<br>
		 * <i>native declaration : line 1547</i>
		 */
		public static final int RS2_SR300_VISUAL_PRESET_IR_ONLY = 10;
		/**
		 * < Number of enumeration values. Not a valid input: intended to be used in for-loops.<br>
		 * <i>native declaration : line 1548</i>
		 */
		public static final int RS2_SR300_VISUAL_PRESET_COUNT = 11;
	};
	/** enum values */
	public static interface rs2_rs400_visual_preset {
		/** <i>native declaration : line 1555</i> */
		public static final int RS2_RS400_VISUAL_PRESET_CUSTOM = 0;
		/** <i>native declaration : line 1556</i> */
		public static final int RS2_RS400_VISUAL_PRESET_DEFAULT = 1;
		/** <i>native declaration : line 1557</i> */
		public static final int RS2_RS400_VISUAL_PRESET_HAND = 2;
		/** <i>native declaration : line 1558</i> */
		public static final int RS2_RS400_VISUAL_PRESET_HIGH_ACCURACY = 3;
		/** <i>native declaration : line 1559</i> */
		public static final int RS2_RS400_VISUAL_PRESET_HIGH_DENSITY = 4;
		/** <i>native declaration : line 1560</i> */
		public static final int RS2_RS400_VISUAL_PRESET_MEDIUM_DENSITY = 5;
		/** <i>native declaration : line 1561</i> */
		public static final int RS2_RS400_VISUAL_PRESET_REMOVE_IR_PATTERN = 6;
		/** <i>native declaration : line 1562</i> */
		public static final int RS2_RS400_VISUAL_PRESET_COUNT = 7;
	};
	/** enum values */
	public static interface rs2_playback_status {
		/**
		 * < Unknown state<br>
		 * <i>native declaration : line 1927</i>
		 */
		public static final int RS2_PLAYBACK_STATUS_UNKNOWN = 0;
		/**
		 * < One or more sensors were started, playback is reading and raising data<br>
		 * <i>native declaration : line 1928</i>
		 */
		public static final int RS2_PLAYBACK_STATUS_PLAYING = 1;
		/**
		 * < One or more sensors were started, but playback paused reading and paused raising data<br>
		 * <i>native declaration : line 1929</i>
		 */
		public static final int RS2_PLAYBACK_STATUS_PAUSED = 2;
		/**
		 * < All sensors were stopped, or playback has ended (all data was read). This is the initial playback status<br>
		 * <i>native declaration : line 1930</i>
		 */
		public static final int RS2_PLAYBACK_STATUS_STOPPED = 3;
		/** <i>native declaration : line 1931</i> */
		public static final int RS2_PLAYBACK_STATUS_COUNT = 4;
	};
	/** enum values */
	public static interface rs2_recording_mode {
		/**
		 * frame metadata will be recorded, but pixel data will be replaced with zeros to save space<br>
		 * <i>native declaration : line 2103</i>
		 */
		public static final int RS2_RECORDING_MODE_BLANK_FRAMES = 0;
		/**
		 * frames will be encoded using a proprietary lossy encoding, aiming at x5 compression at some CPU expense<br>
		 * <i>native declaration : line 2104</i>
		 */
		public static final int RS2_RECORDING_MODE_COMPRESSED = 1;
		/**
		 * frames will not be compressed, but rather stored as-is. This gives best quality and low CPU overhead, but you might run out of memory<br>
		 * <i>native declaration : line 2105</i>
		 */
		public static final int RS2_RECORDING_MODE_BEST_QUALITY = 2;
		/** <i>native declaration : line 2106</i> */
		public static final int RS2_RECORDING_MODE_COUNT = 3;
	};
	public static final int RS2_PRODUCT_LINE_ANY = (int)0xff;
	public static final int RS2_API_MINOR_VERSION = (int)30;
	public static final int RS2_API_VERSION = (int)(((2) * 10000) + ((30) * 100) + (0));
	public static final int RS2_PRODUCT_LINE_T200 = (int)0x10;
	public static final int RS2_PRODUCT_LINE_NON_INTEL = (int)0x01;
	public static final int RS2_PRODUCT_LINE_L500 = (int)0x08;
	public static final String RS2_API_VERSION_STR = (String)("2.30.0");
	public static final int RS2_PRODUCT_LINE_D400 = (int)0x02;
	public static final int RS2_API_MAJOR_VERSION = (int)2;
	public static final int RS2_UNSIGNED_UPDATE_MODE_FULL = (int)2;
	public static final int RS2_API_BUILD_VERSION = (int)0;
	public static final int RS2_PRODUCT_LINE_DEPTH = (int)(0x08 | 0x04 | 0x02);
	public static final int RS2_PRODUCT_LINE_TRACKING = (int)0x10;
	public static final int RS2_PRODUCT_LINE_SR300 = (int)0x04;
	public static final int RS2_UNSIGNED_UPDATE_MODE_UPDATE = (int)0;
	public static final int RS2_UNSIGNED_UPDATE_MODE_READ_ONLY = (int)1;
	public static final int RS2_API_PATCH_VERSION = (int)0;
	public static final int RS2_PRODUCT_LINE_ANY_INTEL = (int)0xfe;
	public static class rs2_intrinsics extends Structure {
		/** < Width of the image in pixels */
		public int width;
		/** < Height of the image in pixels */
		public int height;
		/** < Horizontal coordinate of the principal point of the image, as a pixel offset from the left edge */
		public float ppx;
		/** < Vertical coordinate of the principal point of the image, as a pixel offset from the top edge */
		public float ppy;
		/** < Focal length of the image plane, as a multiple of pixel width */
		public float fx;
		/** < Focal length of the image plane, as a multiple of pixel height */
		public float fy;
		/**
		 * @see rs2_distortion<br>
		 * < Distortion model of the image<br>
		 * C type : rs2_distortion
		 */
		public int model;
		/**
		 * < Distortion coefficients<br>
		 * C type : float[5]
		 */
		public float[] coeffs = new float[5];
		public rs2_intrinsics() {
			super();
		}
		protected List<String> getFieldOrder() {
			return Arrays.asList("width", "height", "ppx", "ppy", "fx", "fy", "model", "coeffs");
		}
		/**
		 * @param width < Width of the image in pixels<br>
		 * @param height < Height of the image in pixels<br>
		 * @param ppx < Horizontal coordinate of the principal point of the image, as a pixel offset from the left edge<br>
		 * @param ppy < Vertical coordinate of the principal point of the image, as a pixel offset from the top edge<br>
		 * @param fx < Focal length of the image plane, as a multiple of pixel width<br>
		 * @param fy < Focal length of the image plane, as a multiple of pixel height<br>
		 * @param model @see rs2_distortion<br>
		 * < Distortion model of the image<br>
		 * C type : rs2_distortion<br>
		 * @param coeffs < Distortion coefficients<br>
		 * C type : float[5]
		 */
		public rs2_intrinsics(int width, int height, float ppx, float ppy, float fx, float fy, int model, float coeffs[]) {
			super();
			this.width = width;
			this.height = height;
			this.ppx = ppx;
			this.ppy = ppy;
			this.fx = fx;
			this.fy = fy;
			this.model = model;
			if ((coeffs.length != this.coeffs.length))
				throw new IllegalArgumentException("Wrong array size !");
			this.coeffs = coeffs;
		}
		public rs2_intrinsics(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends rs2_intrinsics implements Structure.ByReference {

		};
		public static class ByValue extends rs2_intrinsics implements Structure.ByValue {

		};
	};
	public static class rs2_motion_device_intrinsic extends Structure {
		/**
		 * \internal<br>
		 * Scale X       cross axis  cross axis  Bias X \n<br>
		 * cross axis    Scale Y     cross axis  Bias Y \n<br>
		 * cross axis    cross axis  Scale Z     Bias Z<br>
		 * < Interpret data array values<br>
		 * C type : float[3][4]
		 */
		public float[] data = new float[((3) * (4))];
		/**
		 * < Variance of noise for X, Y, and Z axis<br>
		 * C type : float[3]
		 */
		public float[] noise_variances = new float[3];
		/**
		 * < Variance of bias for X, Y, and Z axis<br>
		 * C type : float[3]
		 */
		public float[] bias_variances = new float[3];
		public rs2_motion_device_intrinsic() {
			super();
		}
		protected List<String> getFieldOrder() {
			return Arrays.asList("data", "noise_variances", "bias_variances");
		}
		/**
		 * @param data \internal<br>
		 * Scale X       cross axis  cross axis  Bias X \n<br>
		 * cross axis    Scale Y     cross axis  Bias Y \n<br>
		 * cross axis    cross axis  Scale Z     Bias Z<br>
		 * < Interpret data array values<br>
		 * C type : float[3][4]<br>
		 * @param noise_variances < Variance of noise for X, Y, and Z axis<br>
		 * C type : float[3]<br>
		 * @param bias_variances < Variance of bias for X, Y, and Z axis<br>
		 * C type : float[3]
		 */
		public rs2_motion_device_intrinsic(float data[], float noise_variances[], float bias_variances[]) {
			super();
			if ((data.length != this.data.length))
				throw new IllegalArgumentException("Wrong array size !");
			this.data = data;
			if ((noise_variances.length != this.noise_variances.length))
				throw new IllegalArgumentException("Wrong array size !");
			this.noise_variances = noise_variances;
			if ((bias_variances.length != this.bias_variances.length))
				throw new IllegalArgumentException("Wrong array size !");
			this.bias_variances = bias_variances;
		}
		public rs2_motion_device_intrinsic(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends rs2_motion_device_intrinsic implements Structure.ByReference {

		};
		public static class ByValue extends rs2_motion_device_intrinsic implements Structure.ByValue {

		};
	};
	public static class rs2_vertex extends Structure {
		/** C type : float[3] */
		public float[] xyz = new float[3];
		public rs2_vertex() {
			super();
		}
		protected List<String> getFieldOrder() {
			return Arrays.asList("xyz");
		}
		/** @param xyz C type : float[3] */
		public rs2_vertex(float xyz[]) {
			super();
			if ((xyz.length != this.xyz.length))
				throw new IllegalArgumentException("Wrong array size !");
			this.xyz = xyz;
		}
		public rs2_vertex(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends rs2_vertex implements Structure.ByReference {

		};
		public static class ByValue extends rs2_vertex implements Structure.ByValue {

		};
	};
	public static class rs2_pixel extends Structure {
		/** C type : int[2] */
		public int[] ij = new int[2];
		public rs2_pixel() {
			super();
		}
		protected List<String> getFieldOrder() {
			return Arrays.asList("ij");
		}
		/** @param ij C type : int[2] */
		public rs2_pixel(int ij[]) {
			super();
			if ((ij.length != this.ij.length))
				throw new IllegalArgumentException("Wrong array size !");
			this.ij = ij;
		}
		public rs2_pixel(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends rs2_pixel implements Structure.ByReference {

		};
		public static class ByValue extends rs2_pixel implements Structure.ByValue {

		};
	};
	public static class rs2_vector extends Structure {
		public float x;
		public float y;
		public float z;
		public rs2_vector() {
			super();
		}
		protected List<String> getFieldOrder() {
			return Arrays.asList("x", "y", "z");
		}
		public rs2_vector(float x, float y, float z) {
			super();
			this.x = x;
			this.y = y;
			this.z = z;
		}
		public rs2_vector(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends rs2_vector implements Structure.ByReference {

		};
		public static class ByValue extends rs2_vector implements Structure.ByValue {

		};
	};
	public static class rs2_quaternion extends Structure {
		public float x;
		public float y;
		public float z;
		public float w;
		public rs2_quaternion() {
			super();
		}
		protected List<String> getFieldOrder() {
			return Arrays.asList("x", "y", "z", "w");
		}
		public rs2_quaternion(float x, float y, float z, float w) {
			super();
			this.x = x;
			this.y = y;
			this.z = z;
			this.w = w;
		}
		public rs2_quaternion(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends rs2_quaternion implements Structure.ByReference {

		};
		public static class ByValue extends rs2_quaternion implements Structure.ByValue {

		};
	};
	public static class rs2_pose extends Structure {
		/**
		 * < X, Y, Z values of translation, in meters (relative to initial position)<br>
		 * C type : rs2_vector
		 */
		public Realsense2Library.rs2_vector translation;
		/**
		 * < X, Y, Z values of velocity, in meters/sec<br>
		 * C type : rs2_vector
		 */
		public Realsense2Library.rs2_vector velocity;
		/**
		 * < X, Y, Z values of acceleration, in meters/sec^2<br>
		 * C type : rs2_vector
		 */
		public Realsense2Library.rs2_vector acceleration;
		/**
		 * < Qi, Qj, Qk, Qr components of rotation as represented in quaternion rotation (relative to initial position)<br>
		 * C type : rs2_quaternion
		 */
		public Realsense2Library.rs2_quaternion rotation;
		/**
		 * < X, Y, Z values of angular velocity, in radians/sec<br>
		 * C type : rs2_vector
		 */
		public Realsense2Library.rs2_vector angular_velocity;
		/**
		 * < X, Y, Z values of angular acceleration, in radians/sec^2<br>
		 * C type : rs2_vector
		 */
		public Realsense2Library.rs2_vector angular_acceleration;
		/** < Pose confidence 0x0 - Failed, 0x1 - Low, 0x2 - Medium, 0x3 - High */
		public int tracker_confidence;
		/** < Pose map confidence 0x0 - Failed, 0x1 - Low, 0x2 - Medium, 0x3 - High */
		public int mapper_confidence;
		public rs2_pose() {
			super();
		}
		protected List<String> getFieldOrder() {
			return Arrays.asList("translation", "velocity", "acceleration", "rotation", "angular_velocity", "angular_acceleration", "tracker_confidence", "mapper_confidence");
		}
		/**
		 * @param translation < X, Y, Z values of translation, in meters (relative to initial position)<br>
		 * C type : rs2_vector<br>
		 * @param velocity < X, Y, Z values of velocity, in meters/sec<br>
		 * C type : rs2_vector<br>
		 * @param acceleration < X, Y, Z values of acceleration, in meters/sec^2<br>
		 * C type : rs2_vector<br>
		 * @param rotation < Qi, Qj, Qk, Qr components of rotation as represented in quaternion rotation (relative to initial position)<br>
		 * C type : rs2_quaternion<br>
		 * @param angular_velocity < X, Y, Z values of angular velocity, in radians/sec<br>
		 * C type : rs2_vector<br>
		 * @param angular_acceleration < X, Y, Z values of angular acceleration, in radians/sec^2<br>
		 * C type : rs2_vector<br>
		 * @param tracker_confidence < Pose confidence 0x0 - Failed, 0x1 - Low, 0x2 - Medium, 0x3 - High<br>
		 * @param mapper_confidence < Pose map confidence 0x0 - Failed, 0x1 - Low, 0x2 - Medium, 0x3 - High
		 */
		public rs2_pose(Realsense2Library.rs2_vector translation, Realsense2Library.rs2_vector velocity, Realsense2Library.rs2_vector acceleration, Realsense2Library.rs2_quaternion rotation, Realsense2Library.rs2_vector angular_velocity, Realsense2Library.rs2_vector angular_acceleration, int tracker_confidence, int mapper_confidence) {
			super();
			this.translation = translation;
			this.velocity = velocity;
			this.acceleration = acceleration;
			this.rotation = rotation;
			this.angular_velocity = angular_velocity;
			this.angular_acceleration = angular_acceleration;
			this.tracker_confidence = tracker_confidence;
			this.mapper_confidence = mapper_confidence;
		}
		public rs2_pose(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends rs2_pose implements Structure.ByReference {

		};
		public static class ByValue extends rs2_pose implements Structure.ByValue {

		};
	};
	public static class rs2_extrinsics extends Structure {
		/**
		 * < Column-major 3x3 rotation matrix<br>
		 * C type : float[9]
		 */
		public float[] rotation = new float[9];
		/**
		 * < Three-element translation vector, in meters<br>
		 * C type : float[3]
		 */
		public float[] translation = new float[3];
		public rs2_extrinsics() {
			super();
		}
		protected List<String> getFieldOrder() {
			return Arrays.asList("rotation", "translation");
		}
		/**
		 * @param rotation < Column-major 3x3 rotation matrix<br>
		 * C type : float[9]<br>
		 * @param translation < Three-element translation vector, in meters<br>
		 * C type : float[3]
		 */
		public rs2_extrinsics(float rotation[], float translation[]) {
			super();
			if ((rotation.length != this.rotation.length))
				throw new IllegalArgumentException("Wrong array size !");
			this.rotation = rotation;
			if ((translation.length != this.translation.length))
				throw new IllegalArgumentException("Wrong array size !");
			this.translation = translation;
		}
		public rs2_extrinsics(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends rs2_extrinsics implements Structure.ByReference {

		};
		public static class ByValue extends rs2_extrinsics implements Structure.ByValue {

		};
	};
	public static class rs2_video_stream extends Structure {
		/**
		 * @see rs2_stream<br>
		 * C type : rs2_stream
		 */
		public int type;
		public int index;
		public int uid;
		public int width;
		public int height;
		public int fps;
		public int bpp;
		/**
		 * @see rs2_format<br>
		 * C type : rs2_format
		 */
		public int fmt;
		/** C type : rs2_intrinsics */
		public Realsense2Library.rs2_intrinsics intrinsics;
		public rs2_video_stream() {
			super();
		}
		protected List<String> getFieldOrder() {
			return Arrays.asList("type", "index", "uid", "width", "height", "fps", "bpp", "fmt", "intrinsics");
		}
		/**
		 * @param type @see rs2_stream<br>
		 * C type : rs2_stream<br>
		 * @param fmt @see rs2_format<br>
		 * C type : rs2_format<br>
		 * @param intrinsics C type : rs2_intrinsics
		 */
		public rs2_video_stream(int type, int index, int uid, int width, int height, int fps, int bpp, int fmt, Realsense2Library.rs2_intrinsics intrinsics) {
			super();
			this.type = type;
			this.index = index;
			this.uid = uid;
			this.width = width;
			this.height = height;
			this.fps = fps;
			this.bpp = bpp;
			this.fmt = fmt;
			this.intrinsics = intrinsics;
		}
		public rs2_video_stream(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends rs2_video_stream implements Structure.ByReference {

		};
		public static class ByValue extends rs2_video_stream implements Structure.ByValue {

		};
	};
	public static class rs2_motion_stream extends Structure {
		/**
		 * @see rs2_stream<br>
		 * C type : rs2_stream
		 */
		public int type;
		public int index;
		public int uid;
		public int fps;
		/**
		 * @see rs2_format<br>
		 * C type : rs2_format
		 */
		public int fmt;
		/** C type : rs2_motion_device_intrinsic */
		public Realsense2Library.rs2_motion_device_intrinsic intrinsics;
		public rs2_motion_stream() {
			super();
		}
		protected List<String> getFieldOrder() {
			return Arrays.asList("type", "index", "uid", "fps", "fmt", "intrinsics");
		}
		/**
		 * @param type @see rs2_stream<br>
		 * C type : rs2_stream<br>
		 * @param fmt @see rs2_format<br>
		 * C type : rs2_format<br>
		 * @param intrinsics C type : rs2_motion_device_intrinsic
		 */
		public rs2_motion_stream(int type, int index, int uid, int fps, int fmt, Realsense2Library.rs2_motion_device_intrinsic intrinsics) {
			super();
			this.type = type;
			this.index = index;
			this.uid = uid;
			this.fps = fps;
			this.fmt = fmt;
			this.intrinsics = intrinsics;
		}
		public rs2_motion_stream(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends rs2_motion_stream implements Structure.ByReference {

		};
		public static class ByValue extends rs2_motion_stream implements Structure.ByValue {

		};
	};
	public static class rs2_pose_stream extends Structure {
		/**
		 * @see rs2_stream<br>
		 * C type : rs2_stream
		 */
		public int type;
		public int index;
		public int uid;
		public int fps;
		/**
		 * @see rs2_format<br>
		 * C type : rs2_format
		 */
		public int fmt;
		public rs2_pose_stream() {
			super();
		}
		protected List<String> getFieldOrder() {
			return Arrays.asList("type", "index", "uid", "fps", "fmt");
		}
		/**
		 * @param type @see rs2_stream<br>
		 * C type : rs2_stream<br>
		 * @param fmt @see rs2_format<br>
		 * C type : rs2_format
		 */
		public rs2_pose_stream(int type, int index, int uid, int fps, int fmt) {
			super();
			this.type = type;
			this.index = index;
			this.uid = uid;
			this.fps = fps;
			this.fmt = fmt;
		}
		public rs2_pose_stream(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends rs2_pose_stream implements Structure.ByReference {

		};
		public static class ByValue extends rs2_pose_stream implements Structure.ByValue {

		};
	};
	public static class rs2_software_video_frame extends Structure {
		/** C type : void* */
		public Pointer pixels;
		/** C type : deleter_callback* */
		public Realsense2Library.rs2_software_pose_frame.deleter_callback deleter;
		public int stride;
		public int bpp;
		/** C type : rs2_time_t */
		public double timestamp;
		/**
		 * @see rs2_timestamp_domain<br>
		 * C type : rs2_timestamp_domain
		 */
		public int domain;
		public int frame_number;
		/** C type : const rs2_stream_profile* */
		public PointerByReference profile;
		public interface deleter_callback extends Callback {
			void apply(Pointer voidPtr1);
		};
		public rs2_software_video_frame() {
			super();
		}
		protected List<String> getFieldOrder() {
			return Arrays.asList("pixels", "deleter", "stride", "bpp", "timestamp", "domain", "frame_number", "profile");
		}
		/**
		 * @param pixels C type : void*<br>
		 * @param deleter C type : deleter_callback*<br>
		 * @param timestamp C type : rs2_time_t<br>
		 * @param domain @see rs2_timestamp_domain<br>
		 * C type : rs2_timestamp_domain<br>
		 * @param profile C type : const rs2_stream_profile*
		 */
		public rs2_software_video_frame(Pointer pixels, Realsense2Library.rs2_software_pose_frame.deleter_callback deleter, int stride, int bpp, double timestamp, int domain, int frame_number, PointerByReference profile) {
			super();
			this.pixels = pixels;
			this.deleter = deleter;
			this.stride = stride;
			this.bpp = bpp;
			this.timestamp = timestamp;
			this.domain = domain;
			this.frame_number = frame_number;
			this.profile = profile;
		}
		public rs2_software_video_frame(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends rs2_software_video_frame implements Structure.ByReference {

		};
		public static class ByValue extends rs2_software_video_frame implements Structure.ByValue {

		};
	};
	public static class rs2_software_motion_frame extends Structure {
		/** C type : void* */
		public Pointer data;
		/** C type : deleter_callback* */
		public Realsense2Library.rs2_software_pose_frame.deleter_callback deleter;
		/** C type : rs2_time_t */
		public double timestamp;
		/**
		 * @see rs2_timestamp_domain<br>
		 * C type : rs2_timestamp_domain
		 */
		public int domain;
		public int frame_number;
		/** C type : const rs2_stream_profile* */
		public PointerByReference profile;
		public interface deleter_callback extends Callback {
			void apply(Pointer voidPtr1);
		};
		public rs2_software_motion_frame() {
			super();
		}
		protected List<String> getFieldOrder() {
			return Arrays.asList("data", "deleter", "timestamp", "domain", "frame_number", "profile");
		}
		/**
		 * @param data C type : void*<br>
		 * @param deleter C type : deleter_callback*<br>
		 * @param timestamp C type : rs2_time_t<br>
		 * @param domain @see rs2_timestamp_domain<br>
		 * C type : rs2_timestamp_domain<br>
		 * @param profile C type : const rs2_stream_profile*
		 */
		public rs2_software_motion_frame(Pointer data, Realsense2Library.rs2_software_pose_frame.deleter_callback deleter, double timestamp, int domain, int frame_number, PointerByReference profile) {
			super();
			this.data = data;
			this.deleter = deleter;
			this.timestamp = timestamp;
			this.domain = domain;
			this.frame_number = frame_number;
			this.profile = profile;
		}
		public rs2_software_motion_frame(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends rs2_software_motion_frame implements Structure.ByReference {

		};
		public static class ByValue extends rs2_software_motion_frame implements Structure.ByValue {

		};
	};
	public static class rs2_software_pose_frame extends Structure {
		/** <i>native declaration : line 2171</i> */
		public static class pose_frame_info extends Structure {
			/** C type : float[3] */
			public float[] translation = new float[3];
			/** C type : float[3] */
			public float[] velocity = new float[3];
			/** C type : float[3] */
			public float[] acceleration = new float[3];
			/** C type : float[4] */
			public float[] rotation = new float[4];
			/** C type : float[3] */
			public float[] angular_velocity = new float[3];
			/** C type : float[3] */
			public float[] angular_acceleration = new float[3];
			public int tracker_confidence;
			public int mapper_confidence;
			public pose_frame_info() {
				super();
			}
			protected List<String> getFieldOrder() {
				return Arrays.asList("translation", "velocity", "acceleration", "rotation", "angular_velocity", "angular_acceleration", "tracker_confidence", "mapper_confidence");
			}
			/**
			 * @param translation C type : float[3]<br>
			 * @param velocity C type : float[3]<br>
			 * @param acceleration C type : float[3]<br>
			 * @param rotation C type : float[4]<br>
			 * @param angular_velocity C type : float[3]<br>
			 * @param angular_acceleration C type : float[3]
			 */
			public pose_frame_info(float translation[], float velocity[], float acceleration[], float rotation[], float angular_velocity[], float angular_acceleration[], int tracker_confidence, int mapper_confidence) {
				super();
				if ((translation.length != this.translation.length))
					throw new IllegalArgumentException("Wrong array size !");
				this.translation = translation;
				if ((velocity.length != this.velocity.length))
					throw new IllegalArgumentException("Wrong array size !");
				this.velocity = velocity;
				if ((acceleration.length != this.acceleration.length))
					throw new IllegalArgumentException("Wrong array size !");
				this.acceleration = acceleration;
				if ((rotation.length != this.rotation.length))
					throw new IllegalArgumentException("Wrong array size !");
				this.rotation = rotation;
				if ((angular_velocity.length != this.angular_velocity.length))
					throw new IllegalArgumentException("Wrong array size !");
				this.angular_velocity = angular_velocity;
				if ((angular_acceleration.length != this.angular_acceleration.length))
					throw new IllegalArgumentException("Wrong array size !");
				this.angular_acceleration = angular_acceleration;
				this.tracker_confidence = tracker_confidence;
				this.mapper_confidence = mapper_confidence;
			}
			public pose_frame_info(Pointer peer) {
				super(peer);
			}
			public static class ByReference extends pose_frame_info implements Structure.ByReference {

			};
			public static class ByValue extends pose_frame_info implements Structure.ByValue {

			};
		};
		/** C type : void* */
		public Pointer data;
		/** C type : deleter_callback* */
		public Realsense2Library.rs2_software_pose_frame.deleter_callback deleter;
		/** C type : rs2_time_t */
		public double timestamp;
		/**
		 * @see rs2_timestamp_domain<br>
		 * C type : rs2_timestamp_domain
		 */
		public int domain;
		public int frame_number;
		/** C type : const rs2_stream_profile* */
		public PointerByReference profile;
		public interface deleter_callback extends Callback {
			void apply(Pointer voidPtr1);
		};
		public rs2_software_pose_frame() {
			super();
		}
		protected List<String> getFieldOrder() {
			return Arrays.asList("data", "deleter", "timestamp", "domain", "frame_number", "profile");
		}
		/**
		 * @param data C type : void*<br>
		 * @param deleter C type : deleter_callback*<br>
		 * @param timestamp C type : rs2_time_t<br>
		 * @param domain @see rs2_timestamp_domain<br>
		 * C type : rs2_timestamp_domain<br>
		 * @param profile C type : const rs2_stream_profile*
		 */
		public rs2_software_pose_frame(Pointer data, Realsense2Library.rs2_software_pose_frame.deleter_callback deleter, double timestamp, int domain, int frame_number, PointerByReference profile) {
			super();
			this.data = data;
			this.deleter = deleter;
			this.timestamp = timestamp;
			this.domain = domain;
			this.frame_number = frame_number;
			this.profile = profile;
		}
		public rs2_software_pose_frame(Pointer peer) {
			super(peer);
		}
		public static class ByReference extends rs2_software_pose_frame implements Structure.ByReference {

		};
		public static class ByValue extends rs2_software_pose_frame implements Structure.ByValue {

		};
	};
	public interface rs2_notification_callback_ptr extends Callback {
		void apply(Pointer rs2_notificationPtr1, Pointer voidPtr1);
	};
	public interface rs2_devices_changed_callback_ptr extends Callback {
		void apply(Pointer rs2_device_listPtr1, Pointer rs2_device_listPtr2, Pointer voidPtr1);
	};
	public interface rs2_frame_callback_ptr extends Callback {
		void apply(Pointer rs2_framePtr1, Pointer voidPtr1);
	};
	public interface rs2_frame_processor_callback_ptr extends Callback {
		void apply(Pointer rs2_framePtr1, Pointer rs2_sourcePtr1, Pointer voidPtr1);
	};
	public interface rs2_update_progress_callback_ptr extends Callback {
		void apply(float float1, Pointer voidPtr1);
	};
	public interface rs2_playback_status_changed_callback_ptr extends Callback {
		void apply(int rs2_playback_status1);
	};
	/**
	 * Original signature : <code>char* rs2_notification_category_to_string(rs2_notification_category)</code><br>
	 * <i>native declaration : line 15</i>
	 */
	Pointer rs2_notification_category_to_string(int category);
	/**
	 * Original signature : <code>char* rs2_exception_type_to_string(rs2_exception_type)</code><br>
	 * <i>native declaration : line 30</i>
	 */
	Pointer rs2_exception_type_to_string(int type);
	/**
	 * Original signature : <code>char* rs2_distortion_to_string(rs2_distortion)</code><br>
	 * <i>native declaration : line 43</i>
	 */
	Pointer rs2_distortion_to_string(int distortion);
	/**
	 * Original signature : <code>char* rs2_log_severity_to_string(rs2_log_severity)</code><br>
	 * <i>native declaration : line 118</i>
	 */
	Pointer rs2_log_severity_to_string(int info);
	/**
	 * Original signature : <code>char* rs2_extension_type_to_string(rs2_extension)</code><br>
	 * <i>native declaration : line 166</i>
	 */
	Pointer rs2_extension_type_to_string(int type);
	/**
	 * Original signature : <code>char* rs2_extension_to_string(rs2_extension)</code><br>
	 * <i>native declaration : line 167</i>
	 */
	Pointer rs2_extension_to_string(int type);
	/**
	 * Original signature : <code>rs2_error* rs2_create_error(const char*, const char*, const char*, rs2_exception_type)</code><br>
	 * <i>native declaration : line 236</i><br>
	 * @deprecated use the safer methods {@link #rs2_create_error(java.lang.String, java.lang.String, java.lang.String, int)} and {@link #rs2_create_error(com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, int)} instead
	 */
	@Deprecated
	PointerByReference rs2_create_error(Pointer what, Pointer name, Pointer args, int type);
	/**
	 * Original signature : <code>rs2_error* rs2_create_error(const char*, const char*, const char*, rs2_exception_type)</code><br>
	 * <i>native declaration : line 236</i>
	 */
	PointerByReference rs2_create_error(String what, String name, String args, int type);
	/**
	 * Original signature : <code>rs2_exception_type rs2_get_librealsense_exception_type(const rs2_error*)</code><br>
	 * <i>native declaration : line 237</i><br>
	 * @deprecated use the safer method {@link #rs2_get_librealsense_exception_type(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	int rs2_get_librealsense_exception_type(Pointer error);
	/**
	 * Original signature : <code>rs2_exception_type rs2_get_librealsense_exception_type(const rs2_error*)</code><br>
	 * <i>native declaration : line 237</i>
	 */
	int rs2_get_librealsense_exception_type(PointerByReference error);

	/**
	 * Original signature : <code>char* rs2_get_failed_function(const rs2_error*)</code><br>
	 * <i>native declaration : line 238</i>
	 */
	Pointer rs2_get_failed_function(PointerByReference error);
	/**
	 * Original signature : <code>char* rs2_get_failed_args(const rs2_error*)</code><br>
	 * <i>native declaration : line 239</i><br>
	 * @deprecated use the safer method {@link #rs2_get_failed_args(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	Pointer rs2_get_failed_args(Pointer error);
	/**
	 * Original signature : <code>char* rs2_get_failed_args(const rs2_error*)</code><br>
	 * <i>native declaration : line 239</i>
	 */
	Pointer rs2_get_failed_args(PointerByReference error);
	/**
	 * Original signature : <code>char* rs2_get_error_message(const rs2_error*)</code><br>
	 * <i>native declaration : line 240</i><br>
	 * @deprecated use the safer method {@link #rs2_get_error_message(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	Pointer rs2_get_error_message(Pointer error);
	/**
	 * Original signature : <code>char* rs2_get_error_message(const rs2_error*)</code><br>
	 * <i>native declaration : line 240</i>
	 */
	Pointer rs2_get_error_message(PointerByReference error);
	/**
	 * Original signature : <code>void rs2_free_error(rs2_error*)</code><br>
	 * <i>native declaration : line 241</i><br>
	 * @deprecated use the safer method {@link #rs2_free_error(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_free_error(Pointer error);
	/**
	 * Original signature : <code>void rs2_free_error(rs2_error*)</code><br>
	 * <i>native declaration : line 241</i>
	 */
	void rs2_free_error(PointerByReference error);
	/**
	 * \brief Creates RealSense context that is required for the rest of the API.<br>
	 * \param[in] api_version Users are expected to pass their version of \c RS2_API_VERSION to make sure they are running the correct librealsense version.<br>
	 * \param[out] error  If non-null, receives any error that occurs during this call, otherwise, errors are ignored.<br>
	 * \return            Context object<br>
	 * Original signature : <code>rs2_context* rs2_create_context(int, rs2_error**)</code><br>
	 * <i>native declaration : line 251</i>
	 */
	Realsense2Library.rs2_context rs2_create_context(int api_version, PointerByReference error);

	/**
	 * \brief Frees the relevant context object.<br>
	 * \param[in] context Object that is no longer needed<br>
	 * Original signature : <code>void rs2_delete_context(rs2_context*)</code><br>
	 * <i>native declaration : line 257</i>
	 */
	void rs2_delete_context(Realsense2Library.rs2_context context);

	/**
	 * set callback to get devices changed events<br>
	 * these events will be raised by the context whenever new RealSense device is connected or existing device gets disconnected<br>
	 * \param context     Object representing librealsense session<br>
	 * \param[in] callback callback object created from c++ application. ownership over the callback object is moved into the context<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_set_devices_changed_callback_cpp(rs2_context*, rs2_devices_changed_callback*, rs2_error**)</code><br>
	 * <i>native declaration : line 266</i>
	 */
	void rs2_set_devices_changed_callback_cpp(Realsense2Library.rs2_context context, PointerByReference callback, PointerByReference error);
	/**
	 * set callback to get devices changed events<br>
	 * these events will be raised by the context whenever new RealSense device is connected or existing device gets disconnected<br>
	 * \param context     Object representing librealsense session<br>
	 * \param[in] callback function pointer to register as per-notifications callback<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_set_devices_changed_callback(const rs2_context*, rs2_devices_changed_callback_ptr, void*, rs2_error**)</code><br>
	 * <i>native declaration : line 275</i><br>
	 * @deprecated use the safer method {@link #rs2_set_devices_changed_callback(com.sun.jna.ptr.PointerByReference, realsense2.Realsense2Library.rs2_devices_changed_callback_ptr, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_set_devices_changed_callback(Pointer context, Realsense2Library.rs2_devices_changed_callback_ptr callback, Pointer user, PointerByReference error);
	/**
	 * set callback to get devices changed events<br>
	 * these events will be raised by the context whenever new RealSense device is connected or existing device gets disconnected<br>
	 * \param context     Object representing librealsense session<br>
	 * \param[in] callback function pointer to register as per-notifications callback<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_set_devices_changed_callback(const rs2_context*, rs2_devices_changed_callback_ptr, void*, rs2_error**)</code><br>
	 * <i>native declaration : line 275</i>
	 */
	void rs2_set_devices_changed_callback(PointerByReference context, Realsense2Library.rs2_devices_changed_callback_ptr callback, Pointer user, PointerByReference error);
	/**
	 * Create a new device and add it to the context<br>
	 * \param ctx   The context to which the new device will be added<br>
	 * \param file  The file from which the device should be created<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * @return  A pointer to a device that plays data from the file, or null in case of failure<br>
	 * Original signature : <code>rs2_device* rs2_context_add_device(rs2_context*, const char*, rs2_error**)</code><br>
	 * <i>native declaration : line 284</i><br>
	 * @deprecated use the safer methods {@link #rs2_context_add_device(com.sun.jna.ptr.PointerByReference, java.lang.String, com.sun.jna.ptr.PointerByReference)} and {@link #rs2_context_add_device(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	PointerByReference rs2_context_add_device(Pointer ctx, Pointer file, PointerByReference error);
	/**
	 * Create a new device and add it to the context<br>
	 * \param ctx   The context to which the new device will be added<br>
	 * \param file  The file from which the device should be created<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * @return  A pointer to a device that plays data from the file, or null in case of failure<br>
	 * Original signature : <code>rs2_device* rs2_context_add_device(rs2_context*, const char*, rs2_error**)</code><br>
	 * <i>native declaration : line 284</i>
	 */
	PointerByReference rs2_context_add_device(PointerByReference ctx, String file, PointerByReference error);
	/**
	 * Create a new device and add it to the context<br>
	 * \param ctx   The context to which the new device will be added<br>
	 * \param file  The file from which the device should be created<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * @return  A pointer to a device that plays data from the file, or null in case of failure<br>
	 * Original signature : <code>rs2_device* rs2_context_add_device(rs2_context*, const char*, rs2_error**)</code><br>
	 * <i>native declaration : line 284</i>
	 */
	PointerByReference rs2_context_add_device(PointerByReference ctx, Pointer file, PointerByReference error);
	/**
	 * Add an instance of software device to the context<br>
	 * \param ctx   The context to which the new device will be added<br>
	 * \param dev   Instance of software device to register into the context<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_context_add_software_device(rs2_context*, rs2_device*, rs2_error**)</code><br>
	 * <i>native declaration : line 292</i><br>
	 * @deprecated use the safer method {@link #rs2_context_add_software_device(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_context_add_software_device(Pointer ctx, Pointer dev, PointerByReference error);
	/**
	 * Add an instance of software device to the context<br>
	 * \param ctx   The context to which the new device will be added<br>
	 * \param dev   Instance of software device to register into the context<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_context_add_software_device(rs2_context*, rs2_device*, rs2_error**)</code><br>
	 * <i>native declaration : line 292</i>
	 */
	void rs2_context_add_software_device(PointerByReference ctx, PointerByReference dev, PointerByReference error);
	/**
	 * Removes a playback device from the context, if exists<br>
	 * \param[in]  ctx       The context from which the device should be removed<br>
	 * \param[in]  file      The file name that was used to add the device<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_context_remove_device(rs2_context*, const char*, rs2_error**)</code><br>
	 * <i>native declaration : line 300</i><br>
	 * @deprecated use the safer methods {@link #rs2_context_remove_device(com.sun.jna.ptr.PointerByReference, java.lang.String, com.sun.jna.ptr.PointerByReference)} and {@link #rs2_context_remove_device(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_context_remove_device(Pointer ctx, Pointer file, PointerByReference error);
	/**
	 * Removes a playback device from the context, if exists<br>
	 * \param[in]  ctx       The context from which the device should be removed<br>
	 * \param[in]  file      The file name that was used to add the device<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_context_remove_device(rs2_context*, const char*, rs2_error**)</code><br>
	 * <i>native declaration : line 300</i>
	 */
	void rs2_context_remove_device(PointerByReference ctx, String file, PointerByReference error);
	/**
	 * Removes a playback device from the context, if exists<br>
	 * \param[in]  ctx       The context from which the device should be removed<br>
	 * \param[in]  file      The file name that was used to add the device<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_context_remove_device(rs2_context*, const char*, rs2_error**)</code><br>
	 * <i>native declaration : line 300</i>
	 */
	void rs2_context_remove_device(PointerByReference ctx, Pointer file, PointerByReference error);
	/**
	 * Removes tracking module.<br>
	 * function query_devices() locks the tracking module in the tm_context object. <br>
	 * If the tracking module device is not used it should be removed using this function, so that other applications could find it.<br>
	 * This function can be used both before the call to query_device() to prevent enabling tracking modules or afterwards to <br>
	 * release them.<br>
	 * Original signature : <code>void rs2_context_unload_tracking_module(rs2_context*, rs2_error**)</code><br>
	 * <i>native declaration : line 309</i><br>
	 * @deprecated use the safer method {@link #rs2_context_unload_tracking_module(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_context_unload_tracking_module(Pointer ctx, PointerByReference error);
	/**
	 * Removes tracking module.<br>
	 * function query_devices() locks the tracking module in the tm_context object. <br>
	 * If the tracking module device is not used it should be removed using this function, so that other applications could find it.<br>
	 * This function can be used both before the call to query_device() to prevent enabling tracking modules or afterwards to <br>
	 * release them.<br>
	 * Original signature : <code>void rs2_context_unload_tracking_module(rs2_context*, rs2_error**)</code><br>
	 * <i>native declaration : line 309</i>
	 */
	void rs2_context_unload_tracking_module(PointerByReference ctx, PointerByReference error);

	/**
	 * create a static snapshot of all connected devices at the time of the call<br>
	 * \param context     Object representing librealsense session<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return            the list of devices, should be released by rs2_delete_device_list<br>
	 * Original signature : <code>rs2_device_list* rs2_query_devices(const rs2_context*, rs2_error**)</code><br>
	 * <i>native declaration : line 317</i>
	 */
	Realsense2Library.rs2_device_list rs2_query_devices(Realsense2Library.rs2_context context, PointerByReference error);
	/**
	 * create a static snapshot of all connected devices at the time of the call<br>
	 * \param context     Object representing librealsense session<br>
	 * \param product_mask Controls what kind of devices will be returned<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return            the list of devices, should be released by rs2_delete_device_list<br>
	 * Original signature : <code>rs2_device_list* rs2_query_devices_ex(const rs2_context*, int, rs2_error**)</code><br>
	 * <i>native declaration : line 336</i><br>
	 * @deprecated use the safer method {@link #rs2_query_devices_ex(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	PointerByReference rs2_query_devices_ex(Pointer context, int product_mask, PointerByReference error);
	/**
	 * create a static snapshot of all connected devices at the time of the call<br>
	 * \param context     Object representing librealsense session<br>
	 * \param product_mask Controls what kind of devices will be returned<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return            the list of devices, should be released by rs2_delete_device_list<br>
	 * Original signature : <code>rs2_device_list* rs2_query_devices_ex(const rs2_context*, int, rs2_error**)</code><br>
	 * <i>native declaration : line 336</i>
	 */
	PointerByReference rs2_query_devices_ex(PointerByReference context, int product_mask, PointerByReference error);
	/**
	 * \brief Creates RealSense device_hub .<br>
	 * \param[in] context The context for the device hub<br>
	 * \param[out] error  If non-null, receives any error that occurs during this call, otherwise, errors are ignored.<br>
	 * \return            Device hub object<br>
	 * Original signature : <code>rs2_device_hub* rs2_create_device_hub(const rs2_context*, rs2_error**)</code><br>
	 * <i>native declaration : line 344</i><br>
	 * @deprecated use the safer method {@link #rs2_create_device_hub(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	PointerByReference rs2_create_device_hub(Pointer context, PointerByReference error);
	/**
	 * \brief Creates RealSense device_hub .<br>
	 * \param[in] context The context for the device hub<br>
	 * \param[out] error  If non-null, receives any error that occurs during this call, otherwise, errors are ignored.<br>
	 * \return            Device hub object<br>
	 * Original signature : <code>rs2_device_hub* rs2_create_device_hub(const rs2_context*, rs2_error**)</code><br>
	 * <i>native declaration : line 344</i>
	 */
	PointerByReference rs2_create_device_hub(PointerByReference context, PointerByReference error);
	/**
	 * \brief Frees the relevant device hub object.<br>
	 * \param[in] hub Object that is no longer needed<br>
	 * Original signature : <code>void rs2_delete_device_hub(const rs2_device_hub*)</code><br>
	 * <i>native declaration : line 350</i><br>
	 * @deprecated use the safer method {@link #rs2_delete_device_hub(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_delete_device_hub(Pointer hub);
	/**
	 * \brief Frees the relevant device hub object.<br>
	 * \param[in] hub Object that is no longer needed<br>
	 * Original signature : <code>void rs2_delete_device_hub(const rs2_device_hub*)</code><br>
	 * <i>native declaration : line 350</i>
	 */
	void rs2_delete_device_hub(PointerByReference hub);
	/**
	 * If any device is connected return it, otherwise wait until next RealSense device connects.<br>
	 * Calling this method multiple times will cycle through connected devices<br>
	 * \param[in] ctx The context to creat the device<br>
	 * \param[in] hub The device hub object<br>
	 * \param[out] error  If non-null, receives any error that occurs during this call, otherwise, errors are ignored.<br>
	 * \return            device object<br>
	 * Original signature : <code>rs2_device* rs2_device_hub_wait_for_device(const rs2_device_hub*, rs2_error**)</code><br>
	 * <i>native declaration : line 360</i><br>
	 * @deprecated use the safer method {@link #rs2_device_hub_wait_for_device(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	PointerByReference rs2_device_hub_wait_for_device(Pointer hub, PointerByReference error);
	/**
	 * If any device is connected return it, otherwise wait until next RealSense device connects.<br>
	 * Calling this method multiple times will cycle through connected devices<br>
	 * \param[in] ctx The context to creat the device<br>
	 * \param[in] hub The device hub object<br>
	 * \param[out] error  If non-null, receives any error that occurs during this call, otherwise, errors are ignored.<br>
	 * \return            device object<br>
	 * Original signature : <code>rs2_device* rs2_device_hub_wait_for_device(const rs2_device_hub*, rs2_error**)</code><br>
	 * <i>native declaration : line 360</i>
	 */
	PointerByReference rs2_device_hub_wait_for_device(PointerByReference hub, PointerByReference error);
	/**
	 * Checks if device is still connected<br>
	 * \param[in] hub The device hub object<br>
	 * \param[in] device The device<br>
	 * \param[out] error  If non-null, receives any error that occurs during this call, otherwise, errors are ignored.<br>
	 * \return            1 if the device is connected, 0 otherwise<br>
	 * Original signature : <code>int rs2_device_hub_is_device_connected(const rs2_device_hub*, const rs2_device*, rs2_error**)</code><br>
	 * <i>native declaration : line 369</i><br>
	 * @deprecated use the safer method {@link #rs2_device_hub_is_device_connected(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	int rs2_device_hub_is_device_connected(Pointer hub, Pointer device, PointerByReference error);
	/**
	 * Checks if device is still connected<br>
	 * \param[in] hub The device hub object<br>
	 * \param[in] device The device<br>
	 * \param[out] error  If non-null, receives any error that occurs during this call, otherwise, errors are ignored.<br>
	 * \return            1 if the device is connected, 0 otherwise<br>
	 * Original signature : <code>int rs2_device_hub_is_device_connected(const rs2_device_hub*, const rs2_device*, rs2_error**)</code><br>
	 * <i>native declaration : line 369</i>
	 */
	int rs2_device_hub_is_device_connected(PointerByReference hub, PointerByReference device, PointerByReference error);
	/**
	 * Original signature : <code>char* rs2_camera_info_to_string(rs2_camera_info)</code><br>
	 * <i>native declaration : line 392</i>
	 */
	Pointer rs2_camera_info_to_string(int info);
	/**
	 * Original signature : <code>char* rs2_stream_to_string(rs2_stream)</code><br>
	 * <i>native declaration : line 409</i>
	 */
	Pointer rs2_stream_to_string(int stream);
	/**
	 * Original signature : <code>char* rs2_format_to_string(rs2_format)</code><br>
	 * <i>native declaration : line 439</i>
	 */
	Pointer rs2_format_to_string(int format);
	/**
	 * Deletes sensors list, any sensors created from this list will remain unaffected<br>
	 * \param[in] info_list list to delete<br>
	 * Original signature : <code>void rs2_delete_sensor_list(rs2_sensor_list*)</code><br>
	 * <i>native declaration : line 452</i><br>
	 * @deprecated use the safer method {@link #rs2_delete_sensor_list(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_delete_sensor_list(Pointer info_list);
	/**
	 * Deletes sensors list, any sensors created from this list will remain unaffected<br>
	 * \param[in] info_list list to delete<br>
	 * Original signature : <code>void rs2_delete_sensor_list(rs2_sensor_list*)</code><br>
	 * <i>native declaration : line 452</i>
	 */
	void rs2_delete_sensor_list(PointerByReference info_list);
	/**
	 * Determines number of sensors in a list<br>
	 * \param[in] info_list The list of connected sensors captured using rs2_query_sensors<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return            Sensors count<br>
	 * Original signature : <code>int rs2_get_sensors_count(const rs2_sensor_list*, rs2_error**)</code><br>
	 * <i>native declaration : line 460</i><br>
	 * @deprecated use the safer method {@link #rs2_get_sensors_count(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	int rs2_get_sensors_count(Pointer info_list, PointerByReference error);
	/**
	 * Determines number of sensors in a list<br>
	 * \param[in] info_list The list of connected sensors captured using rs2_query_sensors<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return            Sensors count<br>
	 * Original signature : <code>int rs2_get_sensors_count(const rs2_sensor_list*, rs2_error**)</code><br>
	 * <i>native declaration : line 460</i>
	 */
	int rs2_get_sensors_count(PointerByReference info_list, PointerByReference error);
	/**
	 * delete relasense sensor<br>
	 * \param[in] sensor realsense sensor to delete<br>
	 * Original signature : <code>void rs2_delete_sensor(rs2_sensor*)</code><br>
	 * <i>native declaration : line 466</i><br>
	 * @deprecated use the safer method {@link #rs2_delete_sensor(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_delete_sensor(Pointer sensor);
	/**
	 * delete relasense sensor<br>
	 * \param[in] sensor realsense sensor to delete<br>
	 * Original signature : <code>void rs2_delete_sensor(rs2_sensor*)</code><br>
	 * <i>native declaration : line 466</i>
	 */
	void rs2_delete_sensor(PointerByReference sensor);
	/**
	 * create sensor by index<br>
	 * \param[in] index   the zero based index of sensor to retrieve<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return            the requested sensor, should be released by rs2_delete_sensor<br>
	 * Original signature : <code>rs2_sensor* rs2_create_sensor(const rs2_sensor_list*, int, rs2_error**)</code><br>
	 * <i>native declaration : line 474</i><br>
	 * @deprecated use the safer method {@link #rs2_create_sensor(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	PointerByReference rs2_create_sensor(Pointer list, int index, PointerByReference error);
	/**
	 * create sensor by index<br>
	 * \param[in] index   the zero based index of sensor to retrieve<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return            the requested sensor, should be released by rs2_delete_sensor<br>
	 * Original signature : <code>rs2_sensor* rs2_create_sensor(const rs2_sensor_list*, int, rs2_error**)</code><br>
	 * <i>native declaration : line 474</i>
	 */
	PointerByReference rs2_create_sensor(PointerByReference list, int index, PointerByReference error);
	/**
	 * This is a helper function allowing the user to discover the device from one of its sensors<br>
	 * \param[in] sensor     Pointer to a sensor<br>
	 * \param[out] error     if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return               new device wrapper for the device of the sensor. Needs to be released by delete_device<br>
	 * Original signature : <code>rs2_device* rs2_create_device_from_sensor(const rs2_sensor*, rs2_error**)</code><br>
	 * <i>native declaration : line 482</i><br>
	 * @deprecated use the safer method {@link #rs2_create_device_from_sensor(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	PointerByReference rs2_create_device_from_sensor(Pointer sensor, PointerByReference error);
	/**
	 * This is a helper function allowing the user to discover the device from one of its sensors<br>
	 * \param[in] sensor     Pointer to a sensor<br>
	 * \param[out] error     if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return               new device wrapper for the device of the sensor. Needs to be released by delete_device<br>
	 * Original signature : <code>rs2_device* rs2_create_device_from_sensor(const rs2_sensor*, rs2_error**)</code><br>
	 * <i>native declaration : line 482</i>
	 */
	PointerByReference rs2_create_device_from_sensor(PointerByReference sensor, PointerByReference error);
	/**
	 * retrieve sensor specific information, like versions of various internal components<br>
	 * \param[in] sensor     the RealSense sensor<br>
	 * \param[in] info       camera info type to retrieve<br>
	 * \param[out] error     if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return               the requested camera info string, in a format specific to the device model<br>
	 * Original signature : <code>char* rs2_get_sensor_info(const rs2_sensor*, rs2_camera_info, rs2_error**)</code><br>
	 * <i>native declaration : line 491</i><br>
	 * @deprecated use the safer method {@link #rs2_get_sensor_info(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	Pointer rs2_get_sensor_info(Pointer sensor, int info, PointerByReference error);
	/**
	 * retrieve sensor specific information, like versions of various internal components<br>
	 * \param[in] sensor     the RealSense sensor<br>
	 * \param[in] info       camera info type to retrieve<br>
	 * \param[out] error     if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return               the requested camera info string, in a format specific to the device model<br>
	 * Original signature : <code>char* rs2_get_sensor_info(const rs2_sensor*, rs2_camera_info, rs2_error**)</code><br>
	 * <i>native declaration : line 491</i>
	 */
	Pointer rs2_get_sensor_info(PointerByReference sensor, int info, PointerByReference error);
	/**
	 * check if specific sensor info is supported<br>
	 * \param[in] info    the parameter to check for support<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return                true if the parameter both exist and well-defined for the specific device<br>
	 * Original signature : <code>int rs2_supports_sensor_info(const rs2_sensor*, rs2_camera_info, rs2_error**)</code><br>
	 * <i>native declaration : line 499</i><br>
	 * @deprecated use the safer method {@link #rs2_supports_sensor_info(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	int rs2_supports_sensor_info(Pointer sensor, int info, PointerByReference error);
	/**
	 * check if specific sensor info is supported<br>
	 * \param[in] info    the parameter to check for support<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return                true if the parameter both exist and well-defined for the specific device<br>
	 * Original signature : <code>int rs2_supports_sensor_info(const rs2_sensor*, rs2_camera_info, rs2_error**)</code><br>
	 * <i>native declaration : line 499</i>
	 */
	int rs2_supports_sensor_info(PointerByReference sensor, int info, PointerByReference error);
	/**
	 * Test if the given sensor can be extended to the requested extension<br>
	 * \param[in] sensor  Realsense sensor<br>
	 * \param[in] extension The extension to which the sensor should be tested if it is extendable<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return non-zero value iff the sensor can be extended to the given extension<br>
	 * Original signature : <code>int rs2_is_sensor_extendable_to(const rs2_sensor*, rs2_extension, rs2_error**)</code><br>
	 * <i>native declaration : line 508</i><br>
	 * @deprecated use the safer method {@link #rs2_is_sensor_extendable_to(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	int rs2_is_sensor_extendable_to(Pointer sensor, int extension, PointerByReference error);
	/**
	 * Test if the given sensor can be extended to the requested extension<br>
	 * \param[in] sensor  Realsense sensor<br>
	 * \param[in] extension The extension to which the sensor should be tested if it is extendable<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return non-zero value iff the sensor can be extended to the given extension<br>
	 * Original signature : <code>int rs2_is_sensor_extendable_to(const rs2_sensor*, rs2_extension, rs2_error**)</code><br>
	 * <i>native declaration : line 508</i>
	 */
	int rs2_is_sensor_extendable_to(PointerByReference sensor, int extension, PointerByReference error);
	/**
	 * When called on a depth sensor, this method will return the number of meters represented by a single depth unit<br>
	 * \param[in] sensor      depth sensor<br>
	 * \param[out] error      if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return                the number of meters represented by a single depth unit<br>
	 * Original signature : <code>float rs2_get_depth_scale(rs2_sensor*, rs2_error**)</code><br>
	 * <i>native declaration : line 515</i><br>
	 * @deprecated use the safer method {@link #rs2_get_depth_scale(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	float rs2_get_depth_scale(Pointer sensor, PointerByReference error);
	/**
	 * When called on a depth sensor, this method will return the number of meters represented by a single depth unit<br>
	 * \param[in] sensor      depth sensor<br>
	 * \param[out] error      if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return                the number of meters represented by a single depth unit<br>
	 * Original signature : <code>float rs2_get_depth_scale(rs2_sensor*, rs2_error**)</code><br>
	 * <i>native declaration : line 515</i>
	 */
	float rs2_get_depth_scale(PointerByReference sensor, PointerByReference error);
	/**
	 * Retrieve the stereoscopic baseline value from frame. Applicable to stereo-based depth modules<br>
	 * \param[out] float  Stereoscopic baseline in millimeters<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>float rs2_depth_stereo_frame_get_baseline(const rs2_frame*, rs2_error**)</code><br>
	 * <i>native declaration : line 522</i><br>
	 * @deprecated use the safer method {@link #rs2_depth_stereo_frame_get_baseline(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	float rs2_depth_stereo_frame_get_baseline(Pointer frame_ref, PointerByReference error);
	/**
	 * Retrieve the stereoscopic baseline value from frame. Applicable to stereo-based depth modules<br>
	 * \param[out] float  Stereoscopic baseline in millimeters<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>float rs2_depth_stereo_frame_get_baseline(const rs2_frame*, rs2_error**)</code><br>
	 * <i>native declaration : line 522</i>
	 */
	float rs2_depth_stereo_frame_get_baseline(PointerByReference frame_ref, PointerByReference error);
	/**
	 * Retrieve the stereoscopic baseline value from sensor. Applicable to stereo-based depth modules<br>
	 * \param[out] float  Stereoscopic baseline in millimeters<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>float rs2_get_stereo_baseline(rs2_sensor*, rs2_error**)</code><br>
	 * <i>native declaration : line 529</i><br>
	 * @deprecated use the safer method {@link #rs2_get_stereo_baseline(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	float rs2_get_stereo_baseline(Pointer sensor, PointerByReference error);
	/**
	 * Retrieve the stereoscopic baseline value from sensor. Applicable to stereo-based depth modules<br>
	 * \param[out] float  Stereoscopic baseline in millimeters<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>float rs2_get_stereo_baseline(rs2_sensor*, rs2_error**)</code><br>
	 * <i>native declaration : line 529</i>
	 */
	float rs2_get_stereo_baseline(PointerByReference sensor, PointerByReference error);
	/**
	 * \brief sets the active region of interest to be used by auto-exposure algorithm<br>
	 * \param[in] sensor     the RealSense sensor<br>
	 * \param[in] min_x      lower horizontal bound in pixels<br>
	 * \param[in] min_y      lower vertical bound in pixels<br>
	 * \param[in] max_x      upper horizontal bound in pixels<br>
	 * \param[in] max_y      upper vertical bound in pixels<br>
	 * \param[out] error     if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_set_region_of_interest(const rs2_sensor*, int, int, int, int, rs2_error**)</code><br>
	 * <i>native declaration : line 540</i><br>
	 * @deprecated use the safer method {@link #rs2_set_region_of_interest(com.sun.jna.ptr.PointerByReference, int, int, int, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_set_region_of_interest(Pointer sensor, int min_x, int min_y, int max_x, int max_y, PointerByReference error);
	/**
	 * \brief sets the active region of interest to be used by auto-exposure algorithm<br>
	 * \param[in] sensor     the RealSense sensor<br>
	 * \param[in] min_x      lower horizontal bound in pixels<br>
	 * \param[in] min_y      lower vertical bound in pixels<br>
	 * \param[in] max_x      upper horizontal bound in pixels<br>
	 * \param[in] max_y      upper vertical bound in pixels<br>
	 * \param[out] error     if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_set_region_of_interest(const rs2_sensor*, int, int, int, int, rs2_error**)</code><br>
	 * <i>native declaration : line 540</i>
	 */
	void rs2_set_region_of_interest(PointerByReference sensor, int min_x, int min_y, int max_x, int max_y, PointerByReference error);
	/**
	 * \brief gets the active region of interest to be used by auto-exposure algorithm<br>
	 * \param[in] sensor     the RealSense sensor<br>
	 * \param[out] min_x     lower horizontal bound in pixels<br>
	 * \param[out] min_y     lower vertical bound in pixels<br>
	 * \param[out] max_x     upper horizontal bound in pixels<br>
	 * \param[out] max_y     upper vertical bound in pixels<br>
	 * \param[out] error     if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_get_region_of_interest(const rs2_sensor*, int*, int*, int*, int*, rs2_error**)</code><br>
	 * <i>native declaration : line 551</i><br>
	 * @deprecated use the safer methods {@link #rs2_get_region_of_interest(com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #rs2_get_region_of_interest(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_get_region_of_interest(Pointer sensor, IntByReference min_x, IntByReference min_y, IntByReference max_x, IntByReference max_y, PointerByReference error);
	/**
	 * \brief gets the active region of interest to be used by auto-exposure algorithm<br>
	 * \param[in] sensor     the RealSense sensor<br>
	 * \param[out] min_x     lower horizontal bound in pixels<br>
	 * \param[out] min_y     lower vertical bound in pixels<br>
	 * \param[out] max_x     upper horizontal bound in pixels<br>
	 * \param[out] max_y     upper vertical bound in pixels<br>
	 * \param[out] error     if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_get_region_of_interest(const rs2_sensor*, int*, int*, int*, int*, rs2_error**)</code><br>
	 * <i>native declaration : line 551</i>
	 */
	void rs2_get_region_of_interest(PointerByReference sensor, IntBuffer min_x, IntBuffer min_y, IntBuffer max_x, IntBuffer max_y, PointerByReference error);
	/**
	 * \brief gets the active region of interest to be used by auto-exposure algorithm<br>
	 * \param[in] sensor     the RealSense sensor<br>
	 * \param[out] min_x     lower horizontal bound in pixels<br>
	 * \param[out] min_y     lower vertical bound in pixels<br>
	 * \param[out] max_x     upper horizontal bound in pixels<br>
	 * \param[out] max_y     upper vertical bound in pixels<br>
	 * \param[out] error     if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_get_region_of_interest(const rs2_sensor*, int*, int*, int*, int*, rs2_error**)</code><br>
	 * <i>native declaration : line 551</i>
	 */
	void rs2_get_region_of_interest(PointerByReference sensor, IntByReference min_x, IntByReference min_y, IntByReference max_x, IntByReference max_y, PointerByReference error);
	/**
	 * open subdevice for exclusive access, by committing to a configuration<br>
	 * \param[in] device relevant RealSense device<br>
	 * \param[in] profile    stream profile that defines single stream configuration<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_open(rs2_sensor*, const rs2_stream_profile*, rs2_error**)</code><br>
	 * <i>native declaration : line 559</i><br>
	 * @deprecated use the safer method {@link #rs2_open(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_open(Pointer device, Pointer profile, PointerByReference error);
	/**
	 * open subdevice for exclusive access, by committing to a configuration<br>
	 * \param[in] device relevant RealSense device<br>
	 * \param[in] profile    stream profile that defines single stream configuration<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_open(rs2_sensor*, const rs2_stream_profile*, rs2_error**)</code><br>
	 * <i>native declaration : line 559</i>
	 */
	void rs2_open(PointerByReference device, PointerByReference profile, PointerByReference error);
	/**
	 * open subdevice for exclusive access, by committing to composite configuration, specifying one or more stream profiles<br>
	 * this method should be used for interdependent  streams, such as depth and infrared, that have to be configured together<br>
	 * \param[in] device relevant RealSense device<br>
	 * \param[in] profiles  list of stream profiles discovered by get_stream_profiles<br>
	 * \param[in] count      number of simultaneous  stream profiles to configure<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_open_multiple(rs2_sensor*, const rs2_stream_profile**, int, rs2_error**)</code><br>
	 * <i>native declaration : line 569</i><br>
	 * @deprecated use the safer method {@link #rs2_open_multiple(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_open_multiple(Pointer device, PointerByReference profiles, int count, PointerByReference error);
	/**
	 * open subdevice for exclusive access, by committing to composite configuration, specifying one or more stream profiles<br>
	 * this method should be used for interdependent  streams, such as depth and infrared, that have to be configured together<br>
	 * \param[in] device relevant RealSense device<br>
	 * \param[in] profiles  list of stream profiles discovered by get_stream_profiles<br>
	 * \param[in] count      number of simultaneous  stream profiles to configure<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_open_multiple(rs2_sensor*, const rs2_stream_profile**, int, rs2_error**)</code><br>
	 * <i>native declaration : line 569</i>
	 */
	void rs2_open_multiple(PointerByReference device, PointerByReference profiles, int count, PointerByReference error);
	/**
	 * stop any streaming from specified subdevice<br>
	 * \param[in] sensor     RealSense device<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_close(const rs2_sensor*, rs2_error**)</code><br>
	 * <i>native declaration : line 576</i><br>
	 * @deprecated use the safer method {@link #rs2_close(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_close(Pointer sensor, PointerByReference error);
	/**
	 * stop any streaming from specified subdevice<br>
	 * \param[in] sensor     RealSense device<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_close(const rs2_sensor*, rs2_error**)</code><br>
	 * <i>native declaration : line 576</i>
	 */
	void rs2_close(PointerByReference sensor, PointerByReference error);
	/**
	 * start streaming from specified configured sensor<br>
	 * \param[in] sensor  RealSense device<br>
	 * \param[in] on_frame function pointer to register as per-frame callback<br>
	 * \param[in] user auxiliary  data the user wishes to receive together with every frame callback<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_start(const rs2_sensor*, rs2_frame_callback_ptr, void*, rs2_error**)</code><br>
	 * <i>native declaration : line 585</i><br>
	 * @deprecated use the safer method {@link #rs2_start(com.sun.jna.ptr.PointerByReference, realsense2.Realsense2Library.rs2_frame_callback_ptr, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_start(Pointer sensor, Realsense2Library.rs2_frame_callback_ptr on_frame, Pointer user, PointerByReference error);
	/**
	 * start streaming from specified configured sensor<br>
	 * \param[in] sensor  RealSense device<br>
	 * \param[in] on_frame function pointer to register as per-frame callback<br>
	 * \param[in] user auxiliary  data the user wishes to receive together with every frame callback<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_start(const rs2_sensor*, rs2_frame_callback_ptr, void*, rs2_error**)</code><br>
	 * <i>native declaration : line 585</i>
	 */
	void rs2_start(PointerByReference sensor, Realsense2Library.rs2_frame_callback_ptr on_frame, Pointer user, PointerByReference error);
	/**
	 * start streaming from specified configured sensor<br>
	 * \param[in] sensor  RealSense device<br>
	 * \param[in] callback callback object created from c++ application. ownership over the callback object is moved into the relevant streaming lock<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_start_cpp(const rs2_sensor*, rs2_frame_callback*, rs2_error**)</code><br>
	 * <i>native declaration : line 593</i><br>
	 * @deprecated use the safer method {@link #rs2_start_cpp(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_start_cpp(Pointer sensor, Pointer callback, PointerByReference error);
	/**
	 * start streaming from specified configured sensor<br>
	 * \param[in] sensor  RealSense device<br>
	 * \param[in] callback callback object created from c++ application. ownership over the callback object is moved into the relevant streaming lock<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_start_cpp(const rs2_sensor*, rs2_frame_callback*, rs2_error**)</code><br>
	 * <i>native declaration : line 593</i>
	 */
	void rs2_start_cpp(PointerByReference sensor, PointerByReference callback, PointerByReference error);
	/**
	 * start streaming from specified configured sensor of specific stream to frame queue<br>
	 * \param[in] sensor  RealSense Sensor<br>
	 * \param[in] queue   frame-queue to store new frames into<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_start_queue(const rs2_sensor*, rs2_frame_queue*, rs2_error**)</code><br>
	 * <i>native declaration : line 601</i><br>
	 * @deprecated use the safer method {@link #rs2_start_queue(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_start_queue(Pointer sensor, Pointer queue, PointerByReference error);
	/**
	 * start streaming from specified configured sensor of specific stream to frame queue<br>
	 * \param[in] sensor  RealSense Sensor<br>
	 * \param[in] queue   frame-queue to store new frames into<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_start_queue(const rs2_sensor*, rs2_frame_queue*, rs2_error**)</code><br>
	 * <i>native declaration : line 601</i>
	 */
	void rs2_start_queue(PointerByReference sensor, PointerByReference queue, PointerByReference error);
	/**
	 * stops streaming from specified configured device<br>
	 * \param[in] sensor  RealSense sensor<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_stop(const rs2_sensor*, rs2_error**)</code><br>
	 * <i>native declaration : line 608</i><br>
	 * @deprecated use the safer method {@link #rs2_stop(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_stop(Pointer sensor, PointerByReference error);
	/**
	 * stops streaming from specified configured device<br>
	 * \param[in] sensor  RealSense sensor<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_stop(const rs2_sensor*, rs2_error**)</code><br>
	 * <i>native declaration : line 608</i>
	 */
	void rs2_stop(PointerByReference sensor, PointerByReference error);
	/**
	 * set callback to get notifications from specified sensor<br>
	 * \param[in] sensor          RealSense device<br>
	 * \param[in] on_notification function pointer to register as per-notifications callback<br>
	 * \param[out] error          if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_set_notifications_callback(const rs2_sensor*, rs2_notification_callback_ptr, void*, rs2_error**)</code><br>
	 * <i>native declaration : line 616</i><br>
	 * @deprecated use the safer method {@link #rs2_set_notifications_callback(com.sun.jna.ptr.PointerByReference, realsense2.Realsense2Library.rs2_notification_callback_ptr, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_set_notifications_callback(Pointer sensor, Realsense2Library.rs2_notification_callback_ptr on_notification, Pointer user, PointerByReference error);
	/**
	 * set callback to get notifications from specified sensor<br>
	 * \param[in] sensor          RealSense device<br>
	 * \param[in] on_notification function pointer to register as per-notifications callback<br>
	 * \param[out] error          if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_set_notifications_callback(const rs2_sensor*, rs2_notification_callback_ptr, void*, rs2_error**)</code><br>
	 * <i>native declaration : line 616</i>
	 */
	void rs2_set_notifications_callback(PointerByReference sensor, Realsense2Library.rs2_notification_callback_ptr on_notification, Pointer user, PointerByReference error);
	/**
	 * set callback to get notifications from specified device<br>
	 * \param[in] sensor  RealSense sensor<br>
	 * \param[in] callback callback object created from c++ application. ownership over the callback object is moved into the relevant subdevice lock<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_set_notifications_callback_cpp(const rs2_sensor*, rs2_notifications_callback*, rs2_error**)</code><br>
	 * <i>native declaration : line 624</i><br>
	 * @deprecated use the safer method {@link #rs2_set_notifications_callback_cpp(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_set_notifications_callback_cpp(Pointer sensor, Pointer callback, PointerByReference error);
	/**
	 * set callback to get notifications from specified device<br>
	 * \param[in] sensor  RealSense sensor<br>
	 * \param[in] callback callback object created from c++ application. ownership over the callback object is moved into the relevant subdevice lock<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_set_notifications_callback_cpp(const rs2_sensor*, rs2_notifications_callback*, rs2_error**)</code><br>
	 * <i>native declaration : line 624</i>
	 */
	void rs2_set_notifications_callback_cpp(PointerByReference sensor, PointerByReference callback, PointerByReference error);
	/**
	 * retrieve description from notification handle<br>
	 * \param[in] notification      handle returned from a callback<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return            the notification description<br>
	 * Original signature : <code>char* rs2_get_notification_description(rs2_notification*, rs2_error**)</code><br>
	 * <i>native declaration : line 632</i><br>
	 * @deprecated use the safer method {@link #rs2_get_notification_description(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	Pointer rs2_get_notification_description(Pointer notification, PointerByReference error);
	/**
	 * retrieve description from notification handle<br>
	 * \param[in] notification      handle returned from a callback<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return            the notification description<br>
	 * Original signature : <code>char* rs2_get_notification_description(rs2_notification*, rs2_error**)</code><br>
	 * <i>native declaration : line 632</i>
	 */
	Pointer rs2_get_notification_description(PointerByReference notification, PointerByReference error);
	/**
	 * retrieve timestamp from notification handle<br>
	 * \param[in] notification      handle returned from a callback<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return            the notification timestamp<br>
	 * Original signature : <code>rs2_time_t rs2_get_notification_timestamp(rs2_notification*, rs2_error**)</code><br>
	 * <i>native declaration : line 640</i><br>
	 * @deprecated use the safer method {@link #rs2_get_notification_timestamp(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	double rs2_get_notification_timestamp(Pointer notification, PointerByReference error);
	/**
	 * retrieve timestamp from notification handle<br>
	 * \param[in] notification      handle returned from a callback<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return            the notification timestamp<br>
	 * Original signature : <code>rs2_time_t rs2_get_notification_timestamp(rs2_notification*, rs2_error**)</code><br>
	 * <i>native declaration : line 640</i>
	 */
	double rs2_get_notification_timestamp(PointerByReference notification, PointerByReference error);
	/**
	 * retrieve severity from notification handle<br>
	 * \param[in] notification      handle returned from a callback<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return            the notification severity<br>
	 * Original signature : <code>rs2_log_severity rs2_get_notification_severity(rs2_notification*, rs2_error**)</code><br>
	 * <i>native declaration : line 648</i><br>
	 * @deprecated use the safer method {@link #rs2_get_notification_severity(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	int rs2_get_notification_severity(Pointer notification, PointerByReference error);
	/**
	 * retrieve severity from notification handle<br>
	 * \param[in] notification      handle returned from a callback<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return            the notification severity<br>
	 * Original signature : <code>rs2_log_severity rs2_get_notification_severity(rs2_notification*, rs2_error**)</code><br>
	 * <i>native declaration : line 648</i>
	 */
	int rs2_get_notification_severity(PointerByReference notification, PointerByReference error);
	/**
	 * retrieve category from notification handle<br>
	 * \param[in] notification      handle returned from a callback<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return            the notification category<br>
	 * Original signature : <code>rs2_notification_category rs2_get_notification_category(rs2_notification*, rs2_error**)</code><br>
	 * <i>native declaration : line 656</i><br>
	 * @deprecated use the safer method {@link #rs2_get_notification_category(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	int rs2_get_notification_category(Pointer notification, PointerByReference error);
	/**
	 * retrieve category from notification handle<br>
	 * \param[in] notification      handle returned from a callback<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return            the notification category<br>
	 * Original signature : <code>rs2_notification_category rs2_get_notification_category(rs2_notification*, rs2_error**)</code><br>
	 * <i>native declaration : line 656</i>
	 */
	int rs2_get_notification_category(PointerByReference notification, PointerByReference error);
	/**
	 * retrieve serialized data from notification handle<br>
	 * \param[in] notification      handle returned from a callback<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return            the serialized data (in JSON format)<br>
	 * Original signature : <code>char* rs2_get_notification_serialized_data(rs2_notification*, rs2_error**)</code><br>
	 * <i>native declaration : line 664</i><br>
	 * @deprecated use the safer method {@link #rs2_get_notification_serialized_data(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	Pointer rs2_get_notification_serialized_data(Pointer notification, PointerByReference error);
	/**
	 * retrieve serialized data from notification handle<br>
	 * \param[in] notification      handle returned from a callback<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return            the serialized data (in JSON format)<br>
	 * Original signature : <code>char* rs2_get_notification_serialized_data(rs2_notification*, rs2_error**)</code><br>
	 * <i>native declaration : line 664</i>
	 */
	Pointer rs2_get_notification_serialized_data(PointerByReference notification, PointerByReference error);
	/**
	 * check if physical subdevice is supported<br>
	 * \param[in] device  input RealSense device<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return            list of stream profiles that given subdevice can provide, should be released by rs2_delete_profiles_list<br>
	 * Original signature : <code>rs2_stream_profile_list* rs2_get_stream_profiles(rs2_sensor*, rs2_error**)</code><br>
	 * <i>native declaration : line 672</i><br>
	 * @deprecated use the safer method {@link #rs2_get_stream_profiles(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	PointerByReference rs2_get_stream_profiles(Pointer device, PointerByReference error);
	/**
	 * check if physical subdevice is supported<br>
	 * \param[in] device  input RealSense device<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return            list of stream profiles that given subdevice can provide, should be released by rs2_delete_profiles_list<br>
	 * Original signature : <code>rs2_stream_profile_list* rs2_get_stream_profiles(rs2_sensor*, rs2_error**)</code><br>
	 * <i>native declaration : line 672</i>
	 */
	PointerByReference rs2_get_stream_profiles(PointerByReference device, PointerByReference error);
	/**
	 * Get pointer to specific stream profile<br>
	 * \param[in] list        the list of supported profiles returned by rs2_get_supported_profiles<br>
	 * \param[in] index       the zero based index of the streaming mode<br>
	 * \param[out] error      if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>rs2_stream_profile* rs2_get_stream_profile(const rs2_stream_profile_list*, int, rs2_error**)</code><br>
	 * <i>native declaration : line 680</i><br>
	 * @deprecated use the safer method {@link #rs2_get_stream_profile(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	PointerByReference rs2_get_stream_profile(Pointer list, int index, PointerByReference error);
	/**
	 * Get pointer to specific stream profile<br>
	 * \param[in] list        the list of supported profiles returned by rs2_get_supported_profiles<br>
	 * \param[in] index       the zero based index of the streaming mode<br>
	 * \param[out] error      if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>rs2_stream_profile* rs2_get_stream_profile(const rs2_stream_profile_list*, int, rs2_error**)</code><br>
	 * <i>native declaration : line 680</i>
	 */
	PointerByReference rs2_get_stream_profile(PointerByReference list, int index, PointerByReference error);
	/**
	 * Extract common parameters of a stream profiles<br>
	 * \param[in] mode        input stream profile<br>
	 * \param[out] stream     stream type of the input profile<br>
	 * \param[out] format     binary data format of the input profile<br>
	 * \param[out] index      stream index the input profile in case there are multiple streams of the same type<br>
	 * \param[out] unique_id  identifier for the stream profile, unique within the application<br>
	 * \param[out] framerate  expected rate for data frames to arrive, meaning expected number of frames per second<br>
	 * \param[out] error      if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_get_stream_profile_data(const rs2_stream_profile*, rs2_stream*, rs2_format*, int*, int*, int*, rs2_error**)</code><br>
	 * <i>native declaration : line 692</i><br>
	 * @deprecated use the safer methods {@link #rs2_get_stream_profile_data(com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, java.nio.IntBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #rs2_get_stream_profile_data(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_get_stream_profile_data(Pointer mode, IntByReference stream, IntByReference format, IntByReference index, IntByReference unique_id, IntByReference framerate, PointerByReference error);
	/**
	 * Extract common parameters of a stream profiles<br>
	 * \param[in] mode        input stream profile<br>
	 * \param[out] stream     stream type of the input profile<br>
	 * \param[out] format     binary data format of the input profile<br>
	 * \param[out] index      stream index the input profile in case there are multiple streams of the same type<br>
	 * \param[out] unique_id  identifier for the stream profile, unique within the application<br>
	 * \param[out] framerate  expected rate for data frames to arrive, meaning expected number of frames per second<br>
	 * \param[out] error      if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_get_stream_profile_data(const rs2_stream_profile*, rs2_stream*, rs2_format*, int*, int*, int*, rs2_error**)</code><br>
	 * <i>native declaration : line 692</i>
	 */
	void rs2_get_stream_profile_data(PointerByReference mode, IntBuffer stream, IntBuffer format, IntBuffer index, IntBuffer unique_id, IntBuffer framerate, PointerByReference error);
	/**
	 * Extract common parameters of a stream profiles<br>
	 * \param[in] mode        input stream profile<br>
	 * \param[out] stream     stream type of the input profile<br>
	 * \param[out] format     binary data format of the input profile<br>
	 * \param[out] index      stream index the input profile in case there are multiple streams of the same type<br>
	 * \param[out] unique_id  identifier for the stream profile, unique within the application<br>
	 * \param[out] framerate  expected rate for data frames to arrive, meaning expected number of frames per second<br>
	 * \param[out] error      if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_get_stream_profile_data(const rs2_stream_profile*, rs2_stream*, rs2_format*, int*, int*, int*, rs2_error**)</code><br>
	 * <i>native declaration : line 692</i>
	 */
	void rs2_get_stream_profile_data(PointerByReference mode, IntByReference stream, IntByReference format, IntByReference index, IntByReference unique_id, IntByReference framerate, PointerByReference error);
	/**
	 * Override some of the parameters of the stream profile<br>
	 * \param[in] mode        input stream profile<br>
	 * \param[in] stream      stream type for the profile<br>
	 * \param[in] format      binary data format of the profile<br>
	 * \param[in] index       stream index the profile in case there are multiple streams of the same type<br>
	 * \param[out] error      if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_set_stream_profile_data(rs2_stream_profile*, rs2_stream, int, rs2_format, rs2_error**)</code><br>
	 * <i>native declaration : line 702</i><br>
	 * @deprecated use the safer method {@link #rs2_set_stream_profile_data(com.sun.jna.ptr.PointerByReference, int, int, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_set_stream_profile_data(Pointer mode, int stream, int index, int format, PointerByReference error);
	/**
	 * Override some of the parameters of the stream profile<br>
	 * \param[in] mode        input stream profile<br>
	 * \param[in] stream      stream type for the profile<br>
	 * \param[in] format      binary data format of the profile<br>
	 * \param[in] index       stream index the profile in case there are multiple streams of the same type<br>
	 * \param[out] error      if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_set_stream_profile_data(rs2_stream_profile*, rs2_stream, int, rs2_format, rs2_error**)</code><br>
	 * <i>native declaration : line 702</i>
	 */
	void rs2_set_stream_profile_data(PointerByReference mode, int stream, int index, int format, PointerByReference error);
	/**
	 * Creates a copy of stream profile, assigning new values to some of the fields<br>
	 * \param[in] mode        input stream profile<br>
	 * \param[in] stream      stream type for the profile<br>
	 * \param[in] format      binary data format of the profile<br>
	 * \param[in] index       stream index the profile in case there are multiple streams of the same type<br>
	 * \param[out] error      if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return                new stream profile, must be deleted by rs2_delete_stream_profile<br>
	 * Original signature : <code>rs2_stream_profile* rs2_clone_stream_profile(const rs2_stream_profile*, rs2_stream, int, rs2_format, rs2_error**)</code><br>
	 * <i>native declaration : line 713</i><br>
	 * @deprecated use the safer method {@link #rs2_clone_stream_profile(com.sun.jna.ptr.PointerByReference, int, int, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	PointerByReference rs2_clone_stream_profile(Pointer mode, int stream, int index, int format, PointerByReference error);
	/**
	 * Creates a copy of stream profile, assigning new values to some of the fields<br>
	 * \param[in] mode        input stream profile<br>
	 * \param[in] stream      stream type for the profile<br>
	 * \param[in] format      binary data format of the profile<br>
	 * \param[in] index       stream index the profile in case there are multiple streams of the same type<br>
	 * \param[out] error      if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return                new stream profile, must be deleted by rs2_delete_stream_profile<br>
	 * Original signature : <code>rs2_stream_profile* rs2_clone_stream_profile(const rs2_stream_profile*, rs2_stream, int, rs2_format, rs2_error**)</code><br>
	 * <i>native declaration : line 713</i>
	 */
	PointerByReference rs2_clone_stream_profile(PointerByReference mode, int stream, int index, int format, PointerByReference error);
	/**
	 * Creates a copy of stream profile, assigning new values to some of the fields<br>
	 * \param[in] mode        input stream profile<br>
	 * \param[in] stream      stream type for the profile<br>
	 * \param[in] format      binary data format of the profile<br>
	 * \param[in] width       new width for the profile<br>
	 * \param[in] height      new height for the profile<br>
	 * \param[in] intr        new intrinsics for the profile<br>
	 * \param[in] index       stream index the profile in case there are multiple streams of the same type<br>
	 * \param[out] error      if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return                new stream profile, must be deleted by rs2_delete_stream_profile<br>
	 * Original signature : <code>rs2_stream_profile* rs2_clone_video_stream_profile(const rs2_stream_profile*, rs2_stream, int, rs2_format, int, int, const rs2_intrinsics*, rs2_error**)</code><br>
	 * <i>native declaration : line 727</i><br>
	 * @deprecated use the safer method {@link #rs2_clone_video_stream_profile(com.sun.jna.ptr.PointerByReference, int, int, int, int, int, realsense2.Realsense2Library.rs2_intrinsics, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	PointerByReference rs2_clone_video_stream_profile(Pointer mode, int stream, int index, int format, int width, int height, Realsense2Library.rs2_intrinsics intr, PointerByReference error);
	/**
	 * Creates a copy of stream profile, assigning new values to some of the fields<br>
	 * \param[in] mode        input stream profile<br>
	 * \param[in] stream      stream type for the profile<br>
	 * \param[in] format      binary data format of the profile<br>
	 * \param[in] width       new width for the profile<br>
	 * \param[in] height      new height for the profile<br>
	 * \param[in] intr        new intrinsics for the profile<br>
	 * \param[in] index       stream index the profile in case there are multiple streams of the same type<br>
	 * \param[out] error      if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return                new stream profile, must be deleted by rs2_delete_stream_profile<br>
	 * Original signature : <code>rs2_stream_profile* rs2_clone_video_stream_profile(const rs2_stream_profile*, rs2_stream, int, rs2_format, int, int, const rs2_intrinsics*, rs2_error**)</code><br>
	 * <i>native declaration : line 727</i>
	 */
	PointerByReference rs2_clone_video_stream_profile(PointerByReference mode, int stream, int index, int format, int width, int height, Realsense2Library.rs2_intrinsics intr, PointerByReference error);
	/**
	 * Delete stream profile allocated by rs2_clone_stream_profile<br>
	 * Should not be called on stream profiles returned by the device<br>
	 * \param[in] mode        input stream profile<br>
	 * Original signature : <code>void rs2_delete_stream_profile(rs2_stream_profile*)</code><br>
	 * <i>native declaration : line 735</i><br>
	 * @deprecated use the safer method {@link #rs2_delete_stream_profile(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_delete_stream_profile(Pointer mode);
	/**
	 * Delete stream profile allocated by rs2_clone_stream_profile<br>
	 * Should not be called on stream profiles returned by the device<br>
	 * \param[in] mode        input stream profile<br>
	 * Original signature : <code>void rs2_delete_stream_profile(rs2_stream_profile*)</code><br>
	 * <i>native declaration : line 735</i>
	 */
	void rs2_delete_stream_profile(PointerByReference mode);
	/**
	 * Try to extend stream profile to an extension type<br>
	 * \param[in] mode        input stream profile<br>
	 * \param[in] type        extension type, for example RS2_EXTENSION_VIDEO_STREAM_PROFILE<br>
	 * \param[out] error      if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return                non-zero if profile is extendable to specified extension, zero otherwise<br>
	 * Original signature : <code>int rs2_stream_profile_is(const rs2_stream_profile*, rs2_extension, rs2_error**)</code><br>
	 * <i>native declaration : line 744</i><br>
	 * @deprecated use the safer method {@link #rs2_stream_profile_is(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	int rs2_stream_profile_is(Pointer mode, int type, PointerByReference error);
	/**
	 * Try to extend stream profile to an extension type<br>
	 * \param[in] mode        input stream profile<br>
	 * \param[in] type        extension type, for example RS2_EXTENSION_VIDEO_STREAM_PROFILE<br>
	 * \param[out] error      if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return                non-zero if profile is extendable to specified extension, zero otherwise<br>
	 * Original signature : <code>int rs2_stream_profile_is(const rs2_stream_profile*, rs2_extension, rs2_error**)</code><br>
	 * <i>native declaration : line 744</i>
	 */
	int rs2_stream_profile_is(PointerByReference mode, int type, PointerByReference error);
	/**
	 * When called on a video stream profile, will return the width and the height of the stream<br>
	 * \param[in] mode        input stream profile<br>
	 * \param[out] width      width in pixels of the video stream<br>
	 * \param[out] height     height in pixels of the video stream<br>
	 * \param[out] error      if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_get_video_stream_resolution(const rs2_stream_profile*, int*, int*, rs2_error**)</code><br>
	 * <i>native declaration : line 753</i><br>
	 * @deprecated use the safer methods {@link #rs2_get_video_stream_resolution(com.sun.jna.ptr.PointerByReference, java.nio.IntBuffer, java.nio.IntBuffer, com.sun.jna.ptr.PointerByReference)} and {@link #rs2_get_video_stream_resolution(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.IntByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_get_video_stream_resolution(Pointer mode, IntByReference width, IntByReference height, PointerByReference error);
	/**
	 * When called on a video stream profile, will return the width and the height of the stream<br>
	 * \param[in] mode        input stream profile<br>
	 * \param[out] width      width in pixels of the video stream<br>
	 * \param[out] height     height in pixels of the video stream<br>
	 * \param[out] error      if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_get_video_stream_resolution(const rs2_stream_profile*, int*, int*, rs2_error**)</code><br>
	 * <i>native declaration : line 753</i>
	 */
	void rs2_get_video_stream_resolution(PointerByReference mode, IntBuffer width, IntBuffer height, PointerByReference error);
	/**
	 * When called on a video stream profile, will return the width and the height of the stream<br>
	 * \param[in] mode        input stream profile<br>
	 * \param[out] width      width in pixels of the video stream<br>
	 * \param[out] height     height in pixels of the video stream<br>
	 * \param[out] error      if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_get_video_stream_resolution(const rs2_stream_profile*, int*, int*, rs2_error**)</code><br>
	 * <i>native declaration : line 753</i>
	 */
	void rs2_get_video_stream_resolution(PointerByReference mode, IntByReference width, IntByReference height, PointerByReference error);
	/**
	 * Obtain the intrinsics of a specific stream configuration from the device.<br>
	 * \param[in] mode          input stream profile<br>
	 * \param[out] intrinsics   Pointer to the struct to store the data in<br>
	 * \param[out] error        If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_get_motion_intrinsics(const rs2_stream_profile*, rs2_motion_device_intrinsic*, rs2_error**)</code><br>
	 * <i>native declaration : line 761</i><br>
	 * @deprecated use the safer method {@link #rs2_get_motion_intrinsics(com.sun.jna.ptr.PointerByReference, realsense2.Realsense2Library.rs2_motion_device_intrinsic, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_get_motion_intrinsics(Pointer mode, Realsense2Library.rs2_motion_device_intrinsic intrinsics, PointerByReference error);
	/**
	 * Obtain the intrinsics of a specific stream configuration from the device.<br>
	 * \param[in] mode          input stream profile<br>
	 * \param[out] intrinsics   Pointer to the struct to store the data in<br>
	 * \param[out] error        If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_get_motion_intrinsics(const rs2_stream_profile*, rs2_motion_device_intrinsic*, rs2_error**)</code><br>
	 * <i>native declaration : line 761</i>
	 */
	void rs2_get_motion_intrinsics(PointerByReference mode, Realsense2Library.rs2_motion_device_intrinsic intrinsics, PointerByReference error);
	/**
	 * Returns non-zero if selected profile is recommended for the sensor<br>
	 * This is an optional hint we offer to suggest profiles with best performance-quality tradeof<br>
	 * \param[in] mode        input stream profile<br>
	 * \param[out] error      if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return                non-zero if selected profile is recommended for the sensor<br>
	 * Original signature : <code>int rs2_is_stream_profile_default(const rs2_stream_profile*, rs2_error**)</code><br>
	 * <i>native declaration : line 770</i><br>
	 * @deprecated use the safer method {@link #rs2_is_stream_profile_default(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	int rs2_is_stream_profile_default(Pointer mode, PointerByReference error);
	/**
	 * Returns non-zero if selected profile is recommended for the sensor<br>
	 * This is an optional hint we offer to suggest profiles with best performance-quality tradeof<br>
	 * \param[in] mode        input stream profile<br>
	 * \param[out] error      if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return                non-zero if selected profile is recommended for the sensor<br>
	 * Original signature : <code>int rs2_is_stream_profile_default(const rs2_stream_profile*, rs2_error**)</code><br>
	 * <i>native declaration : line 770</i>
	 */
	int rs2_is_stream_profile_default(PointerByReference mode, PointerByReference error);
	/**
	 * get the number of supported stream profiles<br>
	 * \param[in] list        the list of supported profiles returned by rs2_get_supported_profiles<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return number of supported subdevice profiles<br>
	 * Original signature : <code>int rs2_get_stream_profiles_count(const rs2_stream_profile_list*, rs2_error**)</code><br>
	 * <i>native declaration : line 778</i><br>
	 * @deprecated use the safer method {@link #rs2_get_stream_profiles_count(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	int rs2_get_stream_profiles_count(Pointer list, PointerByReference error);
	/**
	 * get the number of supported stream profiles<br>
	 * \param[in] list        the list of supported profiles returned by rs2_get_supported_profiles<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return number of supported subdevice profiles<br>
	 * Original signature : <code>int rs2_get_stream_profiles_count(const rs2_stream_profile_list*, rs2_error**)</code><br>
	 * <i>native declaration : line 778</i>
	 */
	int rs2_get_stream_profiles_count(PointerByReference list, PointerByReference error);
	/**
	 * delete stream profiles list<br>
	 * \param[in] list        the list of supported profiles returned by rs2_get_supported_profiles<br>
	 * Original signature : <code>void rs2_delete_stream_profiles_list(rs2_stream_profile_list*)</code><br>
	 * <i>native declaration : line 784</i><br>
	 * @deprecated use the safer method {@link #rs2_delete_stream_profiles_list(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_delete_stream_profiles_list(Pointer list);
	/**
	 * delete stream profiles list<br>
	 * \param[in] list        the list of supported profiles returned by rs2_get_supported_profiles<br>
	 * Original signature : <code>void rs2_delete_stream_profiles_list(rs2_stream_profile_list*)</code><br>
	 * <i>native declaration : line 784</i>
	 */
	void rs2_delete_stream_profiles_list(PointerByReference list);
	/**
	 * \param[in] from          origin stream profile<br>
	 * \param[in] to            target stream profile<br>
	 * \param[out] extrin       extrinsics from origin to target<br>
	 * \param[out] error        if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_get_extrinsics(const rs2_stream_profile*, const rs2_stream_profile*, rs2_extrinsics*, rs2_error**)</code><br>
	 * <i>native declaration : line 792</i><br>
	 * @deprecated use the safer method {@link #rs2_get_extrinsics(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, realsense2.Realsense2Library.rs2_extrinsics, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_get_extrinsics(Pointer from, Pointer to, Realsense2Library.rs2_extrinsics extrin, PointerByReference error);
	/**
	 * \param[in] from          origin stream profile<br>
	 * \param[in] to            target stream profile<br>
	 * \param[out] extrin       extrinsics from origin to target<br>
	 * \param[out] error        if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_get_extrinsics(const rs2_stream_profile*, const rs2_stream_profile*, rs2_extrinsics*, rs2_error**)</code><br>
	 * <i>native declaration : line 792</i>
	 */
	void rs2_get_extrinsics(PointerByReference from, PointerByReference to, Realsense2Library.rs2_extrinsics extrin, PointerByReference error);
	/**
	 * \param[in] from          origin stream profile<br>
	 * \param[in] to            target stream profile<br>
	 * \param[out] extrin       extrinsics from origin to target<br>
	 * \param[out] error        if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_register_extrinsics(const rs2_stream_profile*, const rs2_stream_profile*, rs2_extrinsics, rs2_error**)</code><br>
	 * <i>native declaration : line 802</i><br>
	 * @deprecated use the safer method {@link #rs2_register_extrinsics(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, realsense2.Realsense2Library.rs2_extrinsics.ByValue, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_register_extrinsics(Pointer from, Pointer to, Realsense2Library.rs2_extrinsics.ByValue extrin, PointerByReference error);
	/**
	 * \param[in] from          origin stream profile<br>
	 * \param[in] to            target stream profile<br>
	 * \param[out] extrin       extrinsics from origin to target<br>
	 * \param[out] error        if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_register_extrinsics(const rs2_stream_profile*, const rs2_stream_profile*, rs2_extrinsics, rs2_error**)</code><br>
	 * <i>native declaration : line 802</i>
	 */
	void rs2_register_extrinsics(PointerByReference from, PointerByReference to, Realsense2Library.rs2_extrinsics.ByValue extrin, PointerByReference error);
	/**
	 * When called on a video profile, returns the intrinsics of specific stream configuration<br>
	 * \param[in] mode          input stream profile<br>
	 * \param[out] intrinsics   resulting intrinsics for the video profile<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_get_video_stream_intrinsics(const rs2_stream_profile*, rs2_intrinsics*, rs2_error**)</code><br>
	 * <i>native declaration : line 812</i><br>
	 * @deprecated use the safer method {@link #rs2_get_video_stream_intrinsics(com.sun.jna.ptr.PointerByReference, realsense2.Realsense2Library.rs2_intrinsics, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_get_video_stream_intrinsics(Pointer mode, Realsense2Library.rs2_intrinsics intrinsics, PointerByReference error);
	/**
	 * When called on a video profile, returns the intrinsics of specific stream configuration<br>
	 * \param[in] mode          input stream profile<br>
	 * \param[out] intrinsics   resulting intrinsics for the video profile<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_get_video_stream_intrinsics(const rs2_stream_profile*, rs2_intrinsics*, rs2_error**)</code><br>
	 * <i>native declaration : line 812</i>
	 */
	void rs2_get_video_stream_intrinsics(PointerByReference mode, Realsense2Library.rs2_intrinsics intrinsics, PointerByReference error);
	/**
	 * Returns the list of recommended processing blocks for a specific sensor. <br>
	 * Order and configuration of the blocks are decided by the sensor<br>
	 * \param[in] sensor          input sensor<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return list of supported sensor recommended processing blocks<br>
	 * Original signature : <code>rs2_processing_block_list* rs2_get_recommended_processing_blocks(rs2_sensor*, rs2_error**)</code><br>
	 * <i>native declaration : line 821</i><br>
	 * @deprecated use the safer method {@link #rs2_get_recommended_processing_blocks(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	PointerByReference rs2_get_recommended_processing_blocks(Pointer sensor, PointerByReference error);
	/**
	 * Returns the list of recommended processing blocks for a specific sensor. <br>
	 * Order and configuration of the blocks are decided by the sensor<br>
	 * \param[in] sensor          input sensor<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return list of supported sensor recommended processing blocks<br>
	 * Original signature : <code>rs2_processing_block_list* rs2_get_recommended_processing_blocks(rs2_sensor*, rs2_error**)</code><br>
	 * <i>native declaration : line 821</i>
	 */
	PointerByReference rs2_get_recommended_processing_blocks(PointerByReference sensor, PointerByReference error);
	/**
	 * Returns specific processing blocks from processing blocks list<br>
	 * \param[in] list           the processing blocks list<br>
	 * \param[in] index          the requested processing block<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return processing block<br>
	 * Original signature : <code>rs2_processing_block* rs2_get_processing_block(const rs2_processing_block_list*, int, rs2_error**)</code><br>
	 * <i>native declaration : line 830</i><br>
	 * @deprecated use the safer method {@link #rs2_get_processing_block(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	PointerByReference rs2_get_processing_block(Pointer list, int index, PointerByReference error);
	/**
	 * Returns specific processing blocks from processing blocks list<br>
	 * \param[in] list           the processing blocks list<br>
	 * \param[in] index          the requested processing block<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return processing block<br>
	 * Original signature : <code>rs2_processing_block* rs2_get_processing_block(const rs2_processing_block_list*, int, rs2_error**)</code><br>
	 * <i>native declaration : line 830</i>
	 */
	PointerByReference rs2_get_processing_block(PointerByReference list, int index, PointerByReference error);
	/**
	 * Returns the processing blocks list size<br>
	 * \param[in] list           the processing blocks list<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return the processing block list size<br>
	 * Original signature : <code>int rs2_get_recommended_processing_blocks_count(const rs2_processing_block_list*, rs2_error**)</code><br>
	 * <i>native declaration : line 838</i><br>
	 * @deprecated use the safer method {@link #rs2_get_recommended_processing_blocks_count(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	int rs2_get_recommended_processing_blocks_count(Pointer list, PointerByReference error);
	/**
	 * Returns the processing blocks list size<br>
	 * \param[in] list           the processing blocks list<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return the processing block list size<br>
	 * Original signature : <code>int rs2_get_recommended_processing_blocks_count(const rs2_processing_block_list*, rs2_error**)</code><br>
	 * <i>native declaration : line 838</i>
	 */
	int rs2_get_recommended_processing_blocks_count(PointerByReference list, PointerByReference error);
	/**
	 * Deletes processing blocks list<br>
	 * \param[in] list list to delete<br>
	 * Original signature : <code>void rs2_delete_recommended_processing_blocks(rs2_processing_block_list*)</code><br>
	 * <i>native declaration : line 844</i><br>
	 * @deprecated use the safer method {@link #rs2_delete_recommended_processing_blocks(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_delete_recommended_processing_blocks(Pointer list);
	/**
	 * Deletes processing blocks list<br>
	 * \param[in] list list to delete<br>
	 * Original signature : <code>void rs2_delete_recommended_processing_blocks(rs2_processing_block_list*)</code><br>
	 * <i>native declaration : line 844</i>
	 */
	void rs2_delete_recommended_processing_blocks(PointerByReference list);
	/**
	 * Imports a localization map from file to tm2 tracking device<br>
	 * \param[in]  sensor        TM2 position-tracking sensor<br>
	 * \param[in]  lmap_blob     Localization map raw buffer, serialized<br>
	 * \param[in]  blob_size     The buffer's size in bytes<br>
	 * \param[out] error         If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return                   Non-zero if succeeded, otherwise 0<br>
	 * Original signature : <code>int rs2_import_localization_map(const rs2_sensor*, const unsigned char*, unsigned int, rs2_error**)</code><br>
	 * <i>native declaration : line 854</i><br>
	 * @deprecated use the safer methods {@link #rs2_import_localization_map(com.sun.jna.ptr.PointerByReference, byte[], int, com.sun.jna.ptr.PointerByReference)} and {@link #rs2_import_localization_map(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	int rs2_import_localization_map(Pointer sensor, Pointer lmap_blob, int blob_size, PointerByReference error);
	/**
	 * Imports a localization map from file to tm2 tracking device<br>
	 * \param[in]  sensor        TM2 position-tracking sensor<br>
	 * \param[in]  lmap_blob     Localization map raw buffer, serialized<br>
	 * \param[in]  blob_size     The buffer's size in bytes<br>
	 * \param[out] error         If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return                   Non-zero if succeeded, otherwise 0<br>
	 * Original signature : <code>int rs2_import_localization_map(const rs2_sensor*, const unsigned char*, unsigned int, rs2_error**)</code><br>
	 * <i>native declaration : line 854</i>
	 */
	int rs2_import_localization_map(PointerByReference sensor, byte lmap_blob[], int blob_size, PointerByReference error);
	/**
	 * Imports a localization map from file to tm2 tracking device<br>
	 * \param[in]  sensor        TM2 position-tracking sensor<br>
	 * \param[in]  lmap_blob     Localization map raw buffer, serialized<br>
	 * \param[in]  blob_size     The buffer's size in bytes<br>
	 * \param[out] error         If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return                   Non-zero if succeeded, otherwise 0<br>
	 * Original signature : <code>int rs2_import_localization_map(const rs2_sensor*, const unsigned char*, unsigned int, rs2_error**)</code><br>
	 * <i>native declaration : line 854</i>
	 */
	int rs2_import_localization_map(PointerByReference sensor, Pointer lmap_blob, int blob_size, PointerByReference error);
	/**
	 * void rs2_export_localization_map(const rs2_sensor* sensor, const char* lmap_fname, rs2_error** error);<br>
	 * Original signature : <code>rs2_raw_data_buffer* rs2_export_localization_map(const rs2_sensor*, rs2_error**)</code><br>
	 * <i>native declaration : line 864</i><br>
	 * @deprecated use the safer method {@link #rs2_export_localization_map(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	PointerByReference rs2_export_localization_map(Pointer sensor, PointerByReference error);
	/**
	 * void rs2_export_localization_map(const rs2_sensor* sensor, const char* lmap_fname, rs2_error** error);<br>
	 * Original signature : <code>rs2_raw_data_buffer* rs2_export_localization_map(const rs2_sensor*, rs2_error**)</code><br>
	 * <i>native declaration : line 864</i>
	 */
	PointerByReference rs2_export_localization_map(PointerByReference sensor, PointerByReference error);
	/**
	 * Create a named location tag<br>
	 * \param[in]  sensor    T2xx position-tracking sensor<br>
	 * \param[in]  guid      Null-terminated string of up to 127 characters<br>
	 * \param[in]  pos       Position in meters, relative to the current tracking session<br>
	 * \param[in]  orient    Quaternion orientation, expressed the the coordinate system of the current tracking session<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return               Non-zero if succeeded, otherwise 0<br>
	 * Original signature : <code>int rs2_set_static_node(const rs2_sensor*, const char*, const rs2_vector, const rs2_quaternion, rs2_error**)</code><br>
	 * <i>native declaration : line 875</i><br>
	 * @deprecated use the safer methods {@link #rs2_set_static_node(com.sun.jna.ptr.PointerByReference, java.lang.String, realsense2.Realsense2Library.rs2_vector.ByValue, realsense2.Realsense2Library.rs2_quaternion.ByValue, com.sun.jna.ptr.PointerByReference)} and {@link #rs2_set_static_node(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, realsense2.Realsense2Library.rs2_vector.ByValue, realsense2.Realsense2Library.rs2_quaternion.ByValue, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	int rs2_set_static_node(Pointer sensor, Pointer guid, Realsense2Library.rs2_vector.ByValue pos, Realsense2Library.rs2_quaternion.ByValue orient, PointerByReference error);
	/**
	 * Create a named location tag<br>
	 * \param[in]  sensor    T2xx position-tracking sensor<br>
	 * \param[in]  guid      Null-terminated string of up to 127 characters<br>
	 * \param[in]  pos       Position in meters, relative to the current tracking session<br>
	 * \param[in]  orient    Quaternion orientation, expressed the the coordinate system of the current tracking session<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return               Non-zero if succeeded, otherwise 0<br>
	 * Original signature : <code>int rs2_set_static_node(const rs2_sensor*, const char*, const rs2_vector, const rs2_quaternion, rs2_error**)</code><br>
	 * <i>native declaration : line 875</i>
	 */
	int rs2_set_static_node(PointerByReference sensor, String guid, Realsense2Library.rs2_vector.ByValue pos, Realsense2Library.rs2_quaternion.ByValue orient, PointerByReference error);
	/**
	 * Create a named location tag<br>
	 * \param[in]  sensor    T2xx position-tracking sensor<br>
	 * \param[in]  guid      Null-terminated string of up to 127 characters<br>
	 * \param[in]  pos       Position in meters, relative to the current tracking session<br>
	 * \param[in]  orient    Quaternion orientation, expressed the the coordinate system of the current tracking session<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return               Non-zero if succeeded, otherwise 0<br>
	 * Original signature : <code>int rs2_set_static_node(const rs2_sensor*, const char*, const rs2_vector, const rs2_quaternion, rs2_error**)</code><br>
	 * <i>native declaration : line 875</i>
	 */
	int rs2_set_static_node(PointerByReference sensor, Pointer guid, Realsense2Library.rs2_vector.ByValue pos, Realsense2Library.rs2_quaternion.ByValue orient, PointerByReference error);
	/**
	 * Create a named location tag<br>
	 * \param[in]  sensor    T2xx position-tracking sensor<br>
	 * \param[in]  guid      Null-terminated string of up to 127 characters<br>
	 * \param[out] pos       Position in meters of the tagged (stored) location<br>
	 * \param[out] orient    Quaternion orientation of the tagged (stored) location<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return               Non-zero if succeeded, otherwise 0<br>
	 * Original signature : <code>int rs2_get_static_node(const rs2_sensor*, const char*, rs2_vector*, rs2_quaternion*, rs2_error**)</code><br>
	 * <i>native declaration : line 886</i><br>
	 * @deprecated use the safer methods {@link #rs2_get_static_node(com.sun.jna.ptr.PointerByReference, java.lang.String, realsense2.Realsense2Library.rs2_vector, realsense2.Realsense2Library.rs2_quaternion, com.sun.jna.ptr.PointerByReference)} and {@link #rs2_get_static_node(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, realsense2.Realsense2Library.rs2_vector, realsense2.Realsense2Library.rs2_quaternion, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	int rs2_get_static_node(Pointer sensor, Pointer guid, Realsense2Library.rs2_vector pos, Realsense2Library.rs2_quaternion orient, PointerByReference error);
	/**
	 * Create a named location tag<br>
	 * \param[in]  sensor    T2xx position-tracking sensor<br>
	 * \param[in]  guid      Null-terminated string of up to 127 characters<br>
	 * \param[out] pos       Position in meters of the tagged (stored) location<br>
	 * \param[out] orient    Quaternion orientation of the tagged (stored) location<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return               Non-zero if succeeded, otherwise 0<br>
	 * Original signature : <code>int rs2_get_static_node(const rs2_sensor*, const char*, rs2_vector*, rs2_quaternion*, rs2_error**)</code><br>
	 * <i>native declaration : line 886</i>
	 */
	int rs2_get_static_node(PointerByReference sensor, String guid, Realsense2Library.rs2_vector pos, Realsense2Library.rs2_quaternion orient, PointerByReference error);
	/**
	 * Create a named location tag<br>
	 * \param[in]  sensor    T2xx position-tracking sensor<br>
	 * \param[in]  guid      Null-terminated string of up to 127 characters<br>
	 * \param[out] pos       Position in meters of the tagged (stored) location<br>
	 * \param[out] orient    Quaternion orientation of the tagged (stored) location<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return               Non-zero if succeeded, otherwise 0<br>
	 * Original signature : <code>int rs2_get_static_node(const rs2_sensor*, const char*, rs2_vector*, rs2_quaternion*, rs2_error**)</code><br>
	 * <i>native declaration : line 886</i>
	 */
	int rs2_get_static_node(PointerByReference sensor, Pointer guid, Realsense2Library.rs2_vector pos, Realsense2Library.rs2_quaternion orient, PointerByReference error);
	/**
	 * Load Wheel odometer settings from host to device<br>
	 * \param[in] odometry_config_buf   odometer configuration/calibration blob serialized from jsom file<br>
	 * \return true on success<br>
	 * Original signature : <code>int rs2_load_wheel_odometry_config(const rs2_sensor*, const unsigned char*, unsigned int, rs2_error**)</code><br>
	 * <i>native declaration : line 892</i><br>
	 * @deprecated use the safer methods {@link #rs2_load_wheel_odometry_config(com.sun.jna.ptr.PointerByReference, byte[], int, com.sun.jna.ptr.PointerByReference)} and {@link #rs2_load_wheel_odometry_config(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	int rs2_load_wheel_odometry_config(Pointer sensor, Pointer odometry_config_buf, int blob_size, PointerByReference error);
	/**
	 * Load Wheel odometer settings from host to device<br>
	 * \param[in] odometry_config_buf   odometer configuration/calibration blob serialized from jsom file<br>
	 * \return true on success<br>
	 * Original signature : <code>int rs2_load_wheel_odometry_config(const rs2_sensor*, const unsigned char*, unsigned int, rs2_error**)</code><br>
	 * <i>native declaration : line 892</i>
	 */
	int rs2_load_wheel_odometry_config(PointerByReference sensor, byte odometry_config_buf[], int blob_size, PointerByReference error);
	/**
	 * Load Wheel odometer settings from host to device<br>
	 * \param[in] odometry_config_buf   odometer configuration/calibration blob serialized from jsom file<br>
	 * \return true on success<br>
	 * Original signature : <code>int rs2_load_wheel_odometry_config(const rs2_sensor*, const unsigned char*, unsigned int, rs2_error**)</code><br>
	 * <i>native declaration : line 892</i>
	 */
	int rs2_load_wheel_odometry_config(PointerByReference sensor, Pointer odometry_config_buf, int blob_size, PointerByReference error);
	/**
	 * Send wheel odometry data for each individual sensor (wheel)<br>
	 * \param[in] wo_sensor_id       - Zero-based index of (wheel) sensor with the same type within device<br>
	 * \param[in] frame_num          - Monotonocally increasing frame number, managed per sensor.<br>
	 * \param[in] translational_velocity   - Translational velocity of the wheel sensor [meter/sec]<br>
	 * \return true on success<br>
	 * Original signature : <code>int rs2_send_wheel_odometry(const rs2_sensor*, char, unsigned int, const rs2_vector, rs2_error**)</code><br>
	 * <i>native declaration : line 900</i><br>
	 * @deprecated use the safer method {@link #rs2_send_wheel_odometry(com.sun.jna.ptr.PointerByReference, byte, int, realsense2.Realsense2Library.rs2_vector.ByValue, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	int rs2_send_wheel_odometry(Pointer sensor, byte wo_sensor_id, int frame_num, Realsense2Library.rs2_vector.ByValue translational_velocity, PointerByReference error);
	/**
	 * Send wheel odometry data for each individual sensor (wheel)<br>
	 * \param[in] wo_sensor_id       - Zero-based index of (wheel) sensor with the same type within device<br>
	 * \param[in] frame_num          - Monotonocally increasing frame number, managed per sensor.<br>
	 * \param[in] translational_velocity   - Translational velocity of the wheel sensor [meter/sec]<br>
	 * \return true on success<br>
	 * Original signature : <code>int rs2_send_wheel_odometry(const rs2_sensor*, char, unsigned int, const rs2_vector, rs2_error**)</code><br>
	 * <i>native declaration : line 900</i>
	 */
	int rs2_send_wheel_odometry(PointerByReference sensor, byte wo_sensor_id, int frame_num, Realsense2Library.rs2_vector.ByValue translational_velocity, PointerByReference error);
	/**
	 * Set intrinsics of a given sensor<br>
	 * \param[in] sensor       The RealSense device<br>
	 * \param[in] profile      Target stream profile<br>
	 * \param[in] intrinsics   Intrinsics value to be written to the device<br>
	 * \param[out] error       If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_set_intrinsics(const rs2_sensor*, const rs2_stream_profile*, const rs2_intrinsics*, rs2_error**)</code><br>
	 * <i>native declaration : line 910</i><br>
	 * @deprecated use the safer method {@link #rs2_set_intrinsics(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, realsense2.Realsense2Library.rs2_intrinsics, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_set_intrinsics(Pointer sensor, Pointer profile, Realsense2Library.rs2_intrinsics intrinsics, PointerByReference error);
	/**
	 * Set intrinsics of a given sensor<br>
	 * \param[in] sensor       The RealSense device<br>
	 * \param[in] profile      Target stream profile<br>
	 * \param[in] intrinsics   Intrinsics value to be written to the device<br>
	 * \param[out] error       If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_set_intrinsics(const rs2_sensor*, const rs2_stream_profile*, const rs2_intrinsics*, rs2_error**)</code><br>
	 * <i>native declaration : line 910</i>
	 */
	void rs2_set_intrinsics(PointerByReference sensor, PointerByReference profile, Realsense2Library.rs2_intrinsics intrinsics, PointerByReference error);
	/**
	 * Set extrinsics between two sensors<br>
	 * \param[in]  from_sensor  Origin sensor<br>
	 * \param[in]  from_profile Origin profile<br>
	 * \param[in]  to_sensor    Target sensor<br>
	 * \param[in]  to_profile   Target profile<br>
	 * \param[out] extrinsics   Extrinsics from origin to target<br>
	 * \param[out] error        If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_set_extrinsics(const rs2_sensor*, const rs2_stream_profile*, rs2_sensor*, const rs2_stream_profile*, const rs2_extrinsics*, rs2_error**)</code><br>
	 * <i>native declaration : line 921</i><br>
	 * @deprecated use the safer method {@link #rs2_set_extrinsics(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, realsense2.Realsense2Library.rs2_extrinsics, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_set_extrinsics(Pointer from_sensor, Pointer from_profile, Pointer to_sensor, Pointer to_profile, Realsense2Library.rs2_extrinsics extrinsics, PointerByReference error);
	/**
	 * Set extrinsics between two sensors<br>
	 * \param[in]  from_sensor  Origin sensor<br>
	 * \param[in]  from_profile Origin profile<br>
	 * \param[in]  to_sensor    Target sensor<br>
	 * \param[in]  to_profile   Target profile<br>
	 * \param[out] extrinsics   Extrinsics from origin to target<br>
	 * \param[out] error        If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_set_extrinsics(const rs2_sensor*, const rs2_stream_profile*, rs2_sensor*, const rs2_stream_profile*, const rs2_extrinsics*, rs2_error**)</code><br>
	 * <i>native declaration : line 921</i>
	 */
	void rs2_set_extrinsics(PointerByReference from_sensor, PointerByReference from_profile, PointerByReference to_sensor, PointerByReference to_profile, Realsense2Library.rs2_extrinsics extrinsics, PointerByReference error);
	/**
	 * Set motion device intrinsics<br>
	 * \param[in]  sensor       Motion sensor <br>
	 * \param[in]  profile      Motion stream profile<br>
	 * \param[out] intrinsics   Pointer to the struct to store the data in<br>
	 * \param[out] error        If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_set_motion_device_intrinsics(const rs2_sensor*, const rs2_stream_profile*, const rs2_motion_device_intrinsic*, rs2_error**)</code><br>
	 * <i>native declaration : line 930</i><br>
	 * @deprecated use the safer method {@link #rs2_set_motion_device_intrinsics(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, realsense2.Realsense2Library.rs2_motion_device_intrinsic, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_set_motion_device_intrinsics(Pointer sensor, Pointer profile, Realsense2Library.rs2_motion_device_intrinsic intrinsics, PointerByReference error);
	/**
	 * Set motion device intrinsics<br>
	 * \param[in]  sensor       Motion sensor <br>
	 * \param[in]  profile      Motion stream profile<br>
	 * \param[out] intrinsics   Pointer to the struct to store the data in<br>
	 * \param[out] error        If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_set_motion_device_intrinsics(const rs2_sensor*, const rs2_stream_profile*, const rs2_motion_device_intrinsic*, rs2_error**)</code><br>
	 * <i>native declaration : line 930</i>
	 */
	void rs2_set_motion_device_intrinsics(PointerByReference sensor, PointerByReference profile, Realsense2Library.rs2_motion_device_intrinsic intrinsics, PointerByReference error);

	/**
	 * Determines number of devices in a list.<br>
	 * \param[in]  info_list The list of connected devices captured using rs2_query_devices<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return               Device count<br>
	 * Original signature : <code>int rs2_get_device_count(const rs2_device_list*, rs2_error**)</code><br>
	 * <i>native declaration : line 941</i>
	 */
	int rs2_get_device_count(Realsense2Library.rs2_device_list info_list, PointerByReference error);
	/**
	 * Deletes device list, any devices created using this list will remain unaffected.<br>
	 * \param[in]  info_list List to delete<br>
	 * Original signature : <code>void rs2_delete_device_list(rs2_device_list*)</code><br>
	 * <i>native declaration : line 947</i><br>
	 * @deprecated use the safer method {@link #rs2_delete_device_list(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_delete_device_list(Pointer info_list);
	/**
	 * Deletes device list, any devices created using this list will remain unaffected.<br>
	 * \param[in]  info_list List to delete<br>
	 * Original signature : <code>void rs2_delete_device_list(rs2_device_list*)</code><br>
	 * <i>native declaration : line 947</i>
	 */
	void rs2_delete_device_list(PointerByReference info_list);
	/**
	 * Checks if a specific device is contained inside a device list.<br>
	 * \param[in]  info_list The list of devices to check in<br>
	 * \param[in]  device    RealSense device to check for<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return               True if the device is in the list and false otherwise<br>
	 * Original signature : <code>int rs2_device_list_contains(const rs2_device_list*, const rs2_device*, rs2_error**)</code><br>
	 * <i>native declaration : line 956</i><br>
	 * @deprecated use the safer method {@link #rs2_device_list_contains(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	int rs2_device_list_contains(Pointer info_list, Pointer device, PointerByReference error);
	/**
	 * Checks if a specific device is contained inside a device list.<br>
	 * \param[in]  info_list The list of devices to check in<br>
	 * \param[in]  device    RealSense device to check for<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return               True if the device is in the list and false otherwise<br>
	 * Original signature : <code>int rs2_device_list_contains(const rs2_device_list*, const rs2_device*, rs2_error**)</code><br>
	 * <i>native declaration : line 956</i>
	 */
	int rs2_device_list_contains(PointerByReference info_list, PointerByReference device, PointerByReference error);

	/**
	 * Creates a device by index. The device object represents a physical camera and provides the means to manipulate it.<br>
	 * \param[in]  info_list the list containing the device to retrieve<br>
	 * \param[in]  index     The zero based index of device to retrieve<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return               The requested device, should be released by rs2_delete_device<br>
	 * Original signature : <code>rs2_device* rs2_create_device(const rs2_device_list*, int, rs2_error**)</code><br>
	 * <i>native declaration : line 965</i>
	 */
	Realsense2Library.rs2_device rs2_create_device(Realsense2Library.rs2_device_list info_list, int index, PointerByReference error);

	/**
	 * Delete RealSense device<br>
	 * \param[in]  device    Realsense device to delete<br>
	 * Original signature : <code>void rs2_delete_device(rs2_device*)</code><br>
	 * <i>native declaration : line 971</i>
	 */
	void rs2_delete_device(Realsense2Library.rs2_device device);

	/**
	 * Retrieve camera specific information, like versions of various internal components.<br>
	 * \param[in]  device    The RealSense device<br>
	 * \param[in]  info      Camera info type to retrieve<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return               The requested camera info string, in a format specific to the device model<br>
	 * Original signature : <code>char* rs2_get_device_info(const rs2_device*, rs2_camera_info, rs2_error**)</code><br>
	 * <i>native declaration : line 980</i>
	 */
	Pointer rs2_get_device_info(Realsense2Library.rs2_device device, int info, PointerByReference error);

	/**
	 * Check if a camera supports a specific camera info type.<br>
	 * \param[in]  device    The RealSense device to check<br>
	 * \param[in]  info      The parameter to check for support<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return               True if the parameter both exist and well-defined for the specific device<br>
	 * Original signature : <code>int rs2_supports_device_info(const rs2_device*, rs2_camera_info, rs2_error**)</code><br>
	 * <i>native declaration : line 989</i>
	 */
	int rs2_supports_device_info(Realsense2Library.rs2_device device, int info, PointerByReference error);

	/**
	 * Send hardware reset request to the device. The actual reset is asynchronous.<br>
	 * Note: Invalidates all handles to this device.<br>
	 * \param[in]  device   The RealSense device to reset<br>
	 * \param[out] error    If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_hardware_reset(const rs2_device*, rs2_error**)</code><br>
	 * <i>native declaration : line 997</i>
	 */
	void rs2_hardware_reset(Realsense2Library.rs2_device device, PointerByReference error);

	/**
	 * Send raw data to device<br>
	 * \param[in]  device                    RealSense device to send data to<br>
	 * \param[in]  raw_data_to_send          Raw data to be sent to device<br>
	 * \param[in]  size_of_raw_data_to_send  Size of raw_data_to_send in bytes<br>
	 * \param[out] error                     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return                               Device's response in a rs2_raw_data_buffer, which should be released by rs2_delete_raw_data<br>
	 * Original signature : <code>rs2_raw_data_buffer* rs2_send_and_receive_raw_data(rs2_device*, void*, unsigned, rs2_error**)</code><br>
	 * <i>native declaration : line 1007</i>
	 */
	PointerByReference rs2_send_and_receive_raw_data(Realsense2Library.rs2_device device, Pointer raw_data_to_send, int size_of_raw_data_to_send, PointerByReference error);

	/**
	 * Test if the given device can be extended to the requested extension.<br>
	 * \param[in]  device    Realsense device<br>
	 * \param[in]  extension The extension to which the device should be tested if it is extendable<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return               Non-zero value iff the device can be extended to the given extension<br>
	 * Original signature : <code>int rs2_is_device_extendable_to(const rs2_device*, rs2_extension, rs2_error**)</code><br>
	 * <i>native declaration : line 1016</i>
	 */
	int rs2_is_device_extendable_to(Realsense2Library.rs2_device device, int extension, PointerByReference error);

	/**
	 * Create a static snapshot of all connected sensors within a specific device.<br>
	 * \param[in]  device    Specific RealSense device<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return               The list of sensors, should be released by rs2_delete_sensor_list<br>
	 * Original signature : <code>rs2_sensor_list* rs2_query_sensors(const rs2_device*, rs2_error**)</code><br>
	 * <i>native declaration : line 1024</i>
	 */
	PointerByReference rs2_query_sensors(Realsense2Library.rs2_device device, PointerByReference error);

	/**
	 * Enter the given device into loopback operation mode that uses the given file as input for raw data<br>
	 * \param[in]  device     Device to enter into loopback operation mode<br>
	 * \param[in]  from_file  Path to bag file with raw data for loopback<br>
	 * \param[out] error      If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_loopback_enable(const rs2_device*, const char*, rs2_error**)</code><br>
	 * <i>native declaration : line 1032</i>
	 */
	void rs2_loopback_enable(Realsense2Library.rs2_device device, String from_file, PointerByReference error);
	/**
	 * Enter the given device into loopback operation mode that uses the given file as input for raw data<br>
	 * \param[in]  device     Device to enter into loopback operation mode<br>
	 * \param[in]  from_file  Path to bag file with raw data for loopback<br>
	 * \param[out] error      If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_loopback_enable(const rs2_device*, const char*, rs2_error**)</code><br>
	 * <i>native declaration : line 1032</i>
	 */
	void rs2_loopback_enable(Realsense2Library.rs2_device device, Pointer from_file, PointerByReference error);

	/**
	 * Restores the given device into normal operation mode<br>
	 * \param[in]  device     Device to restore to normal operation mode<br>
	 * \param[out] error      If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_loopback_disable(const rs2_device*, rs2_error**)</code><br>
	 * <i>native declaration : line 1039</i>
	 */
	void rs2_loopback_disable(Realsense2Library.rs2_device device, PointerByReference error);

	/**
	 * Checks if the device is in loopback mode or not<br>
	 * \param[in]  device     Device to check for operation mode<br>
	 * \param[out] error      If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return true if the device is in loopback operation mode<br>
	 * Original signature : <code>int rs2_loopback_is_enabled(const rs2_device*, rs2_error**)</code><br>
	 * <i>native declaration : line 1047</i>
	 */
	int rs2_loopback_is_enabled(Realsense2Library.rs2_device device, PointerByReference error);

	/**
	 * Connects to a given tm2 controller<br>
	 * \param[in]  device     Device to connect to the controller<br>
	 * \param[in]  mac_addr   The MAC address of the desired controller<br>
	 * \param[out] error      If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_connect_tm2_controller(const rs2_device*, const unsigned char*, rs2_error**)</code><br>
	 * <i>native declaration : line 1055</i>
	 */
	void rs2_connect_tm2_controller(Realsense2Library.rs2_device device, byte mac_addr[], PointerByReference error);
	/**
	 * Connects to a given tm2 controller<br>
	 * \param[in]  device     Device to connect to the controller<br>
	 * \param[in]  mac_addr   The MAC address of the desired controller<br>
	 * \param[out] error      If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_connect_tm2_controller(const rs2_device*, const unsigned char*, rs2_error**)</code><br>
	 * <i>native declaration : line 1055</i>
	 */
	void rs2_connect_tm2_controller(Realsense2Library.rs2_device device, Pointer mac_addr, PointerByReference error);

	/**
	 * Disconnects a given tm2 controller<br>
	 * \param[in]  device     Device to disconnect the controller from<br>
	 * \param[in]  id         The ID of the desired controller<br>
	 * \param[out] error      If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_disconnect_tm2_controller(const rs2_device*, int, rs2_error**)</code><br>
	 * <i>native declaration : line 1063</i>
	 */
	void rs2_disconnect_tm2_controller(Realsense2Library.rs2_device device, int id, PointerByReference error);

	/**
	 * Reset device to factory calibration<br>
	 * \param[in] device       The RealSense device<br>
	 * \param[out] error       If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_reset_to_factory_calibration(const rs2_device*, rs2_error**)</code><br>
	 * <i>native declaration : line 1071</i>
	 */
	void rs2_reset_to_factory_calibration(Realsense2Library.rs2_device device, PointerByReference e);

	/**
	 * Write calibration to device's EEPROM<br>
	 * \param[in] device       The RealSense device<br>
	 * \param[out] error       If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_write_calibration(const rs2_device*, rs2_error**)</code><br>
	 * <i>native declaration : line 1078</i>
	 */
	void rs2_write_calibration(Realsense2Library.rs2_device device, PointerByReference e);

	/**
	 * Update device to the provided firmware, the device must be extendable to RS2_EXTENSION_UPDATABLE.<br>
	 * This call is executed on the caller's thread and it supports progress notifications via the optional callback.<br>
	 * \param[in]  device        Device to update<br>
	 * \param[in]  fw_image      Firmware image buffer<br>
	 * \param[in]  fw_image_size Firmware image buffer size<br>
	 * \param[in]  callback      Optional callback for update progress notifications, the progress value is normailzed to 1<br>
	 * \param[out] error         If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_update_firmware_cpp(const rs2_device*, const void*, int, rs2_update_progress_callback*, rs2_error**)</code><br>
	 * <i>native declaration : line 1089</i>
	 */
	void rs2_update_firmware_cpp(Realsense2Library.rs2_device device, Pointer fw_image, int fw_image_size, PointerByReference callback, PointerByReference error);
	/**
	 * Update device to the provided firmware, the device must be extendable to RS2_EXTENSION_UPDATABLE.<br>
	 * This call is executed on the caller's thread and it supports progress notifications via the optional callback.<br>
	 * \param[in]  device        Device to update<br>
	 * \param[in]  fw_image      Firmware image buffer<br>
	 * \param[in]  fw_image_size Firmware image buffer size<br>
	 * \param[in]  callback      Optional callback for update progress notifications, the progress value is normailzed to 1<br>
	 * \param[in]  client_data   Optional client data for the callback<br>
	 * \param[out] error         If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_update_firmware(const rs2_device*, const void*, int, rs2_update_progress_callback_ptr, void*, rs2_error**)</code><br>
	 * <i>native declaration : line 1101</i>
	 */
	void rs2_update_firmware(Realsense2Library.rs2_device device, Pointer fw_image, int fw_image_size, Realsense2Library.rs2_update_progress_callback_ptr callback, Pointer client_data, PointerByReference error);

	/**
	 * Create backup of camera flash memory. Such backup does not constitute valid firmware image, and cannot be<br>
	 * loaded back to the device, but it does contain all calibration and device information.<br>
	 * \param[in]  device        Device to update<br>
	 * \param[in]  callback      Optional callback for update progress notifications, the progress value is normailzed to 1<br>
	 * \param[out] error         If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>rs2_raw_data_buffer* rs2_create_flash_backup_cpp(const rs2_device*, rs2_update_progress_callback*, rs2_error**)</code><br>
	 * <i>native declaration : line 1110</i>
	 */
	PointerByReference rs2_create_flash_backup_cpp(Realsense2Library.rs2_device device, PointerByReference callback, PointerByReference error);
	/**
	 * Create backup of camera flash memory. Such backup does not constitute valid firmware image, and cannot be<br>
	 * loaded back to the device, but it does contain all calibration and device information.<br>
	 * \param[in]  device        Device to update<br>
	 * \param[in]  callback      Optional callback for update progress notifications, the progress value is normailzed to 1<br>
	 * \param[in]  client_data   Optional client data for the callback<br>
	 * \param[out] error         If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>rs2_raw_data_buffer* rs2_create_flash_backup(const rs2_device*, rs2_update_progress_callback_ptr, void*, rs2_error**)</code><br>
	 * <i>native declaration : line 1120</i>
	 */
	PointerByReference rs2_create_flash_backup(Realsense2Library.rs2_device device, Realsense2Library.rs2_update_progress_callback_ptr callback, Pointer client_data, PointerByReference error);
	/**
	 * Update device to the provided firmware by writing raw data directly to the flash, this command can be executed only on unlocked camera.<br>
	 * The device must be extendable to RS2_EXTENSION_UPDATABLE.<br>
	 * This call is executed on the caller's thread and it supports progress notifications via the optional callback.<br>
	 * \param[in]  device        Device to update<br>
	 * \param[in]  fw_image      Firmware image buffer<br>
	 * \param[in]  fw_image_size Firmware image buffer size<br>
	 * \param[in]  callback      Optional callback for update progress notifications, the progress value is normailzed to 1<br>
	 * \param[in]  update_mode   Select one of RS2_UNSIGNED_UPDATE_MODE, WARNING!!! setting to any option other than RS2_UNSIGNED_UPDATE_MODE_UPDATE will make this call unsafe and might damage the camera<br>
	 * \param[out] error         If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_update_firmware_unsigned_cpp(const rs2_device*, const void*, int, rs2_update_progress_callback*, int, rs2_error**)</code><br>
	 * <i>native declaration : line 1137</i>
	 */
	void rs2_update_firmware_unsigned_cpp(Realsense2Library.rs2_device device, Pointer fw_image, int fw_image_size, PointerByReference callback, int update_mode, PointerByReference error);
	/**
	 * Update device to the provided firmware by writing raw data directly to the flash, this command can be executed only on unlocked camera.<br>
	 * The device must be extendable to RS2_EXTENSION_UPDATABLE.<br>
	 * This call is executed on the caller's thread and it supports progress notifications via the optional callback.<br>
	 * \param[in]  device        Device to update<br>
	 * \param[in]  fw_image      Firmware image buffer<br>
	 * \param[in]  fw_image_size Firmware image buffer size<br>
	 * \param[in]  callback      Optional callback for update progress notifications, the progress value is normailzed to 1<br>
	 * \param[in]  client_data   Optional client data for the callback<br>
	 * \param[in]  update_mode   Select one of RS2_UNSIGNED_UPDATE_MODE, WARNING!!! setting to any option other than RS2_UNSIGNED_UPDATE_MODE_UPDATE will make this call unsafe and might damage the camera<br>
	 * \param[out] error         If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_update_firmware_unsigned(const rs2_device*, const void*, int, rs2_update_progress_callback_ptr, void*, int, rs2_error**)</code><br>
	 * <i>native declaration : line 1151</i>
	 */
	void rs2_update_firmware_unsigned(Realsense2Library.rs2_device device, Pointer fw_image, int fw_image_size, Realsense2Library.rs2_update_progress_callback_ptr callback, Pointer client_data, int update_mode, PointerByReference error);

	/**
	 * Enter the device to update state, this will cause the updatable device to disconnect and reconnect as update device.<br>
	 * \param[in]  device     Device to update<br>
	 * \param[out] error      If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_enter_update_state(const rs2_device*, rs2_error**)</code><br>
	 * <i>native declaration : line 1158</i>
	 */
	void rs2_enter_update_state(Realsense2Library.rs2_device device, PointerByReference error);
	/**
	 * Original signature : <code>char* rs2_timestamp_domain_to_string(rs2_timestamp_domain)</code><br>
	 * <i>native declaration : line 1170</i>
	 */
	Pointer rs2_timestamp_domain_to_string(int info);
	/**
	 * Original signature : <code>char* rs2_frame_metadata_to_string(rs2_frame_metadata_value)</code><br>
	 * <i>native declaration : line 1207</i>
	 */
	Pointer rs2_frame_metadata_to_string(int metadata);
	/**
	 * Original signature : <code>char* rs2_frame_metadata_value_to_string(rs2_frame_metadata_value)</code><br>
	 * <i>native declaration : line 1208</i>
	 */
	Pointer rs2_frame_metadata_value_to_string(int metadata);

	/**
	 * retrieve metadata from frame handle<br>
	 * \param[in] frame      handle returned from a callback<br>
	 * \param[in] frame_metadata  the rs2_frame_metadata whose latest frame we are interested in<br>
	 * \param[out] error         if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return            the metadata value<br>
	 * Original signature : <code>rs2_metadata_type rs2_get_frame_metadata(const rs2_frame*, rs2_frame_metadata_value, rs2_error**)</code><br>
	 * <i>native declaration : line 1217</i>
	 */
	long rs2_get_frame_metadata(Realsense2Library.rs2_frame frame, int frame_metadata, PointerByReference error);

	/**
	 * determine device metadata<br>
	 * \param[in] frame             handle returned from a callback<br>
	 * \param[in] frame_metadata    the metadata to check for support<br>
	 * \param[out] error         if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return                true if device has this metadata<br>
	 * Original signature : <code>int rs2_supports_frame_metadata(const rs2_frame*, rs2_frame_metadata_value, rs2_error**)</code><br>
	 * <i>native declaration : line 1226</i>
	 */
	int rs2_supports_frame_metadata(Realsense2Library.rs2_frame frame, int frame_metadata, PointerByReference error);

	/**
	 * retrieve timestamp domain from frame handle. timestamps can only be comparable if they are in common domain<br>
	 * (for example, depth timestamp might come from system time while color timestamp might come from the device)<br>
	 * this method is used to check if two timestamp values are comparable (generated from the same clock)<br>
	 * \param[in] frameset   handle returned from a callback<br>
	 * \param[out] error     if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return               the timestamp domain of the frame (camera / microcontroller / system time)<br>
	 * Original signature : <code>rs2_timestamp_domain rs2_get_frame_timestamp_domain(const rs2_frame*, rs2_error**)</code><br>
	 * <i>native declaration : line 1236</i>
	 */
	int rs2_get_frame_timestamp_domain(PointerByReference frameset, PointerByReference error);

	/**
	 * retrieve timestamp from frame handle in milliseconds<br>
	 * \param[in] frame      handle returned from a callback<br>
	 * \param[out] error     if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return               the timestamp of the frame in milliseconds<br>
	 * Original signature : <code>rs2_time_t rs2_get_frame_timestamp(const rs2_frame*, rs2_error**)</code><br>
	 * <i>native declaration : line 1244</i>
	 */
	double rs2_get_frame_timestamp(Realsense2Library.rs2_frame frame, PointerByReference error);

	/**
	 * retrieve frame parent sensor from frame handle<br>
	 * \param[in] frame      handle returned from a callback<br>
	 * \param[out] error     if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return               the parent sensor of the frame<br>
	 * Original signature : <code>rs2_sensor* rs2_get_frame_sensor(const rs2_frame*, rs2_error**)</code><br>
	 * <i>native declaration : line 1252</i>
	 */
	PointerByReference rs2_get_frame_sensor(Realsense2Library.rs2_frame frame, PointerByReference error);

	/**
	 * retrieve frame number from frame handle<br>
	 * \param[in] frame      handle returned from a callback<br>
	 * \param[out] error     if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return               the frame nubmer of the frame, in milliseconds since the device was started<br>
	 * Original signature : <code>long long rs2_get_frame_number(const rs2_frame*, rs2_error**)</code><br>
	 * <i>native declaration : line 1260</i>
	 */
	long rs2_get_frame_number(Realsense2Library.rs2_frame frame, PointerByReference error);

	/**
	 * retrieve data size from frame handle<br>
	 * \param[in] frame      handle returned from a callback<br>
	 * \param[out] error     if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return               the size of the frame data<br>
	 * Original signature : <code>int rs2_get_frame_data_size(const rs2_frame*, rs2_error**)</code><br>
	 * <i>native declaration : line 1268</i>
	 */
	int rs2_get_frame_data_size(Realsense2Library.rs2_frame frame, PointerByReference error);

	/**
	 * retrieve data from frame handle<br>
	 * \param[in] frame      handle returned from a callback<br>
	 * \param[out] error     if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return               the pointer to the start of the frame data<br>
	 * Original signature : <code>void* rs2_get_frame_data(const rs2_frame*, rs2_error**)</code><br>
	 * <i>native declaration : line 1276</i>
	 */
	Pointer rs2_get_frame_data(Realsense2Library.rs2_frame frame, PointerByReference error);

	/**
	 * retrieve frame width in pixels<br>
	 * \param[in] frame      handle returned from a callback<br>
	 * \param[out] error     if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return               frame width in pixels<br>
	 * Original signature : <code>int rs2_get_frame_width(const rs2_frame*, rs2_error**)</code><br>
	 * <i>native declaration : line 1284</i>
	 */
	int rs2_get_frame_width(Realsense2Library.rs2_frame frame, PointerByReference error);

	/**
	 * retrieve frame height in pixels<br>
	 * \param[in] frame      handle returned from a callback<br>
	 * \param[out] error     if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return               frame height in pixels<br>
	 * Original signature : <code>int rs2_get_frame_height(const rs2_frame*, rs2_error**)</code><br>
	 * <i>native declaration : line 1292</i>
	 */
	int rs2_get_frame_height(Realsense2Library.rs2_frame frame, PointerByReference error);

	/**
	 * retrieve frame stride in bytes (number of bytes from start of line N to start of line N+1)<br>
	 * \param[in] frame      handle returned from a callback<br>
	 * \param[out] error     if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return               stride in bytes<br>
	 * Original signature : <code>int rs2_get_frame_stride_in_bytes(const rs2_frame*, rs2_error**)</code><br>
	 * <i>native declaration : line 1300</i>
	 */
	int rs2_get_frame_stride_in_bytes(Realsense2Library.rs2_frame frame, PointerByReference error);

	/**
	 * retrieve bits per pixels in the frame image<br>
	 * (note that bits per pixel is not necessarily divided by 8, as in 12bpp)<br>
	 * \param[in] frame      handle returned from a callback<br>
	 * \param[out] error     if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return               bits per pixel<br>
	 * Original signature : <code>int rs2_get_frame_bits_per_pixel(const rs2_frame*, rs2_error**)</code><br>
	 * <i>native declaration : line 1309</i>
	 */
	int rs2_get_frame_bits_per_pixel(Realsense2Library.rs2_frame frame, PointerByReference error);

	/**
	 * create additional reference to a frame without duplicating frame data<br>
	 * \param[in] frame      handle returned from a callback<br>
	 * \param[out] error     if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return               new frame reference, has to be released by rs2_release_frame<br>
	 * Original signature : <code>void rs2_frame_add_ref(rs2_frame*, rs2_error**)</code><br>
	 * <i>native declaration : line 1317</i>
	 */
	void rs2_frame_add_ref(Realsense2Library.rs2_frame frame, PointerByReference error);

	/**
	 * relases the frame handle<br>
	 * \param[in] frame handle returned from a callback<br>
	 * Original signature : <code>void rs2_release_frame(rs2_frame*)</code><br>
	 * <i>native declaration : line 1323</i>
	 */
	void rs2_release_frame(Realsense2Library.rs2_frame frame);

	/**
	 * communicate to the library you intend to keep the frame alive for a while<br>
	 * this will remove the frame from the regular count of the frame pool<br>
	 * once this function is called, the SDK can no longer guarantee 0-allocations during frame cycling<br>
	 * \param[in] frame handle returned from a callback<br>
	 * Original signature : <code>void rs2_keep_frame(rs2_frame*)</code><br>
	 * <i>native declaration : line 1331</i>
	 */
	void rs2_keep_frame(Realsense2Library.rs2_frame frame);

	/**
	 * When called on Points frame type, this method returns a pointer to an array of 3D vertices of the model<br>
	 * The coordinate system is: X right, Y up, Z away from the camera. Units: Meters<br>
	 * \param[in] frame       Points frame<br>
	 * \param[out] error      If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return                Pointer to an array of vertices, lifetime is managed by the frame<br>
	 * Original signature : <code>rs2_vertex* rs2_get_frame_vertices(const rs2_frame*, rs2_error**)</code><br>
	 * <i>native declaration : line 1340</i>
	 */
	Realsense2Library.rs2_vertex rs2_get_frame_vertices(Realsense2Library.rs2_frame frame, PointerByReference error);

	/**
	 * When called on Points frame type, this method creates a ply file of the model with the given file name.<br>
	 * \param[in] frame       Points frame<br>
	 * \param[in] fname       The name for the ply file<br>
	 * \param[in] texture     Texture frame<br>
	 * \param[out] error      If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_export_to_ply(const rs2_frame*, const char*, rs2_frame*, rs2_error**)</code><br>
	 * <i>native declaration : line 1349</i>
	 */
	void rs2_export_to_ply(Realsense2Library.rs2_frame frame, String fname, PointerByReference texture, PointerByReference error);
	/**
	 * When called on Points frame type, this method creates a ply file of the model with the given file name.<br>
	 * \param[in] frame       Points frame<br>
	 * \param[in] fname       The name for the ply file<br>
	 * \param[in] texture     Texture frame<br>
	 * \param[out] error      If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_export_to_ply(const rs2_frame*, const char*, rs2_frame*, rs2_error**)</code><br>
	 * <i>native declaration : line 1349</i>
	 */
	void rs2_export_to_ply(Realsense2Library.rs2_frame frame, Pointer fname, PointerByReference texture, PointerByReference error);

	/**
	 * When called on Points frame type, this method returns a pointer to an array of texture coordinates per vertex<br>
	 * Each coordinate represent a (u,v) pair within [0,1] range, to be mapped to texture image<br>
	 * \param[in] frame       Points frame<br>
	 * \param[out] error      If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return                Pointer to an array of texture coordinates, lifetime is managed by the frame<br>
	 * Original signature : <code>rs2_pixel* rs2_get_frame_texture_coordinates(const rs2_frame*, rs2_error**)</code><br>
	 * <i>native declaration : line 1358</i>
	 */
	Realsense2Library.rs2_pixel rs2_get_frame_texture_coordinates(Realsense2Library.rs2_frame frame, PointerByReference error);

	/**
	 * When called on Points frame type, this method returns the number of vertices in the frame<br>
	 * \param[in] frame       Points frame<br>
	 * \param[out] error      If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return                Number of vertices<br>
	 * Original signature : <code>int rs2_get_frame_points_count(const rs2_frame*, rs2_error**)</code><br>
	 * <i>native declaration : line 1366</i>
	 */
	int rs2_get_frame_points_count(Realsense2Library.rs2_frame frame, PointerByReference error);

	/**
	 * Returns the stream profile that was used to start the stream of this frame<br>
	 * \param[in] frame       frame reference, owned by the user<br>
	 * \param[out] error      If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return                Pointer to the stream profile object, lifetime is managed elsewhere<br>
	 * Original signature : <code>rs2_stream_profile* rs2_get_frame_stream_profile(const rs2_frame*, rs2_error**)</code><br>
	 * <i>native declaration : line 1374</i>
	 */
	PointerByReference rs2_get_frame_stream_profile(Realsense2Library.rs2_frame frame, PointerByReference error);

	/**
	 * Test if the given frame can be extended to the requested extension<br>
	 * \param[in]  frame             Realsense frame<br>
	 * \param[in]  extension_type    The extension to which the frame should be tested if it is extendable<br>
	 * \param[out] error             If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return non-zero value iff the frame can be extended to the given extension<br>
	 * Original signature : <code>int rs2_is_frame_extendable_to(const rs2_frame*, rs2_extension, rs2_error**)</code><br>
	 * <i>native declaration : line 1383</i>
	 */
	int rs2_is_frame_extendable_to(Realsense2Library.rs2_frame frame, int extension_type, PointerByReference error);
	/**
	 * Allocate new video frame using a frame-source provided form a processing block<br>
	 * \param[in] source      Frame pool to allocate the frame from<br>
	 * \param[in] new_stream  New stream profile to assign to newly created frame<br>
	 * \param[in] original    A reference frame that can be used to fill in auxilary information like format, width, height, bpp, stride (if applicable)<br>
	 * \param[in] new_bpp     New value for bits per pixel for the allocated frame<br>
	 * \param[in] new_width   New value for width for the allocated frame<br>
	 * \param[in] new_height  New value for height for the allocated frame<br>
	 * \param[in] new_stride  New value for stride in bytes for the allocated frame<br>
	 * \param[in] frame_type  New value for frame type for the allocated frame<br>
	 * \param[out] error      If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return                reference to a newly allocated frame, must be released with release_frame<br>
	 *                        memory for the frame is likely to be re-used from previous frame, but in lack of available frames in the pool will be allocated from the free store<br>
	 * Original signature : <code>rs2_frame* rs2_allocate_synthetic_video_frame(rs2_source*, const rs2_stream_profile*, rs2_frame*, int, int, int, int, rs2_extension, rs2_error**)</code><br>
	 * <i>native declaration : line 1399</i>
	 */
	PointerByReference rs2_allocate_synthetic_video_frame(PointerByReference source, PointerByReference new_stream, PointerByReference original, int new_bpp, int new_width, int new_height, int new_stride, int frame_type, PointerByReference error);
	/**
	 * Allocate new points frame using a frame-source provided from a processing block<br>
	 * \param[in] source      Frame pool to allocate the frame from<br>
	 * \param[in] new_stream  New stream profile to assign to newly created frame<br>
	 * \param[in] original    A reference frame that can be used to fill in auxilary information like format, width, height, bpp, stride (if applicable)<br>
	 * \param[out] error      If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return                reference to a newly allocated frame, must be released with release_frame<br>
	 *                        memory for the frame is likely to be re-used from previous frame, but in lack of available frames in the pool will be allocated from the free store<br>
	 * Original signature : <code>rs2_frame* rs2_allocate_points(rs2_source*, const rs2_stream_profile*, rs2_frame*, rs2_error**)</code><br>
	 * <i>native declaration : line 1411</i><br>
	 * @deprecated use the safer method {@link #rs2_allocate_points(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	PointerByReference rs2_allocate_points(Pointer source, Pointer new_stream, Pointer original, PointerByReference error);
	/**
	 * Allocate new points frame using a frame-source provided from a processing block<br>
	 * \param[in] source      Frame pool to allocate the frame from<br>
	 * \param[in] new_stream  New stream profile to assign to newly created frame<br>
	 * \param[in] original    A reference frame that can be used to fill in auxilary information like format, width, height, bpp, stride (if applicable)<br>
	 * \param[out] error      If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return                reference to a newly allocated frame, must be released with release_frame<br>
	 *                        memory for the frame is likely to be re-used from previous frame, but in lack of available frames in the pool will be allocated from the free store<br>
	 * Original signature : <code>rs2_frame* rs2_allocate_points(rs2_source*, const rs2_stream_profile*, rs2_frame*, rs2_error**)</code><br>
	 * <i>native declaration : line 1411</i>
	 */
	PointerByReference rs2_allocate_points(PointerByReference source, PointerByReference new_stream, PointerByReference original, PointerByReference error);
	/**
	 * Allocate new composite frame, aggregating a set of existing frames<br>
	 * \param[in] source      Frame pool to allocate the frame from<br>
	 * \param[in] frames      Array of existing frames<br>
	 * \param[in] count       Number of input frames<br>
	 * \param[out] error      If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return                reference to a newly allocated frame, must be released with release_frame<br>
	 *                        when composite frame gets released it will automatically release all of the input frames<br>
	 * Original signature : <code>rs2_frame* rs2_allocate_composite_frame(rs2_source*, rs2_frame**, int, rs2_error**)</code><br>
	 * <i>native declaration : line 1422</i><br>
	 * @deprecated use the safer method {@link #rs2_allocate_composite_frame(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	PointerByReference rs2_allocate_composite_frame(Pointer source, PointerByReference frames, int count, PointerByReference error);
	/**
	 * Allocate new composite frame, aggregating a set of existing frames<br>
	 * \param[in] source      Frame pool to allocate the frame from<br>
	 * \param[in] frames      Array of existing frames<br>
	 * \param[in] count       Number of input frames<br>
	 * \param[out] error      If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return                reference to a newly allocated frame, must be released with release_frame<br>
	 *                        when composite frame gets released it will automatically release all of the input frames<br>
	 * Original signature : <code>rs2_frame* rs2_allocate_composite_frame(rs2_source*, rs2_frame**, int, rs2_error**)</code><br>
	 * <i>native declaration : line 1422</i>
	 */
	PointerByReference rs2_allocate_composite_frame(PointerByReference source, PointerByReference frames, int count, PointerByReference error);

	/**
	 * Extract frame from within a composite frame<br>
	 * \param[in] composite   Composite frame<br>
	 * \param[in] index       Index of the frame to extract within the composite frame<br>
	 * \param[out] error      If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return                returns reference to a frame existing within the composite frame<br>
	 *                        If you wish to keep this frame after the composite is released, you need to call acquire_ref<br>
	 *                        Otherwise the resulting frame lifetime is bound by owning composite frame<br>
	 * Original signature : <code>rs2_frame* rs2_extract_frame(rs2_frame*, int, rs2_error**)</code><br>
	 * <i>native declaration : line 1433</i>
	 */
	Realsense2Library.rs2_frame rs2_extract_frame(Realsense2Library.rs2_frame composite, int index, PointerByReference error);

	/**
	 * Get number of frames embedded within a composite frame<br>
	 * \param[in] composite   Composite input frame<br>
	 * \param[out] error      If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return                Number of embedded frames<br>
	 * Original signature : <code>int rs2_embedded_frames_count(rs2_frame*, rs2_error**)</code><br>
	 * <i>native declaration : line 1441</i>
	 */
	int rs2_embedded_frames_count(Realsense2Library.rs2_frame composite, PointerByReference error);

	/**
	 * This method will dispatch frame callback on a frame<br>
	 * \param[in] source      Frame pool provided by the processing block<br>
	 * \param[in] frame       Frame to dispatch, frame ownership is passed to this function, so you don't have to call release_frame after it<br>
	 * \param[out] error      If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_synthetic_frame_ready(rs2_source*, rs2_frame*, rs2_error**)</code><br>
	 * <i>native declaration : line 1449</i>
	 */
	void rs2_synthetic_frame_ready(PointerByReference source, PointerByReference frame, PointerByReference error);
	/**
	 * When called on Pose frame type, this method returns the transformation represented by the pose data<br>
	 * \param[in] frame       Pose frame<br>
	 * \param[out] pose       Pointer to a user allocated struct, which contains the pose info after a successful return<br>
	 * \param[out] error      If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_pose_frame_get_pose_data(const rs2_frame*, rs2_pose*, rs2_error**)</code><br>
	 * <i>native declaration : line 1458</i><br>
	 * @deprecated use the safer method {@link #rs2_pose_frame_get_pose_data(com.sun.jna.ptr.PointerByReference, realsense2.Realsense2Library.rs2_pose, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_pose_frame_get_pose_data(Pointer frame, Realsense2Library.rs2_pose pose, PointerByReference error);
	/**
	 * When called on Pose frame type, this method returns the transformation represented by the pose data<br>
	 * \param[in] frame       Pose frame<br>
	 * \param[out] pose       Pointer to a user allocated struct, which contains the pose info after a successful return<br>
	 * \param[out] error      If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_pose_frame_get_pose_data(const rs2_frame*, rs2_pose*, rs2_error**)</code><br>
	 * <i>native declaration : line 1458</i>
	 */
	void rs2_pose_frame_get_pose_data(Realsense2Library.rs2_frame frame, Realsense2Library.rs2_pose pose, PointerByReference error);
	/**
	 * This function is being deprecated. For existing options it will return option name, but for future API additions the user should call rs2_get_option_name instead.<br>
	 * Original signature : <code>char* rs2_option_to_string(rs2_option)</code><br>
	 * <i>native declaration : line 1532</i>
	 */
	Pointer rs2_option_to_string(int option);
	/**
	 * Original signature : <code>char* rs2_sr300_visual_preset_to_string(rs2_sr300_visual_preset)</code><br>
	 * <i>native declaration : line 1550</i>
	 */
	Pointer rs2_sr300_visual_preset_to_string(int preset);
	/**
	 * Original signature : <code>char* rs2_rs400_visual_preset_to_string(rs2_rs400_visual_preset)</code><br>
	 * <i>native declaration : line 1564</i>
	 */
	Pointer rs2_rs400_visual_preset_to_string(int preset);

	/**
	 * check if an option is read-only<br>
	 * \param[in] sensor   the RealSense sensor<br>
	 * \param[in] option   option id to be checked<br>
	 * \param[out] error   if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return true if option is read-only<br>
	 * Original signature : <code>int rs2_is_option_read_only(const rs2_options*, rs2_option, rs2_error**)</code><br>
	 * <i>native declaration : line 1573</i>
	 */
	int rs2_is_option_read_only(Realsense2Library.rs2_options options, int option, PointerByReference error);

	/**
	 * read option value from the sensor<br>
	 * \param[in] sensor   the RealSense sensor<br>
	 * \param[in] option   option id to be queried<br>
	 * \param[out] error   if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return value of the option<br>
	 * Original signature : <code>float rs2_get_option(const rs2_options*, rs2_option, rs2_error**)</code><br>
	 * <i>native declaration : line 1582</i>
	 */
	float rs2_get_option(Realsense2Library.rs2_options options, int option, PointerByReference error);

	/**
	 * write new value to sensor option<br>
	 * \param[in] sensor     the RealSense sensor<br>
	 * \param[in] option     option id to be queried<br>
	 * \param[in] value      new value for the option<br>
	 * \param[out] error     if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_set_option(const rs2_options*, rs2_option, float, rs2_error**)</code><br>
	 * <i>native declaration : line 1591</i>
	 */
	void rs2_set_option(Realsense2Library.rs2_options options, int option, float value, PointerByReference error);

	/**
	 * get the list of supported options of options container<br>
	 * \param[in] options    the options container<br>
	 * \param[out] error     if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>rs2_options_list* rs2_get_options_list(const rs2_options*, rs2_error**)</code><br>
	 * <i>native declaration : line 1598</i>
	 */
	Realsense2Library.rs2_options_list rs2_get_options_list(Realsense2Library.rs2_options options, PointerByReference error);

	/**
	 * get the size of options list<br>
	 * \param[in] options    the option list<br>
	 * \param[out] error     if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>int rs2_get_options_list_size(const rs2_options_list*, rs2_error**)</code><br>
	 * <i>native declaration : line 1605</i>
	 */
	int rs2_get_options_list_size(Realsense2Library.rs2_options options, PointerByReference error);

	/**
	 * get option name<br>
	 * \param[in] options     options object<br>
	 * \param[in] option      option id to be checked<br>
	 * \param[out] error     if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return human-readable option name<br>
	 * Original signature : <code>char* rs2_get_option_name(const rs2_options*, rs2_option, rs2_error**)</code><br>
	 * <i>native declaration : line 1614</i>
	 */
	Pointer rs2_get_option_name(Realsense2Library.rs2_options options, int option, PointerByReference error);

	/**
	 * get the specific option from options list<br>
	 * \param[in] i    the index of the option<br>
	 * \param[out] error     if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>rs2_option rs2_get_option_from_list(const rs2_options_list*, int, rs2_error**)</code><br>
	 * <i>native declaration : line 1621</i>
	 */
	int rs2_get_option_from_list(Realsense2Library.rs2_options options, int i, PointerByReference error);

	/**
	 * Deletes options list<br>
	 * \param[in] list list to delete<br>
	 * Original signature : <code>void rs2_delete_options_list(rs2_options_list*)</code><br>
	 * <i>native declaration : line 1627</i>
	 */
	void rs2_delete_options_list(Realsense2Library.rs2_options_list list);

	/**
	 * check if particular option is supported by a subdevice<br>
	 * \param[in] sensor     the RealSense sensor<br>
	 * \param[in] option     option id to be checked<br>
	 * \param[out] error     if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return true if option is supported<br>
	 * Original signature : <code>int rs2_supports_option(const rs2_options*, rs2_option, rs2_error**)</code><br>
	 * <i>native declaration : line 1636</i>
	 */
	int rs2_supports_option(Realsense2Library.rs2_options options, int option, PointerByReference error);

	/**
	 * retrieve the available range of values of a supported option<br>
	 * \param[in] sensor  the RealSense device<br>
	 * \param[in] option  the option whose range should be queried<br>
	 * \param[out] min    the minimum value which will be accepted for this option<br>
	 * \param[out] max    the maximum value which will be accepted for this option<br>
	 * \param[out] step   the granularity of options which accept discrete values, or zero if the option accepts continuous values<br>
	 * \param[out] def    the default value of the option<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_get_option_range(const rs2_options*, rs2_option, float*, float*, float*, float*, rs2_error**)</code><br>
	 * <i>native declaration : line 1648</i>
	 */
	void rs2_get_option_range(Realsense2Library.rs2_sensor sensor, int option, FloatBuffer min, FloatBuffer max, FloatBuffer step, FloatBuffer def, PointerByReference error);
	/**
	 * retrieve the available range of values of a supported option<br>
	 * \param[in] sensor  the RealSense device<br>
	 * \param[in] option  the option whose range should be queried<br>
	 * \param[out] min    the minimum value which will be accepted for this option<br>
	 * \param[out] max    the maximum value which will be accepted for this option<br>
	 * \param[out] step   the granularity of options which accept discrete values, or zero if the option accepts continuous values<br>
	 * \param[out] def    the default value of the option<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_get_option_range(const rs2_options*, rs2_option, float*, float*, float*, float*, rs2_error**)</code><br>
	 * <i>native declaration : line 1648</i>
	 */
	void rs2_get_option_range(Realsense2Library.rs2_sensor sensor, int option, FloatByReference min, FloatByReference max, FloatByReference step, FloatByReference def, PointerByReference error);

	/**
	 * get option description<br>
	 * \param[in] sensor     the RealSense sensor<br>
	 * \param[in] option     option id to be checked<br>
	 * \param[out] error     if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return human-readable option description<br>
	 * Original signature : <code>char* rs2_get_option_description(const rs2_options*, rs2_option, rs2_error**)</code><br>
	 * <i>native declaration : line 1657</i>
	 */
	Pointer rs2_get_option_description(Realsense2Library.rs2_options options, int option, PointerByReference error);

	/**
	 * get option value description (in case specific option value hold special meaning)<br>
	 * \param[in] device     the RealSense device<br>
	 * \param[in] option     option id to be checked<br>
	 * \param[in] value      value of the option<br>
	 * \param[out] error     if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return human-readable description of a specific value of an option or null if no special meaning<br>
	 * Original signature : <code>char* rs2_get_option_value_description(const rs2_options*, rs2_option, float, rs2_error**)</code><br>
	 * <i>native declaration : line 1667</i>
	 */
	Pointer rs2_get_option_value_description(Realsense2Library.rs2_options options, int option, float value, PointerByReference error);
	/**
	 * Creates Depth-Colorizer processing block that can be used to quickly visualize the depth data<br>
	 * This block will accept depth frames as input and replace them by depth frames with format RGB8<br>
	 * Non-depth frames are passed through<br>
	 * Further customization will be added soon (format, color-map, histogram equalization control)<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>rs2_processing_block* rs2_create_colorizer(rs2_error**)</code><br>
	 * <i>native declaration : line 1678</i>
	 */
	PointerByReference rs2_create_colorizer(PointerByReference error);
	/**
	 * Creates Sync processing block. This block accepts arbitrary frames and output composite frames of best matches<br>
	 * Some frames may be released within the syncer if they are waiting for match for too long<br>
	 * Syncronization is done (mostly) based on timestamps so good hardware timestamps are a pre-condition<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>rs2_processing_block* rs2_create_sync_processing_block(rs2_error**)</code><br>
	 * <i>native declaration : line 1686</i>
	 */
	PointerByReference rs2_create_sync_processing_block(PointerByReference error);
	/**
	 * Creates Point-Cloud processing block. This block accepts depth frames and outputs Points frames<br>
	 * In addition, given non-depth frame, the block will align texture coordinate to the non-depth stream<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>rs2_processing_block* rs2_create_pointcloud(rs2_error**)</code><br>
	 * <i>native declaration : line 1693</i>
	 */
	PointerByReference rs2_create_pointcloud(PointerByReference error);
	/**
	 * Creates YUY decoder processing block. This block accepts raw YUY frames and outputs frames of other formats.<br>
	 * YUY is a common video format used by a variety of web-cams. It benefits from packing pixels into 2 bytes per pixel<br>
	 * without signficant quality drop. YUY representation can be converted back to more usable RGB form,<br>
	 * but this requires somewhat costly conversion.<br>
	 * The SDK will automatically try to use SSE2 and AVX instructions and CUDA where available to get<br>
	 * best performance. Other implementations (using GLSL, OpenCL, Neon and NCS) should follow.<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>rs2_processing_block* rs2_create_yuy_decoder(rs2_error**)</code><br>
	 * <i>native declaration : line 1704</i>
	 */
	PointerByReference rs2_create_yuy_decoder(PointerByReference error);
	/**
	 * Creates depth thresholding processing block<br>
	 * By controlling min and max options on the block, one could filter out depth values<br>
	 * that are either too large or too small, as a software post-processing step<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>rs2_processing_block* rs2_create_threshold(rs2_error**)</code><br>
	 * <i>native declaration : line 1712</i>
	 */
	PointerByReference rs2_create_threshold(PointerByReference error);
	/**
	 * Creates depth units transformation processing block<br>
	 * All of the pixels are transformed from depth units into meters.<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>rs2_processing_block* rs2_create_units_transform(rs2_error**)</code><br>
	 * <i>native declaration : line 1719</i>
	 */
	PointerByReference rs2_create_units_transform(PointerByReference error);
	/**
	 * This method creates new custom processing block. This lets the users pass frames between module boundaries for processing<br>
	 * This is an infrastructure function aimed at middleware developers, and also used by provided blocks such as sync, colorizer, etc..<br>
	 * \param proc       Processing function to be applied to every frame entering the block<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return           new processing block, to be released by rs2_delete_processing_block<br>
	 * Original signature : <code>rs2_processing_block* rs2_create_processing_block(rs2_frame_processor_callback*, rs2_error**)</code><br>
	 * <i>native declaration : line 1728</i><br>
	 * @deprecated use the safer method {@link #rs2_create_processing_block(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	PointerByReference rs2_create_processing_block(Pointer proc, PointerByReference error);
	/**
	 * This method creates new custom processing block. This lets the users pass frames between module boundaries for processing<br>
	 * This is an infrastructure function aimed at middleware developers, and also used by provided blocks such as sync, colorizer, etc..<br>
	 * \param proc       Processing function to be applied to every frame entering the block<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return           new processing block, to be released by rs2_delete_processing_block<br>
	 * Original signature : <code>rs2_processing_block* rs2_create_processing_block(rs2_frame_processor_callback*, rs2_error**)</code><br>
	 * <i>native declaration : line 1728</i>
	 */
	PointerByReference rs2_create_processing_block(PointerByReference proc, PointerByReference error);
	/**
	 * This method creates new custom processing block from function pointer. This lets the users pass frames between module boundaries for processing<br>
	 * This is an infrastructure function aimed at middleware developers, and also used by provided blocks such as sync, colorizer, etc..<br>
	 * \param proc       Processing function pointer to be applied to every frame entering the block<br>
	 * \param context    User context (can be anything or null) to be passed later as ctx param of the callback<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return           new processing block, to be released by rs2_delete_processing_block<br>
	 * Original signature : <code>rs2_processing_block* rs2_create_processing_block_fptr(rs2_frame_processor_callback_ptr, void*, rs2_error**)</code><br>
	 * <i>native declaration : line 1738</i>
	 */
	PointerByReference rs2_create_processing_block_fptr(Realsense2Library.rs2_frame_processor_callback_ptr proc, Realsense2Library.rs2_context context, PointerByReference error);

	/**
	 * This method adds a custom option to a custom processing block. This is a simple float that can be accessed via rs2_set_option and rs2_get_option<br>
	 * This is an infrastructure function aimed at middleware developers, and also used by provided blocks such as save_to_ply, etc..<br>
	 * \param[in] block      Processing block<br>
	 * \param[in] option_id  an int ID for referencing the option<br>
	 * \param[in] min     the minimum value which will be accepted for this option<br>
	 * \param[in] max     the maximum value which will be accepted for this option<br>
	 * \param[in] step    the granularity of options which accept discrete values, or zero if the option accepts continuous values<br>
	 * \param[in] def     the default value of the option. This will be the initial value.<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return            true if adding the option succeeds. false if it fails e.g. an option with this id is already registered<br>
	 * Original signature : <code>int rs2_processing_block_register_simple_option(rs2_processing_block*, rs2_option, float, float, float, float, rs2_error**)</code><br>
	 * <i>native declaration : line 1752</i>
	 */
	int rs2_processing_block_register_simple_option(PointerByReference block, int option_id, float min, float max, float step, float def, PointerByReference error);

	/**
	 * This method is used to direct the output from the processing block to some callback or sink object<br>
	 * \param[in] block          Processing block<br>
	 * \param[in] on_frame       Callback to be invoked every time the processing block calls frame_ready<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_start_processing(rs2_processing_block*, rs2_frame_callback*, rs2_error**)</code><br>
	 * <i>native declaration : line 1760</i>
	 */
	void rs2_start_processing(PointerByReference block, PointerByReference on_frame, PointerByReference error);

	/**
	 * This method is used to direct the output from the processing block to some callback or sink object<br>
	 * \param[in] block          Processing block<br>
	 * \param[in] on_frame       Callback function to be invoked every time the processing block calls frame_ready<br>
	 * \param[in] user           User context for the callback (can be anything or null)<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_start_processing_fptr(rs2_processing_block*, rs2_frame_callback_ptr, void*, rs2_error**)</code><br>
	 * <i>native declaration : line 1769</i>
	 */
	void rs2_start_processing_fptr(PointerByReference block, Realsense2Library.rs2_frame_callback_ptr on_frame, Pointer user, PointerByReference error);
	/**
	 * This method is used to direct the output from the processing block to a dedicated queue object<br>
	 * \param[in] block          Processing block<br>
	 * \param[in] queue          Queue to place the processed frames to<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_start_processing_queue(rs2_processing_block*, rs2_frame_queue*, rs2_error**)</code><br>
	 * <i>native declaration : line 1777</i><br>
	 * @deprecated use the safer method {@link #rs2_start_processing_queue(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_start_processing_queue(Pointer block, Pointer queue, PointerByReference error);
	/**
	 * This method is used to direct the output from the processing block to a dedicated queue object<br>
	 * \param[in] block          Processing block<br>
	 * \param[in] queue          Queue to place the processed frames to<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_start_processing_queue(rs2_processing_block*, rs2_frame_queue*, rs2_error**)</code><br>
	 * <i>native declaration : line 1777</i>
	 */
	void rs2_start_processing_queue(PointerByReference block, PointerByReference queue, PointerByReference error);
	/**
	 * This method is used to pass frame into a processing block<br>
	 * \param[in] block          Processing block<br>
	 * \param[in] frame          Frame to process, ownership is moved to the block object<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_process_frame(rs2_processing_block*, rs2_frame*, rs2_error**)</code><br>
	 * <i>native declaration : line 1785</i><br>
	 * @deprecated use the safer method {@link #rs2_process_frame(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_process_frame(Pointer block, Pointer frame, PointerByReference error);
	/**
	 * This method is used to pass frame into a processing block<br>
	 * \param[in] block          Processing block<br>
	 * \param[in] frame          Frame to process, ownership is moved to the block object<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_process_frame(rs2_processing_block*, rs2_frame*, rs2_error**)</code><br>
	 * <i>native declaration : line 1785</i>
	 */
	void rs2_process_frame(PointerByReference block, PointerByReference frame, PointerByReference error);
	/**
	 * Deletes the processing block<br>
	 * \param[in] block          Processing block<br>
	 * Original signature : <code>void rs2_delete_processing_block(rs2_processing_block*)</code><br>
	 * <i>native declaration : line 1791</i><br>
	 * @deprecated use the safer method {@link #rs2_delete_processing_block(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_delete_processing_block(Pointer block);
	/**
	 * Deletes the processing block<br>
	 * \param[in] block          Processing block<br>
	 * Original signature : <code>void rs2_delete_processing_block(rs2_processing_block*)</code><br>
	 * <i>native declaration : line 1791</i>
	 */
	void rs2_delete_processing_block(PointerByReference block);
	/**
	 * create frame queue. frame queues are the simplest x-platform synchronization primitive provided by librealsense<br>
	 * to help developers who are not using async APIs<br>
	 * \param[in] capacity max number of frames to allow to be stored in the queue before older frames will start to get dropped<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return handle to the frame queue, must be released using rs2_delete_frame_queue<br>
	 * Original signature : <code>rs2_frame_queue* rs2_create_frame_queue(int, rs2_error**)</code><br>
	 * <i>native declaration : line 1800</i>
	 */
	PointerByReference rs2_create_frame_queue(int capacity, PointerByReference error);
	/**
	 * deletes frame queue and releases all frames inside it<br>
	 * \param[in] queue queue to delete<br>
	 * Original signature : <code>void rs2_delete_frame_queue(rs2_frame_queue*)</code><br>
	 * <i>native declaration : line 1806</i><br>
	 * @deprecated use the safer method {@link #rs2_delete_frame_queue(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_delete_frame_queue(Pointer queue);
	/**
	 * deletes frame queue and releases all frames inside it<br>
	 * \param[in] queue queue to delete<br>
	 * Original signature : <code>void rs2_delete_frame_queue(rs2_frame_queue*)</code><br>
	 * <i>native declaration : line 1806</i>
	 */
	void rs2_delete_frame_queue(PointerByReference queue);
	/**
	 * wait until new frame becomes available in the queue and dequeue it<br>
	 * \param[in] queue the frame queue data structure<br>
	 * \param[in] timeout_ms   max time in milliseconds to wait until an exception will be thrown<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return frame handle to be released using rs2_release_frame<br>
	 * Original signature : <code>rs2_frame* rs2_wait_for_frame(rs2_frame_queue*, unsigned int, rs2_error**)</code><br>
	 * <i>native declaration : line 1815</i><br>
	 * @deprecated use the safer method {@link #rs2_wait_for_frame(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	PointerByReference rs2_wait_for_frame(Pointer queue, int timeout_ms, PointerByReference error);
	/**
	 * wait until new frame becomes available in the queue and dequeue it<br>
	 * \param[in] queue the frame queue data structure<br>
	 * \param[in] timeout_ms   max time in milliseconds to wait until an exception will be thrown<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return frame handle to be released using rs2_release_frame<br>
	 * Original signature : <code>rs2_frame* rs2_wait_for_frame(rs2_frame_queue*, unsigned int, rs2_error**)</code><br>
	 * <i>native declaration : line 1815</i>
	 */
	PointerByReference rs2_wait_for_frame(PointerByReference queue, int timeout_ms, PointerByReference error);
	/**
	 * poll if a new frame is available and dequeue if it is<br>
	 * \param[in] queue the frame queue data structure<br>
	 * \param[out] output_frame frame handle to be released using rs2_release_frame<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return true if new frame was stored to output_frame<br>
	 * Original signature : <code>int rs2_poll_for_frame(rs2_frame_queue*, rs2_frame**, rs2_error**)</code><br>
	 * <i>native declaration : line 1824</i><br>
	 * @deprecated use the safer method {@link #rs2_poll_for_frame(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	int rs2_poll_for_frame(Pointer queue, PointerByReference output_frame, PointerByReference error);
	/**
	 * poll if a new frame is available and dequeue if it is<br>
	 * \param[in] queue the frame queue data structure<br>
	 * \param[out] output_frame frame handle to be released using rs2_release_frame<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return true if new frame was stored to output_frame<br>
	 * Original signature : <code>int rs2_poll_for_frame(rs2_frame_queue*, rs2_frame**, rs2_error**)</code><br>
	 * <i>native declaration : line 1824</i>
	 */
	int rs2_poll_for_frame(PointerByReference queue, PointerByReference output_frame, PointerByReference error);
	/**
	 * wait until new frame becomes available in the queue and dequeue it<br>
	 * \param[in] queue          the frame queue data structure<br>
	 * \param[in] timeout_ms     max time in milliseconds to wait until a frame becomes available<br>
	 * \param[out] output_frame  frame handle to be released using rs2_release_frame<br>
	 * \param[out] error         if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return true if new frame was stored to output_frame<br>
	 * Original signature : <code>int rs2_try_wait_for_frame(rs2_frame_queue*, unsigned int, rs2_frame**, rs2_error**)</code><br>
	 * <i>native declaration : line 1834</i><br>
	 * @deprecated use the safer method {@link #rs2_try_wait_for_frame(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	int rs2_try_wait_for_frame(Pointer queue, int timeout_ms, PointerByReference output_frame, PointerByReference error);
	/**
	 * wait until new frame becomes available in the queue and dequeue it<br>
	 * \param[in] queue          the frame queue data structure<br>
	 * \param[in] timeout_ms     max time in milliseconds to wait until a frame becomes available<br>
	 * \param[out] output_frame  frame handle to be released using rs2_release_frame<br>
	 * \param[out] error         if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return true if new frame was stored to output_frame<br>
	 * Original signature : <code>int rs2_try_wait_for_frame(rs2_frame_queue*, unsigned int, rs2_frame**, rs2_error**)</code><br>
	 * <i>native declaration : line 1834</i>
	 */
	int rs2_try_wait_for_frame(PointerByReference queue, int timeout_ms, PointerByReference output_frame, PointerByReference error);
	/**
	 * enqueue new frame into a queue<br>
	 * \param[in] frame frame handle to enqueue (this operation passed ownership to the queue)<br>
	 * \param[in] queue the frame queue data structure<br>
	 * Original signature : <code>void rs2_enqueue_frame(rs2_frame*, void*)</code><br>
	 * <i>native declaration : line 1841</i><br>
	 * @deprecated use the safer method {@link #rs2_enqueue_frame(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer)} instead
	 */
	@Deprecated
	void rs2_enqueue_frame(Pointer frame, Pointer queue);
	/**
	 * enqueue new frame into a queue<br>
	 * \param[in] frame frame handle to enqueue (this operation passed ownership to the queue)<br>
	 * \param[in] queue the frame queue data structure<br>
	 * Original signature : <code>void rs2_enqueue_frame(rs2_frame*, void*)</code><br>
	 * <i>native declaration : line 1841</i>
	 */
	void rs2_enqueue_frame(PointerByReference frame, Pointer queue);
	/**
	 * Creates Align processing block.<br>
	 * \param[in] align_to   stream type to be used as the target of frameset alignment<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>rs2_processing_block* rs2_create_align(rs2_stream, rs2_error**)</code><br>
	 * <i>native declaration : line 1848</i>
	 */
	PointerByReference rs2_create_align(int align_to, PointerByReference error);
	/**
	 * Creates Depth post-processing filter block. This block accepts depth frames, applies decimation filter and plots modified prames<br>
	 * Note that due to the modifiedframe size, the decimated frame repaces the original one<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>rs2_processing_block* rs2_create_decimation_filter_block(rs2_error**)</code><br>
	 * <i>native declaration : line 1855</i>
	 */
	PointerByReference rs2_create_decimation_filter_block(PointerByReference error);
	/**
	 * Creates Depth post-processing filter block. This block accepts depth frames, applies temporal filter<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>rs2_processing_block* rs2_create_temporal_filter_block(rs2_error**)</code><br>
	 * <i>native declaration : line 1861</i>
	 */
	PointerByReference rs2_create_temporal_filter_block(PointerByReference error);
	/**
	 * Creates Depth post-processing spatial filter block. This block accepts depth frames, applies spatial filters and plots modified prames<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>rs2_processing_block* rs2_create_spatial_filter_block(rs2_error**)</code><br>
	 * <i>native declaration : line 1867</i>
	 */
	PointerByReference rs2_create_spatial_filter_block(PointerByReference error);
	/**
	 * Creates a post processing block that provides for depth<->disparity domain transformation for stereo-based depth modules<br>
	 * \param[in] transform_to_disparity flag select the transform direction:  true = depth->disparity, and vice versa<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>rs2_processing_block* rs2_create_disparity_transform_block(unsigned char, rs2_error**)</code><br>
	 * <i>native declaration : line 1874</i>
	 */
	PointerByReference rs2_create_disparity_transform_block(byte transform_to_disparity, PointerByReference error);
	/**
	 * Creates Depth post-processing hole filling block. The filter replaces empty pixels with data from adjacent pixels based on the method selected<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>rs2_processing_block* rs2_create_hole_filling_filter_block(rs2_error**)</code><br>
	 * <i>native declaration : line 1880</i>
	 */
	PointerByReference rs2_create_hole_filling_filter_block(PointerByReference error);
	/**
	 * Creates a rates printer block. The printer prints the actual FPS of the invoked frame stream.<br>
	 * The block ignores reapiting frames and calculats the FPS only if the frame number of the relevant frame was changed.<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>rs2_processing_block* rs2_create_rates_printer_block(rs2_error**)</code><br>
	 * <i>native declaration : line 1887</i>
	 */
	PointerByReference rs2_create_rates_printer_block(PointerByReference error);
	/**
	 * Creates Depth post-processing zero order fix block. The filter invalidates pixels that has a wrong value due to zero order effect<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return               zero order fix processing block<br>
	 * Original signature : <code>rs2_processing_block* rs2_create_zero_order_invalidation_block(rs2_error**)</code><br>
	 * <i>native declaration : line 1894</i>
	 */
	PointerByReference rs2_create_zero_order_invalidation_block(PointerByReference error);
	/**
	 * Retrieve processing block specific information, like name.<br>
	 * \param[in]  block     The processing block<br>
	 * \param[in]  info      processing block info type to retrieve<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return               The requested processing block info string, in a format specific to the device model<br>
	 * Original signature : <code>char* rs2_get_processing_block_info(const rs2_processing_block*, rs2_camera_info, rs2_error**)</code><br>
	 * <i>native declaration : line 1903</i><br>
	 * @deprecated use the safer method {@link #rs2_get_processing_block_info(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	Pointer rs2_get_processing_block_info(Pointer block, int info, PointerByReference error);
	/**
	 * Retrieve processing block specific information, like name.<br>
	 * \param[in]  block     The processing block<br>
	 * \param[in]  info      processing block info type to retrieve<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return               The requested processing block info string, in a format specific to the device model<br>
	 * Original signature : <code>char* rs2_get_processing_block_info(const rs2_processing_block*, rs2_camera_info, rs2_error**)</code><br>
	 * <i>native declaration : line 1903</i>
	 */
	Pointer rs2_get_processing_block_info(PointerByReference block, int info, PointerByReference error);
	/**
	 * Check if a processing block supports a specific info type.<br>
	 * \param[in]  block     The processing block to check<br>
	 * \param[in]  info      The parameter to check for support<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return               True if the parameter both exist and well-defined for the specific device<br>
	 * Original signature : <code>int rs2_supports_processing_block_info(const rs2_processing_block*, rs2_camera_info, rs2_error**)</code><br>
	 * <i>native declaration : line 1912</i><br>
	 * @deprecated use the safer method {@link #rs2_supports_processing_block_info(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	int rs2_supports_processing_block_info(Pointer block, int info, PointerByReference error);
	/**
	 * Check if a processing block supports a specific info type.<br>
	 * \param[in]  block     The processing block to check<br>
	 * \param[in]  info      The parameter to check for support<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return               True if the parameter both exist and well-defined for the specific device<br>
	 * Original signature : <code>int rs2_supports_processing_block_info(const rs2_processing_block*, rs2_camera_info, rs2_error**)</code><br>
	 * <i>native declaration : line 1912</i>
	 */
	int rs2_supports_processing_block_info(PointerByReference block, int info, PointerByReference error);
	/**
	 * Test if the given processing block can be extended to the requested extension<br>
	 * \param[in] block processing block<br>
	 * \param[in] extension The extension to which the sensor should be tested if it is extendable<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return non-zero value iff the processing block can be extended to the given extension<br>
	 * Original signature : <code>int rs2_is_processing_block_extendable_to(const rs2_processing_block*, rs2_extension, rs2_error**)</code><br>
	 * <i>native declaration : line 1921</i><br>
	 * @deprecated use the safer method {@link #rs2_is_processing_block_extendable_to(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	int rs2_is_processing_block_extendable_to(Pointer block, int extension_type, PointerByReference error);
	/**
	 * Test if the given processing block can be extended to the requested extension<br>
	 * \param[in] block processing block<br>
	 * \param[in] extension The extension to which the sensor should be tested if it is extendable<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return non-zero value iff the processing block can be extended to the given extension<br>
	 * Original signature : <code>int rs2_is_processing_block_extendable_to(const rs2_processing_block*, rs2_extension, rs2_error**)</code><br>
	 * <i>native declaration : line 1921</i>
	 */
	int rs2_is_processing_block_extendable_to(PointerByReference block, int extension_type, PointerByReference error);
	/**
	 * Original signature : <code>char* rs2_playback_status_to_string(rs2_playback_status)</code><br>
	 * <i>native declaration : line 1934</i>
	 */
	Pointer rs2_playback_status_to_string(int status);
	/**
	 * Creates a recording device to record the given device and save it to the given file<br>
	 * \param[in]  device    The device to record<br>
	 * \param[in]  file      The desired path to which the recorder should save the data<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return A pointer to a device that records its data to file, or null in case of failure<br>
	 * Original signature : <code>rs2_device* rs2_create_record_device(const rs2_device*, const char*, rs2_error**)</code><br>
	 * <i>native declaration : line 1945</i><br>
	 * @deprecated use the safer methods {@link #rs2_create_record_device(com.sun.jna.ptr.PointerByReference, java.lang.String, com.sun.jna.ptr.PointerByReference)} and {@link #rs2_create_record_device(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	PointerByReference rs2_create_record_device(Pointer device, Pointer file, PointerByReference error);
	/**
	 * Creates a recording device to record the given device and save it to the given file<br>
	 * \param[in]  device    The device to record<br>
	 * \param[in]  file      The desired path to which the recorder should save the data<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return A pointer to a device that records its data to file, or null in case of failure<br>
	 * Original signature : <code>rs2_device* rs2_create_record_device(const rs2_device*, const char*, rs2_error**)</code><br>
	 * <i>native declaration : line 1945</i>
	 */
	PointerByReference rs2_create_record_device(PointerByReference device, String file, PointerByReference error);
	/**
	 * Creates a recording device to record the given device and save it to the given file<br>
	 * \param[in]  device    The device to record<br>
	 * \param[in]  file      The desired path to which the recorder should save the data<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return A pointer to a device that records its data to file, or null in case of failure<br>
	 * Original signature : <code>rs2_device* rs2_create_record_device(const rs2_device*, const char*, rs2_error**)</code><br>
	 * <i>native declaration : line 1945</i>
	 */
	PointerByReference rs2_create_record_device(PointerByReference device, Pointer file, PointerByReference error);
	/**
	 * Creates a recording device to record the given device and save it to the given file<br>
	 * \param[in]  device                The device to record<br>
	 * \param[in]  file                  The desired path to which the recorder should save the data<br>
	 * \param[in]  compression_enabled   Indicates if compression is enabled, 0 means false, otherwise true<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return A pointer to a device that records its data to file, or null in case of failure<br>
	 * Original signature : <code>rs2_device* rs2_create_record_device_ex(const rs2_device*, const char*, int, rs2_error**)</code><br>
	 * <i>native declaration : line 1955</i><br>
	 * @deprecated use the safer methods {@link #rs2_create_record_device_ex(com.sun.jna.ptr.PointerByReference, java.lang.String, int, com.sun.jna.ptr.PointerByReference)} and {@link #rs2_create_record_device_ex(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	PointerByReference rs2_create_record_device_ex(Pointer device, Pointer file, int compression_enabled, PointerByReference error);
	/**
	 * Creates a recording device to record the given device and save it to the given file<br>
	 * \param[in]  device                The device to record<br>
	 * \param[in]  file                  The desired path to which the recorder should save the data<br>
	 * \param[in]  compression_enabled   Indicates if compression is enabled, 0 means false, otherwise true<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return A pointer to a device that records its data to file, or null in case of failure<br>
	 * Original signature : <code>rs2_device* rs2_create_record_device_ex(const rs2_device*, const char*, int, rs2_error**)</code><br>
	 * <i>native declaration : line 1955</i>
	 */
	PointerByReference rs2_create_record_device_ex(PointerByReference device, String file, int compression_enabled, PointerByReference error);
	/**
	 * Creates a recording device to record the given device and save it to the given file<br>
	 * \param[in]  device                The device to record<br>
	 * \param[in]  file                  The desired path to which the recorder should save the data<br>
	 * \param[in]  compression_enabled   Indicates if compression is enabled, 0 means false, otherwise true<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return A pointer to a device that records its data to file, or null in case of failure<br>
	 * Original signature : <code>rs2_device* rs2_create_record_device_ex(const rs2_device*, const char*, int, rs2_error**)</code><br>
	 * <i>native declaration : line 1955</i>
	 */
	PointerByReference rs2_create_record_device_ex(PointerByReference device, Pointer file, int compression_enabled, PointerByReference error);
	/**
	 * Pause the recording device without stopping the actual device from streaming.<br>
	 * Pausing will cause the device to stop writing new data to the file, in particular, frames and changes to extensions<br>
	 * \param[in]  device    A recording device<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_record_device_pause(const rs2_device*, rs2_error**)</code><br>
	 * <i>native declaration : line 1963</i><br>
	 * @deprecated use the safer method {@link #rs2_record_device_pause(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_record_device_pause(Pointer device, PointerByReference error);
	/**
	 * Pause the recording device without stopping the actual device from streaming.<br>
	 * Pausing will cause the device to stop writing new data to the file, in particular, frames and changes to extensions<br>
	 * \param[in]  device    A recording device<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_record_device_pause(const rs2_device*, rs2_error**)</code><br>
	 * <i>native declaration : line 1963</i>
	 */
	void rs2_record_device_pause(PointerByReference device, PointerByReference error);
	/**
	 * Unpause the recording device. Resume will cause the device to continue writing new data to the file, in particular, frames and changes to extensions<br>
	 * \param[in]  device    A recording device<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_record_device_resume(const rs2_device*, rs2_error**)</code><br>
	 * <i>native declaration : line 1970</i><br>
	 * @deprecated use the safer method {@link #rs2_record_device_resume(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_record_device_resume(Pointer device, PointerByReference error);
	/**
	 * Unpause the recording device. Resume will cause the device to continue writing new data to the file, in particular, frames and changes to extensions<br>
	 * \param[in]  device    A recording device<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_record_device_resume(const rs2_device*, rs2_error**)</code><br>
	 * <i>native declaration : line 1970</i>
	 */
	void rs2_record_device_resume(PointerByReference device, PointerByReference error);
	/**
	 * Gets the name of the file to which the recorder is writing<br>
	 * \param[in]  device    A recording device<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return The  name of the file to which the recorder is writing<br>
	 * Original signature : <code>char* rs2_record_device_filename(const rs2_device*, rs2_error**)</code><br>
	 * <i>native declaration : line 1978</i><br>
	 * @deprecated use the safer method {@link #rs2_record_device_filename(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	Pointer rs2_record_device_filename(Pointer device, PointerByReference error);
	/**
	 * Gets the name of the file to which the recorder is writing<br>
	 * \param[in]  device    A recording device<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return The  name of the file to which the recorder is writing<br>
	 * Original signature : <code>char* rs2_record_device_filename(const rs2_device*, rs2_error**)</code><br>
	 * <i>native declaration : line 1978</i>
	 */
	Pointer rs2_record_device_filename(PointerByReference device, PointerByReference error);
	/**
	 * Creates a playback device to play the content of the given file<br>
	 * \param[in]  file      Path to the file to play<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return A pointer to a device that plays data from the file, or null in case of failure<br>
	 * Original signature : <code>rs2_device* rs2_create_playback_device(const char*, rs2_error**)</code><br>
	 * <i>native declaration : line 1986</i><br>
	 * @deprecated use the safer methods {@link #rs2_create_playback_device(java.lang.String, com.sun.jna.ptr.PointerByReference)} and {@link #rs2_create_playback_device(com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	PointerByReference rs2_create_playback_device(Pointer file, PointerByReference error);
	/**
	 * Creates a playback device to play the content of the given file<br>
	 * \param[in]  file      Path to the file to play<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return A pointer to a device that plays data from the file, or null in case of failure<br>
	 * Original signature : <code>rs2_device* rs2_create_playback_device(const char*, rs2_error**)</code><br>
	 * <i>native declaration : line 1986</i>
	 */
	PointerByReference rs2_create_playback_device(String file, PointerByReference error);
	/**
	 * Gets the path of the file used by the playback device<br>
	 * \param[in] device A playback device<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return Path to the file used by the playback device<br>
	 * Original signature : <code>char* rs2_playback_device_get_file_path(const rs2_device*, rs2_error**)</code><br>
	 * <i>native declaration : line 1994</i><br>
	 * @deprecated use the safer method {@link #rs2_playback_device_get_file_path(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	Pointer rs2_playback_device_get_file_path(Pointer device, PointerByReference error);
	/**
	 * Gets the path of the file used by the playback device<br>
	 * \param[in] device A playback device<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return Path to the file used by the playback device<br>
	 * Original signature : <code>char* rs2_playback_device_get_file_path(const rs2_device*, rs2_error**)</code><br>
	 * <i>native declaration : line 1994</i>
	 */
	Pointer rs2_playback_device_get_file_path(PointerByReference device, PointerByReference error);
	/**
	 * Gets the total duration of the file in units of nanoseconds<br>
	 * \param[in] device     A playback device<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return Total duration of the file in units of nanoseconds<br>
	 * Original signature : <code>long long rs2_playback_get_duration(const rs2_device*, rs2_error**)</code><br>
	 * <i>native declaration : line 2002</i><br>
	 * @deprecated use the safer method {@link #rs2_playback_get_duration(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	NativeLong rs2_playback_get_duration(Pointer device, PointerByReference error);
	/**
	 * Gets the total duration of the file in units of nanoseconds<br>
	 * \param[in] device     A playback device<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return Total duration of the file in units of nanoseconds<br>
	 * Original signature : <code>long long rs2_playback_get_duration(const rs2_device*, rs2_error**)</code><br>
	 * <i>native declaration : line 2002</i>
	 */
	NativeLong rs2_playback_get_duration(PointerByReference device, PointerByReference error);
	/**
	 * Set the playback to a specified time point of the played data<br>
	 * \param[in] device     A playback device.<br>
	 * \param[in] time       The time point to which playback should seek, expressed in units of nanoseconds (zero value = start)<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_playback_seek(const rs2_device*, long long, rs2_error**)</code><br>
	 * <i>native declaration : line 2010</i><br>
	 * @deprecated use the safer method {@link #rs2_playback_seek(com.sun.jna.ptr.PointerByReference, com.sun.jna.NativeLong, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_playback_seek(Pointer device, NativeLong time, PointerByReference error);
	/**
	 * Set the playback to a specified time point of the played data<br>
	 * \param[in] device     A playback device.<br>
	 * \param[in] time       The time point to which playback should seek, expressed in units of nanoseconds (zero value = start)<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_playback_seek(const rs2_device*, long long, rs2_error**)</code><br>
	 * <i>native declaration : line 2010</i>
	 */
	void rs2_playback_seek(PointerByReference device, NativeLong time, PointerByReference error);
	/**
	 * Gets the current position of the playback in the file in terms of time. Units are expressed in nanoseconds<br>
	 * \param[in] device     A playback device<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return Current position of the playback in the file in terms of time. Units are expressed in nanoseconds<br>
	 * Original signature : <code>long long rs2_playback_get_position(const rs2_device*, rs2_error**)</code><br>
	 * <i>native declaration : line 2018</i><br>
	 * @deprecated use the safer method {@link #rs2_playback_get_position(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	NativeLong rs2_playback_get_position(Pointer device, PointerByReference error);
	/**
	 * Gets the current position of the playback in the file in terms of time. Units are expressed in nanoseconds<br>
	 * \param[in] device     A playback device<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return Current position of the playback in the file in terms of time. Units are expressed in nanoseconds<br>
	 * Original signature : <code>long long rs2_playback_get_position(const rs2_device*, rs2_error**)</code><br>
	 * <i>native declaration : line 2018</i>
	 */
	NativeLong rs2_playback_get_position(PointerByReference device, PointerByReference error);
	/**
	 * Pauses the playback<br>
	 * Calling pause() in "Paused" status does nothing<br>
	 * If pause() is called while playback status is "Playing" or "Stopped", the playback will not play until resume() is called<br>
	 * \param[in] device A playback device<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_playback_device_resume(const rs2_device*, rs2_error**)</code><br>
	 * <i>native declaration : line 2027</i><br>
	 * @deprecated use the safer method {@link #rs2_playback_device_resume(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_playback_device_resume(Pointer device, PointerByReference error);
	/**
	 * Pauses the playback<br>
	 * Calling pause() in "Paused" status does nothing<br>
	 * If pause() is called while playback status is "Playing" or "Stopped", the playback will not play until resume() is called<br>
	 * \param[in] device A playback device<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_playback_device_resume(const rs2_device*, rs2_error**)</code><br>
	 * <i>native declaration : line 2027</i>
	 */
	void rs2_playback_device_resume(PointerByReference device, PointerByReference error);
	/**
	 * Un-pauses the playback<br>
	 * Calling resume() while playback status is "Playing" or "Stopped" does nothing<br>
	 * \param[in] device A playback device<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_playback_device_pause(const rs2_device*, rs2_error**)</code><br>
	 * <i>native declaration : line 2035</i><br>
	 * @deprecated use the safer method {@link #rs2_playback_device_pause(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_playback_device_pause(Pointer device, PointerByReference error);
	/**
	 * Un-pauses the playback<br>
	 * Calling resume() while playback status is "Playing" or "Stopped" does nothing<br>
	 * \param[in] device A playback device<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_playback_device_pause(const rs2_device*, rs2_error**)</code><br>
	 * <i>native declaration : line 2035</i>
	 */
	void rs2_playback_device_pause(PointerByReference device, PointerByReference error);
	/**
	 * Set the playback to work in real time or non real time<br>
	 * * In real time mode, playback will play the same way the file was recorded.<br>
	 * In real time mode if the application takes too long to handle the callback, frames may be dropped.<br>
	 * In non real time mode, playback will wait for each callback to finish handling the data before<br>
	 * reading the next frame. In this mode no frames will be dropped, and the application controls the<br>
	 * frame rate of the playback (according to the callback handler duration).<br>
	 * \param[in] device A playback device<br>
	 * \param[in] real_time  Indicates if real time is requested, 0 means false, otherwise true<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_playback_device_set_real_time(const rs2_device*, int, rs2_error**)</code><br>
	 * <i>native declaration : line 2049</i><br>
	 * @deprecated use the safer method {@link #rs2_playback_device_set_real_time(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_playback_device_set_real_time(Pointer device, int real_time, PointerByReference error);
	/**
	 * Set the playback to work in real time or non real time<br>
	 * * In real time mode, playback will play the same way the file was recorded.<br>
	 * In real time mode if the application takes too long to handle the callback, frames may be dropped.<br>
	 * In non real time mode, playback will wait for each callback to finish handling the data before<br>
	 * reading the next frame. In this mode no frames will be dropped, and the application controls the<br>
	 * frame rate of the playback (according to the callback handler duration).<br>
	 * \param[in] device A playback device<br>
	 * \param[in] real_time  Indicates if real time is requested, 0 means false, otherwise true<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_playback_device_set_real_time(const rs2_device*, int, rs2_error**)</code><br>
	 * <i>native declaration : line 2049</i>
	 */
	void rs2_playback_device_set_real_time(PointerByReference device, int real_time, PointerByReference error);
	/**
	 * Indicates if playback is in real time mode or non real time<br>
	 * \param[in] device A playback device<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return True iff playback is in real time mode. 0 means false, otherwise true<br>
	 * Original signature : <code>int rs2_playback_device_is_real_time(const rs2_device*, rs2_error**)</code><br>
	 * <i>native declaration : line 2057</i><br>
	 * @deprecated use the safer method {@link #rs2_playback_device_is_real_time(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	int rs2_playback_device_is_real_time(Pointer device, PointerByReference error);
	/**
	 * Indicates if playback is in real time mode or non real time<br>
	 * \param[in] device A playback device<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return True iff playback is in real time mode. 0 means false, otherwise true<br>
	 * Original signature : <code>int rs2_playback_device_is_real_time(const rs2_device*, rs2_error**)</code><br>
	 * <i>native declaration : line 2057</i>
	 */
	int rs2_playback_device_is_real_time(PointerByReference device, PointerByReference error);
	/**
	 * Register to receive callback from playback device upon its status changes<br>
	 * * Callbacks are invoked from the reading thread, any heavy processing in the callback handler will affect<br>
	 * the reading thread and may cause frame drops\ high latency<br>
	 * \param[in] device     A playback device<br>
	 * \param[in] callback   A callback handler that will be invoked when the playback status changes<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_playback_device_set_status_changed_callback(const rs2_device*, rs2_playback_status_changed_callback*, rs2_error**)</code><br>
	 * <i>native declaration : line 2068</i><br>
	 * @deprecated use the safer method {@link #rs2_playback_device_set_status_changed_callback(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_playback_device_set_status_changed_callback(Pointer device, Pointer callback, PointerByReference error);
	/**
	 * Register to receive callback from playback device upon its status changes<br>
	 * * Callbacks are invoked from the reading thread, any heavy processing in the callback handler will affect<br>
	 * the reading thread and may cause frame drops\ high latency<br>
	 * \param[in] device     A playback device<br>
	 * \param[in] callback   A callback handler that will be invoked when the playback status changes<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_playback_device_set_status_changed_callback(const rs2_device*, rs2_playback_status_changed_callback*, rs2_error**)</code><br>
	 * <i>native declaration : line 2068</i>
	 */
	void rs2_playback_device_set_status_changed_callback(PointerByReference device, PointerByReference callback, PointerByReference error);
	/**
	 * Returns the current state of the playback device<br>
	 * \param[in] device     A playback device<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return Current state of the playback<br>
	 * Original signature : <code>rs2_playback_status rs2_playback_device_get_current_status(const rs2_device*, rs2_error**)</code><br>
	 * <i>native declaration : line 2076</i><br>
	 * @deprecated use the safer method {@link #rs2_playback_device_get_current_status(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	int rs2_playback_device_get_current_status(Pointer device, PointerByReference error);
	/**
	 * Returns the current state of the playback device<br>
	 * \param[in] device     A playback device<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return Current state of the playback<br>
	 * Original signature : <code>rs2_playback_status rs2_playback_device_get_current_status(const rs2_device*, rs2_error**)</code><br>
	 * <i>native declaration : line 2076</i>
	 */
	int rs2_playback_device_get_current_status(PointerByReference device, PointerByReference error);
	/**
	 * Set the playing speed<br>
	 * * \param[in] device A playback device<br>
	 * \param[in] speed  Indicates a multiplication of the speed to play (e.g: 1 = normal, 0.5 twice as slow)<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_playback_device_set_playback_speed(const rs2_device*, float, rs2_error**)</code><br>
	 * <i>native declaration : line 2085</i><br>
	 * @deprecated use the safer method {@link #rs2_playback_device_set_playback_speed(com.sun.jna.ptr.PointerByReference, float, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_playback_device_set_playback_speed(Pointer device, float speed, PointerByReference error);
	/**
	 * Set the playing speed<br>
	 * * \param[in] device A playback device<br>
	 * \param[in] speed  Indicates a multiplication of the speed to play (e.g: 1 = normal, 0.5 twice as slow)<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_playback_device_set_playback_speed(const rs2_device*, float, rs2_error**)</code><br>
	 * <i>native declaration : line 2085</i>
	 */
	void rs2_playback_device_set_playback_speed(PointerByReference device, float speed, PointerByReference error);
	/**
	 * Stops the playback<br>
	 * Calling stop() will stop all streaming playbakc sensors and will reset the playback (returning to beginning of file)<br>
	 * \param[in] device A playback device<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_playback_device_stop(const rs2_device*, rs2_error**)</code><br>
	 * <i>native declaration : line 2093</i><br>
	 * @deprecated use the safer method {@link #rs2_playback_device_stop(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_playback_device_stop(Pointer device, PointerByReference error);
	/**
	 * Stops the playback<br>
	 * Calling stop() will stop all streaming playbakc sensors and will reset the playback (returning to beginning of file)<br>
	 * \param[in] device A playback device<br>
	 * \param[out] error     If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_playback_device_stop(const rs2_device*, rs2_error**)</code><br>
	 * <i>native declaration : line 2093</i>
	 */
	void rs2_playback_device_stop(PointerByReference device, PointerByReference error);
	/**
	 * Create librealsense context that will try to record all operations over librealsense into a file<br>
	 * \param[in] api_version realsense API version as provided by RS2_API_VERSION macro<br>
	 * \param[in] filename string representing the name of the file to record<br>
	 * \param[in] section  string representing the name of the section within existing recording<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return            context object, should be released by rs2_delete_context<br>
	 * Original signature : <code>rs2_context* rs2_create_recording_context(int, const char*, const char*, rs2_recording_mode, rs2_error**)</code><br>
	 * <i>native declaration : line 2198</i><br>
	 * @deprecated use the safer methods {@link #rs2_create_recording_context(int, java.lang.String, java.lang.String, int, com.sun.jna.ptr.PointerByReference)} and {@link #rs2_create_recording_context(int, com.sun.jna.Pointer, com.sun.jna.Pointer, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	PointerByReference rs2_create_recording_context(int api_version, Pointer filename, Pointer section, int mode, PointerByReference error);
	/**
	 * Create librealsense context that will try to record all operations over librealsense into a file<br>
	 * \param[in] api_version realsense API version as provided by RS2_API_VERSION macro<br>
	 * \param[in] filename string representing the name of the file to record<br>
	 * \param[in] section  string representing the name of the section within existing recording<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return            context object, should be released by rs2_delete_context<br>
	 * Original signature : <code>rs2_context* rs2_create_recording_context(int, const char*, const char*, rs2_recording_mode, rs2_error**)</code><br>
	 * <i>native declaration : line 2198</i>
	 */
	PointerByReference rs2_create_recording_context(int api_version, String filename, String section, int mode, PointerByReference error);
	/**
	 * Create librealsense context that given a file will respond to calls exactly as the recording did<br>
	 * if the user calls a method that was either not called during recording or violates causality of the recording error will be thrown<br>
	 * \param[in] api_version realsense API version as provided by RS2_API_VERSION macro<br>
	 * \param[in] filename string representing the name of the file to play back from<br>
	 * \param[in] section  string representing the name of the section within existing recording<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return            context object, should be released by rs2_delete_context<br>
	 * Original signature : <code>rs2_context* rs2_create_mock_context(int, const char*, const char*, rs2_error**)</code><br>
	 * <i>native declaration : line 2209</i><br>
	 * @deprecated use the safer methods {@link #rs2_create_mock_context(int, java.lang.String, java.lang.String, com.sun.jna.ptr.PointerByReference)} and {@link #rs2_create_mock_context(int, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	PointerByReference rs2_create_mock_context(int api_version, Pointer filename, Pointer section, PointerByReference error);
	/**
	 * Create librealsense context that given a file will respond to calls exactly as the recording did<br>
	 * if the user calls a method that was either not called during recording or violates causality of the recording error will be thrown<br>
	 * \param[in] api_version realsense API version as provided by RS2_API_VERSION macro<br>
	 * \param[in] filename string representing the name of the file to play back from<br>
	 * \param[in] section  string representing the name of the section within existing recording<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return            context object, should be released by rs2_delete_context<br>
	 * Original signature : <code>rs2_context* rs2_create_mock_context(int, const char*, const char*, rs2_error**)</code><br>
	 * <i>native declaration : line 2209</i>
	 */
	PointerByReference rs2_create_mock_context(int api_version, String filename, String section, PointerByReference error);
	/**
	 * Create librealsense context that given a file will respond to calls exactly as the recording did<br>
	 * if the user calls a method that was either not called during recording or violates causality of the recording error will be thrown<br>
	 * \param[in] api_version realsense API version as provided by RS2_API_VERSION macro<br>
	 * \param[in] filename string representing the name of the file to play back from<br>
	 * \param[in] section  string representing the name of the section within existing recording<br>
	 * \param[in] min_api_version reject any file that was recorded before this version<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return            context object, should be released by rs2_delete_context<br>
	 * Original signature : <code>rs2_context* rs2_create_mock_context_versioned(int, const char*, const char*, const char*, rs2_error**)</code><br>
	 * <i>native declaration : line 2221</i><br>
	 * @deprecated use the safer methods {@link #rs2_create_mock_context_versioned(int, java.lang.String, java.lang.String, java.lang.String, com.sun.jna.ptr.PointerByReference)} and {@link #rs2_create_mock_context_versioned(int, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	PointerByReference rs2_create_mock_context_versioned(int api_version, Pointer filename, Pointer section, Pointer min_api_version, PointerByReference error);
	/**
	 * Create librealsense context that given a file will respond to calls exactly as the recording did<br>
	 * if the user calls a method that was either not called during recording or violates causality of the recording error will be thrown<br>
	 * \param[in] api_version realsense API version as provided by RS2_API_VERSION macro<br>
	 * \param[in] filename string representing the name of the file to play back from<br>
	 * \param[in] section  string representing the name of the section within existing recording<br>
	 * \param[in] min_api_version reject any file that was recorded before this version<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return            context object, should be released by rs2_delete_context<br>
	 * Original signature : <code>rs2_context* rs2_create_mock_context_versioned(int, const char*, const char*, const char*, rs2_error**)</code><br>
	 * <i>native declaration : line 2221</i>
	 */
	PointerByReference rs2_create_mock_context_versioned(int api_version, String filename, String section, String min_api_version, PointerByReference error);
	/**
	 * Create software device to enable use librealsense logic without getting data from backend<br>
	 * but inject the data from outside<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return            software device object, should be released by rs2_delete_device<br>
	 * Original signature : <code>rs2_device* rs2_create_software_device(rs2_error**)</code><br>
	 * <i>native declaration : line 2229</i>
	 */
	PointerByReference rs2_create_software_device(PointerByReference error);
	/**
	 * Add sensor to the software device<br>
	 * \param[in] dev the software device<br>
	 * \param[in] sensor_name the name of the sensor<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return            software sensor object, should be released by rs2_delete_sensor<br>
	 * Original signature : <code>rs2_sensor* rs2_software_device_add_sensor(rs2_device*, const char*, rs2_error**)</code><br>
	 * <i>native declaration : line 2238</i><br>
	 * @deprecated use the safer methods {@link #rs2_software_device_add_sensor(com.sun.jna.ptr.PointerByReference, java.lang.String, com.sun.jna.ptr.PointerByReference)} and {@link #rs2_software_device_add_sensor(com.sun.jna.ptr.PointerByReference, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	PointerByReference rs2_software_device_add_sensor(Pointer dev, Pointer sensor_name, PointerByReference error);
	/**
	 * Add sensor to the software device<br>
	 * \param[in] dev the software device<br>
	 * \param[in] sensor_name the name of the sensor<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return            software sensor object, should be released by rs2_delete_sensor<br>
	 * Original signature : <code>rs2_sensor* rs2_software_device_add_sensor(rs2_device*, const char*, rs2_error**)</code><br>
	 * <i>native declaration : line 2238</i>
	 */
	PointerByReference rs2_software_device_add_sensor(PointerByReference dev, String sensor_name, PointerByReference error);
	/**
	 * Add sensor to the software device<br>
	 * \param[in] dev the software device<br>
	 * \param[in] sensor_name the name of the sensor<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return            software sensor object, should be released by rs2_delete_sensor<br>
	 * Original signature : <code>rs2_sensor* rs2_software_device_add_sensor(rs2_device*, const char*, rs2_error**)</code><br>
	 * <i>native declaration : line 2238</i>
	 */
	PointerByReference rs2_software_device_add_sensor(PointerByReference dev, Pointer sensor_name, PointerByReference error);
	/**
	 * Inject video frame to software sonsor<br>
	 * \param[in] sensor the software sensor<br>
	 * \param[in] frame all the frame components<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_software_sensor_on_video_frame(rs2_sensor*, rs2_software_video_frame, rs2_error**)</code><br>
	 * <i>native declaration : line 2246</i><br>
	 * @deprecated use the safer method {@link #rs2_software_sensor_on_video_frame(com.sun.jna.ptr.PointerByReference, realsense2.Realsense2Library.rs2_software_video_frame.ByValue, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_software_sensor_on_video_frame(Pointer sensor, Realsense2Library.rs2_software_video_frame.ByValue frame, PointerByReference error);
	/**
	 * Inject video frame to software sonsor<br>
	 * \param[in] sensor the software sensor<br>
	 * \param[in] frame all the frame components<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_software_sensor_on_video_frame(rs2_sensor*, rs2_software_video_frame, rs2_error**)</code><br>
	 * <i>native declaration : line 2246</i>
	 */
	void rs2_software_sensor_on_video_frame(PointerByReference sensor, Realsense2Library.rs2_software_video_frame.ByValue frame, PointerByReference error);
	/**
	 * Inject motion frame to software sonsor<br>
	 * \param[in] sensor the software sensor<br>
	 * \param[in] frame all the frame components<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_software_sensor_on_motion_frame(rs2_sensor*, rs2_software_motion_frame, rs2_error**)</code><br>
	 * <i>native declaration : line 2254</i><br>
	 * @deprecated use the safer method {@link #rs2_software_sensor_on_motion_frame(com.sun.jna.ptr.PointerByReference, realsense2.Realsense2Library.rs2_software_motion_frame.ByValue, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_software_sensor_on_motion_frame(Pointer sensor, Realsense2Library.rs2_software_motion_frame.ByValue frame, PointerByReference error);
	/**
	 * Inject motion frame to software sonsor<br>
	 * \param[in] sensor the software sensor<br>
	 * \param[in] frame all the frame components<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_software_sensor_on_motion_frame(rs2_sensor*, rs2_software_motion_frame, rs2_error**)</code><br>
	 * <i>native declaration : line 2254</i>
	 */
	void rs2_software_sensor_on_motion_frame(PointerByReference sensor, Realsense2Library.rs2_software_motion_frame.ByValue frame, PointerByReference error);
	/**
	 * Inject pose frame to software sonsor<br>
	 * \param[in] sensor the software sensor<br>
	 * \param[in] frame all the frame components<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_software_sensor_on_pose_frame(rs2_sensor*, rs2_software_pose_frame, rs2_error**)</code><br>
	 * <i>native declaration : line 2262</i><br>
	 * @deprecated use the safer method {@link #rs2_software_sensor_on_pose_frame(com.sun.jna.ptr.PointerByReference, realsense2.Realsense2Library.rs2_software_pose_frame.ByValue, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_software_sensor_on_pose_frame(Pointer sensor, Realsense2Library.rs2_software_pose_frame.ByValue frame, PointerByReference error);
	/**
	 * Inject pose frame to software sonsor<br>
	 * \param[in] sensor the software sensor<br>
	 * \param[in] frame all the frame components<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_software_sensor_on_pose_frame(rs2_sensor*, rs2_software_pose_frame, rs2_error**)</code><br>
	 * <i>native declaration : line 2262</i>
	 */
	void rs2_software_sensor_on_pose_frame(PointerByReference sensor, Realsense2Library.rs2_software_pose_frame.ByValue frame, PointerByReference error);
	/**
	 * Set frame metadata for the upcoming frames<br>
	 * \param[in] sensor the software sensor<br>
	 * \param[in] value metadata key to set<br>
	 * \param[in] type metadata value<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_software_sensor_set_metadata(rs2_sensor*, rs2_frame_metadata_value, rs2_metadata_type, rs2_error**)</code><br>
	 * <i>native declaration : line 2271</i><br>
	 * @deprecated use the safer method {@link #rs2_software_sensor_set_metadata(com.sun.jna.ptr.PointerByReference, int, long, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_software_sensor_set_metadata(Pointer sensor, int value, long type, PointerByReference error);
	/**
	 * Set frame metadata for the upcoming frames<br>
	 * \param[in] sensor the software sensor<br>
	 * \param[in] value metadata key to set<br>
	 * \param[in] type metadata value<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_software_sensor_set_metadata(rs2_sensor*, rs2_frame_metadata_value, rs2_metadata_type, rs2_error**)</code><br>
	 * <i>native declaration : line 2271</i>
	 */
	void rs2_software_sensor_set_metadata(PointerByReference sensor, int value, long type, PointerByReference error);
	/**
	 * Set the wanted matcher type that will be used by the syncer<br>
	 * \param[in] dev the software device<br>
	 * \param[in] matcher matcher type<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_software_device_create_matcher(rs2_device*, rs2_matchers, rs2_error**)</code><br>
	 * <i>native declaration : line 2279</i><br>
	 * @deprecated use the safer method {@link #rs2_software_device_create_matcher(com.sun.jna.ptr.PointerByReference, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_software_device_create_matcher(Pointer dev, int matcher, PointerByReference error);
	/**
	 * Set the wanted matcher type that will be used by the syncer<br>
	 * \param[in] dev the software device<br>
	 * \param[in] matcher matcher type<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_software_device_create_matcher(rs2_device*, rs2_matchers, rs2_error**)</code><br>
	 * <i>native declaration : line 2279</i>
	 */
	void rs2_software_device_create_matcher(PointerByReference dev, int matcher, PointerByReference error);
	/**
	 * Add video stream to sensor<br>
	 * \param[in] sensor the software sensor<br>
	 * \param[in] video_stream all the stream components<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>rs2_stream_profile* rs2_software_sensor_add_video_stream(rs2_sensor*, rs2_video_stream, rs2_error**)</code><br>
	 * <i>native declaration : line 2287</i><br>
	 * @deprecated use the safer method {@link #rs2_software_sensor_add_video_stream(com.sun.jna.ptr.PointerByReference, realsense2.Realsense2Library.rs2_video_stream.ByValue, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	PointerByReference rs2_software_sensor_add_video_stream(Pointer sensor, Realsense2Library.rs2_video_stream.ByValue video_stream, PointerByReference error);
	/**
	 * Add video stream to sensor<br>
	 * \param[in] sensor the software sensor<br>
	 * \param[in] video_stream all the stream components<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>rs2_stream_profile* rs2_software_sensor_add_video_stream(rs2_sensor*, rs2_video_stream, rs2_error**)</code><br>
	 * <i>native declaration : line 2287</i>
	 */
	PointerByReference rs2_software_sensor_add_video_stream(PointerByReference sensor, Realsense2Library.rs2_video_stream.ByValue video_stream, PointerByReference error);
	/**
	 * Add motion stream to sensor<br>
	 * \param[in] sensor the software sensor<br>
	 * \param[in] video_stream all the stream components<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>rs2_stream_profile* rs2_software_sensor_add_motion_stream(rs2_sensor*, rs2_motion_stream, rs2_error**)</code><br>
	 * <i>native declaration : line 2295</i><br>
	 * @deprecated use the safer method {@link #rs2_software_sensor_add_motion_stream(com.sun.jna.ptr.PointerByReference, realsense2.Realsense2Library.rs2_motion_stream.ByValue, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	PointerByReference rs2_software_sensor_add_motion_stream(Pointer sensor, Realsense2Library.rs2_motion_stream.ByValue motion_stream, PointerByReference error);
	/**
	 * Add motion stream to sensor<br>
	 * \param[in] sensor the software sensor<br>
	 * \param[in] video_stream all the stream components<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>rs2_stream_profile* rs2_software_sensor_add_motion_stream(rs2_sensor*, rs2_motion_stream, rs2_error**)</code><br>
	 * <i>native declaration : line 2295</i>
	 */
	PointerByReference rs2_software_sensor_add_motion_stream(PointerByReference sensor, Realsense2Library.rs2_motion_stream.ByValue motion_stream, PointerByReference error);
	/**
	 * Add pose stream to sensor<br>
	 * \param[in] sensor the software sensor<br>
	 * \param[in] video_stream all the stream components<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>rs2_stream_profile* rs2_software_sensor_add_pose_stream(rs2_sensor*, rs2_pose_stream, rs2_error**)</code><br>
	 * <i>native declaration : line 2303</i><br>
	 * @deprecated use the safer method {@link #rs2_software_sensor_add_pose_stream(com.sun.jna.ptr.PointerByReference, realsense2.Realsense2Library.rs2_pose_stream.ByValue, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	PointerByReference rs2_software_sensor_add_pose_stream(Pointer sensor, Realsense2Library.rs2_pose_stream.ByValue pose_stream, PointerByReference error);
	/**
	 * Add pose stream to sensor<br>
	 * \param[in] sensor the software sensor<br>
	 * \param[in] video_stream all the stream components<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>rs2_stream_profile* rs2_software_sensor_add_pose_stream(rs2_sensor*, rs2_pose_stream, rs2_error**)</code><br>
	 * <i>native declaration : line 2303</i>
	 */
	PointerByReference rs2_software_sensor_add_pose_stream(PointerByReference sensor, Realsense2Library.rs2_pose_stream.ByValue pose_stream, PointerByReference error);
	/**
	 * Add read only option to sensor<br>
	 * \param[in] sensor the software sensor<br>
	 * \param[in] option the wanted option<br>
	 * \param[in] val the initial value<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_software_sensor_add_read_only_option(rs2_sensor*, rs2_option, float, rs2_error**)</code><br>
	 * <i>native declaration : line 2312</i><br>
	 * @deprecated use the safer method {@link #rs2_software_sensor_add_read_only_option(com.sun.jna.ptr.PointerByReference, int, float, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_software_sensor_add_read_only_option(Pointer sensor, int option, float val, PointerByReference error);
	/**
	 * Add read only option to sensor<br>
	 * \param[in] sensor the software sensor<br>
	 * \param[in] option the wanted option<br>
	 * \param[in] val the initial value<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_software_sensor_add_read_only_option(rs2_sensor*, rs2_option, float, rs2_error**)</code><br>
	 * <i>native declaration : line 2312</i>
	 */
	void rs2_software_sensor_add_read_only_option(PointerByReference sensor, int option, float val, PointerByReference error);
	/**
	 * Update the read only option added to sensor<br>
	 * \param[in] sensor the software sensor<br>
	 * \param[in] option the wanted option<br>
	 * \param[in] val the wanted value<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_software_sensor_update_read_only_option(rs2_sensor*, rs2_option, float, rs2_error**)</code><br>
	 * <i>native declaration : line 2321</i><br>
	 * @deprecated use the safer method {@link #rs2_software_sensor_update_read_only_option(com.sun.jna.ptr.PointerByReference, int, float, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_software_sensor_update_read_only_option(Pointer sensor, int option, float val, PointerByReference error);
	/**
	 * Update the read only option added to sensor<br>
	 * \param[in] sensor the software sensor<br>
	 * \param[in] option the wanted option<br>
	 * \param[in] val the wanted value<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_software_sensor_update_read_only_option(rs2_sensor*, rs2_option, float, rs2_error**)</code><br>
	 * <i>native declaration : line 2321</i>
	 */
	void rs2_software_sensor_update_read_only_option(PointerByReference sensor, int option, float val, PointerByReference error);
	/**
	 * Create a config instance<br>
	 * The config allows pipeline users to request filters for the pipeline streams and device selection and configuration.<br>
	 * This is an optional step in pipeline creation, as the pipeline resolves its streaming device internally.<br>
	 * Config provides its users a way to set the filters and test if there is no conflict with the pipeline requirements<br>
	 * from the device. It also allows the user to find a matching device for the config filters and the pipeline, in order to<br>
	 * select a device explicitly, and modify its controls before streaming starts.<br>
	 * * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return rs2_config*  A pointer to a new config instance<br>
	 * Original signature : <code>rs2_config* rs2_create_config(rs2_error**)</code><br>
	 * <i>native declaration : line 2337</i>
	 */
	Realsense2Library.rs2_config rs2_create_config(PointerByReference error);

	/**
	 * Deletes an instance of a config<br>
	 * * \param[in] config    A pointer to an instance of a config<br>
	 * Original signature : <code>void rs2_delete_config(rs2_config*)</code><br>
	 * <i>native declaration : line 2344</i>
	 */
	void rs2_delete_config(Realsense2Library.rs2_config config);

	/**
	 * Enable a device stream explicitly, with selected stream parameters.<br>
	 * The method allows the application to request a stream with specific configuration. If no stream is explicitly enabled, the pipeline<br>
	 * configures the device and its streams according to the attached computer vision modules and processing blocks requirements, or<br>
	 * default configuration for the first available device.<br>
	 * The application can configure any of the input stream parameters according to its requirement, or set to 0 for don't care value.<br>
	 * The config accumulates the application calls for enable configuration methods, until the configuration is applied. Multiple enable<br>
	 * stream calls for the same stream with conflicting parameters override each other, and the last call is maintained.<br>
	 * Upon calling \c resolve(), the config checks for conflicts between the application configuration requests and the attached computer<br>
	 * vision modules and processing blocks requirements, and fails if conflicts are found. Before \c resolve() is called, no conflict<br>
	 * check is done.<br>
	 * * \param[in] config    A pointer to an instance of a config<br>
	 * \param[in] stream    Stream type to be enabled<br>
	 * \param[in] index     Stream index, used for multiple streams of the same type. -1 indicates any.<br>
	 * \param[in] width     Stream image width - for images streams. 0 indicates any.<br>
	 * \param[in] height    Stream image height - for images streams. 0 indicates any.<br>
	 * \param[in] format    Stream data format - pixel format for images streams, of data type for other streams. RS2_FORMAT_ANY indicates any.<br>
	 * \param[in] framerate Stream frames per second. 0 indicates any.<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_config_enable_stream(rs2_config*, rs2_stream, int, int, int, rs2_format, int, rs2_error**)</code><br>
	 * <i>native declaration : line 2367</i>
	 */
	void rs2_config_enable_stream(Realsense2Library.rs2_config config, int stream, int index, int width, int height, int format, int framerate, PointerByReference error);

	/**
	 * Enable all device streams explicitly.<br>
	 * The conditions and behavior of this method are similar to those of \c enable_stream().<br>
	 * This filter enables all raw streams of the selected device. The device is either selected explicitly by the application,<br>
	 * or by the pipeline requirements or default. The list of streams is device dependent.<br>
	 * * \param[in] config    A pointer to an instance of a config<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_config_enable_all_stream(rs2_config*, rs2_error**)</code><br>
	 * <i>native declaration : line 2385</i>
	 */
	void rs2_config_enable_all_stream(PointerByReference config, PointerByReference error);

	/**
	 * Select a specific device explicitly by its serial number, to be used by the pipeline.<br>
	 * The conditions and behavior of this method are similar to those of \c enable_stream().<br>
	 * This method is required if the application needs to set device or sensor settings prior to pipeline streaming, to enforce<br>
	 * the pipeline to use the configured device.<br>
	 * * \param[in] config    A pointer to an instance of a config<br>
	 * \param[in] serial device serial number, as returned by RS2_CAMERA_INFO_SERIAL_NUMBER<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_config_enable_device(rs2_config*, const char*, rs2_error**)</code><br>
	 * <i>native declaration : line 2397</i>
	 */
	void rs2_config_enable_device(Realsense2Library.rs2_config config, String serial, PointerByReference error);
	/**
	 * Select a specific device explicitly by its serial number, to be used by the pipeline.<br>
	 * The conditions and behavior of this method are similar to those of \c enable_stream().<br>
	 * This method is required if the application needs to set device or sensor settings prior to pipeline streaming, to enforce<br>
	 * the pipeline to use the configured device.<br>
	 * * \param[in] config    A pointer to an instance of a config<br>
	 * \param[in] serial device serial number, as returned by RS2_CAMERA_INFO_SERIAL_NUMBER<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_config_enable_device(rs2_config*, const char*, rs2_error**)</code><br>
	 * <i>native declaration : line 2397</i>
	 */
	void rs2_config_enable_device(Realsense2Library.rs2_config config, Pointer serial, PointerByReference error);

	/**
	 * Select a recorded device from a file, to be used by the pipeline through playback.<br>
	 * The device available streams are as recorded to the file, and \c resolve() considers only this device and configuration<br>
	 * as available.<br>
	 * This request cannot be used if enable_record_to_file() is called for the current config, and vise versa<br>
	 * By default, playback is repeated once the file ends. To control this, see 'rs2_config_enable_device_from_file_repeat_option'.<br>
	 * * \param[in] config    A pointer to an instance of a config<br>
	 * \param[in] file      The playback file of the device<br>
	 * \param[out] error    if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_config_enable_device_from_file(rs2_config*, const char*, rs2_error**)</code><br>
	 * <i>native declaration : line 2410</i>
	 */
	void rs2_config_enable_device_from_file(Realsense2Library.rs2_config config, String file, PointerByReference error);
	/**
	 * Select a recorded device from a file, to be used by the pipeline through playback.<br>
	 * The device available streams are as recorded to the file, and \c resolve() considers only this device and configuration<br>
	 * as available.<br>
	 * This request cannot be used if enable_record_to_file() is called for the current config, and vise versa<br>
	 * By default, playback is repeated once the file ends. To control this, see 'rs2_config_enable_device_from_file_repeat_option'.<br>
	 * * \param[in] config    A pointer to an instance of a config<br>
	 * \param[in] file      The playback file of the device<br>
	 * \param[out] error    if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_config_enable_device_from_file(rs2_config*, const char*, rs2_error**)</code><br>
	 * <i>native declaration : line 2410</i>
	 */
	void rs2_config_enable_device_from_file(Realsense2Library.rs2_config config, Pointer file, PointerByReference error);

	/**
	 * Select a recorded device from a file, to be used by the pipeline through playback.<br>
	 * The device available streams are as recorded to the file, and \c resolve() considers only this device and configuration<br>
	 * as available.<br>
	 * This request cannot be used if enable_record_to_file() is called for the current config, and vise versa<br>
	 * * \param[in] config           A pointer to an instance of a config<br>
	 * \param[in] file             The playback file of the device<br>
	 * \param[in] repeat_playback  if true, when file ends the playback starts again, in an infinite loop;<br>
	 * if false, when file ends playback does not start again, and should by stopped manually by the user.<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_config_enable_device_from_file_repeat_option(rs2_config*, const char*, int, rs2_error**)</code><br>
	 * <i>native declaration : line 2424</i>
	 */
	void rs2_config_enable_device_from_file_repeat_option(Realsense2Library.rs2_config config, String file, int repeat_playback, PointerByReference error);
	/**
	 * Select a recorded device from a file, to be used by the pipeline through playback.<br>
	 * The device available streams are as recorded to the file, and \c resolve() considers only this device and configuration<br>
	 * as available.<br>
	 * This request cannot be used if enable_record_to_file() is called for the current config, and vise versa<br>
	 * * \param[in] config           A pointer to an instance of a config<br>
	 * \param[in] file             The playback file of the device<br>
	 * \param[in] repeat_playback  if true, when file ends the playback starts again, in an infinite loop;<br>
	 * if false, when file ends playback does not start again, and should by stopped manually by the user.<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_config_enable_device_from_file_repeat_option(rs2_config*, const char*, int, rs2_error**)</code><br>
	 * <i>native declaration : line 2424</i>
	 */
	void rs2_config_enable_device_from_file_repeat_option(Realsense2Library.rs2_config config, Pointer file, int repeat_playback, PointerByReference error);

	/**
	 * Requires that the resolved device would be recorded to file<br>
	 * This request cannot be used if enable_device_from_file() is called for the current config, and vise versa<br>
	 * * \param[in] config    A pointer to an instance of a config<br>
	 * \param[in] file      The desired file for the output record<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_config_enable_record_to_file(rs2_config*, const char*, rs2_error**)</code><br>
	 * <i>native declaration : line 2434</i>
	 */
	void rs2_config_enable_record_to_file(Realsense2Library.rs2_config config, String file, PointerByReference error);
	/**
	 * Requires that the resolved device would be recorded to file<br>
	 * This request cannot be used if enable_device_from_file() is called for the current config, and vise versa<br>
	 * * \param[in] config    A pointer to an instance of a config<br>
	 * \param[in] file      The desired file for the output record<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_config_enable_record_to_file(rs2_config*, const char*, rs2_error**)</code><br>
	 * <i>native declaration : line 2434</i>
	 */
	void rs2_config_enable_record_to_file(Realsense2Library.rs2_config config, Pointer file, PointerByReference error);

	/**
	 * Disable a device stream explicitly, to remove any requests on this stream type.<br>
	 * The stream can still be enabled due to pipeline computer vision module request. This call removes any filter on the<br>
	 * stream configuration.<br>
	 * * \param[in] config    A pointer to an instance of a config<br>
	 * \param[in] stream    Stream type, for which the filters are cleared<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_config_disable_stream(rs2_config*, rs2_stream, rs2_error**)</code><br>
	 * <i>native declaration : line 2446</i>
	 */
	void rs2_config_disable_stream(Realsense2Library.rs2_config config, int stream, PointerByReference error);

	/**
	 * Disable a device stream explicitly, to remove any requests on this stream profile.<br>
	 * The stream can still be enabled due to pipeline computer vision module request. This call removes any filter on the<br>
	 * stream configuration.<br>
	 * * \param[in] config    A pointer to an instance of a config<br>
	 * \param[in] stream    Stream type, for which the filters are cleared<br>
	 * \param[in] index     Stream index, for which the filters are cleared<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_config_disable_indexed_stream(rs2_config*, rs2_stream, int, rs2_error**)</code><br>
	 * <i>native declaration : line 2458</i>
	 */
	void rs2_config_disable_indexed_stream(Realsense2Library.rs2_config config, int stream, int index, PointerByReference error);

	/**
	 * Disable all device stream explicitly, to remove any requests on the streams profiles.<br>
	 * The streams can still be enabled due to pipeline computer vision module request. This call removes any filter on the<br>
	 * streams configuration.<br>
	 * * \param[in] config    A pointer to an instance of a config<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_config_disable_all_streams(rs2_config*, rs2_error**)</code><br>
	 * <i>native declaration : line 2468</i>
	 */
	void rs2_config_disable_all_streams(Realsense2Library.rs2_config config, PointerByReference error);

	/**
	 * Resolve the configuration filters, to find a matching device and streams profiles.<br>
	 * The method resolves the user configuration filters for the device and streams, and combines them with the requirements of<br>
	 * the computer vision modules and processing blocks attached to the pipeline. If there are no conflicts of requests, it looks<br>
	 * for an available device, which can satisfy all requests, and selects the first matching streams configuration. In the absence<br>
	 * of any request, the rs2::config selects the first available device and the first color and depth streams configuration.<br>
	 * The pipeline profile selection during \c start() follows the same method. Thus, the selected profile is the same, if no<br>
	 * change occurs to the available devices occurs.<br>
	 * Resolving the pipeline configuration provides the application access to the pipeline selected device for advanced control.<br>
	 * The returned configuration is not applied to the device, so the application doesn't own the device sensors. However, the<br>
	 * application can call \c enable_device(), to enforce the device returned by this method is selected by pipeline \c start(),<br>
	 * and configure the device and sensors options or extensions before streaming starts.<br>
	 * * \param[in] config    A pointer to an instance of a config<br>
	 * \param[in] pipe  The pipeline for which the selected filters are applied<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return       A matching device and streams profile, which satisfies the filters and pipeline requests.<br>
	 * Original signature : <code>rs2_pipeline_profile* rs2_config_resolve(rs2_config*, rs2_pipeline*, rs2_error**)</code><br>
	 * <i>native declaration : line 2488</i>
	 */
	PointerByReference rs2_config_resolve(Realsense2Library.rs2_config config, PointerByReference pipe, PointerByReference error);

	/**
	 * Check if the config can resolve the configuration filters, to find a matching device and streams profiles.<br>
	 * The resolution conditions are as described in \c resolve().<br>
	 * * \param[in] config    A pointer to an instance of a config<br>
	 * \param[in] pipe  The pipeline for which the selected filters are applied<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return       True if a valid profile selection exists, false if no selection can be found under the config filters and the available devices.<br>
	 * Original signature : <code>int rs2_config_can_resolve(rs2_config*, rs2_pipeline*, rs2_error**)</code><br>
	 * <i>native declaration : line 2499</i>
	 */
	int rs2_config_can_resolve(Realsense2Library.rs2_config config, Realsense2Library.rs2_pipeline pipe, PointerByReference error);

	/**
	 * Create a pipeline instance<br>
	 * The pipeline simplifies the user interaction with the device and computer vision processing modules.<br>
	 * The class abstracts the camera configuration and streaming, and the vision modules triggering and threading.<br>
	 * It lets the application focus on the computer vision output of the modules, or the device output data.<br>
	 * The pipeline can manage computer vision modules, which are implemented as a processing blocks.<br>
	 * The pipeline is the consumer of the processing block interface, while the application consumes the<br>
	 * computer vision interface.<br>
	 * \param[in]  ctx    context<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>rs2_pipeline* rs2_create_pipeline(rs2_context*, rs2_error**)</code><br>
	 * <i>native declaration : line 2515</i>
	 */
	Realsense2Library.rs2_pipeline rs2_create_pipeline(Realsense2Library.rs2_context ctx, PointerByReference error);

	/**
	 * Stop the pipeline streaming.<br>
	 * The pipeline stops delivering samples to the attached computer vision modules and processing blocks, stops the device streaming<br>
	 * and releases the device resources used by the pipeline. It is the application's responsibility to release any frame reference it owns.<br>
	 * The method takes effect only after \c start() was called, otherwise an exception is raised.<br>
	 * \param[in] pipe  pipeline<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_pipeline_stop(rs2_pipeline*, rs2_error**)</code><br>
	 * <i>native declaration : line 2525</i>
	 */
	void rs2_pipeline_stop(Realsense2Library.rs2_pipeline pipe, PointerByReference error);

	/**
	 * Wait until a new set of frames becomes available.<br>
	 * The frames set includes time-synchronized frames of each enabled stream in the pipeline.<br>
	 * The method blocks the calling thread, and fetches the latest unread frames set.<br>
	 * Device frames, which were produced while the function wasn't called, are dropped. To avoid frame drops, this method should be called<br>
	 * as fast as the device frame rate.<br>
	 * The application can maintain the frames handles to defer processing. However, if the application maintains too long history, the device<br>
	 * may lack memory resources to produce new frames, and the following call to this method shall fail to retrieve new frames, until resources<br>
	 * are retained.<br>
	 * \param[in] pipe the pipeline<br>
	 * \param[in] timeout_ms   Max time in milliseconds to wait until an exception will be thrown<br>
	 * \param[out] error         if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return Set of coherent frames<br>
	 * Original signature : <code>rs2_frame* rs2_pipeline_wait_for_frames(rs2_pipeline*, unsigned int, rs2_error**)</code><br>
	 * <i>native declaration : line 2541</i>
	 */
	Realsense2Library.rs2_frame rs2_pipeline_wait_for_frames(Realsense2Library.rs2_pipeline pipe, int timeout_ms, PointerByReference error);

	/**
	 * Check if a new set of frames is available and retrieve the latest undelivered set.<br>
	 * The frames set includes time-synchronized frames of each enabled stream in the pipeline.<br>
	 * The method returns without blocking the calling thread, with status of new frames available or not. If available, it fetches the<br>
	 * latest frames set.<br>
	 * Device frames, which were produced while the function wasn't called, are dropped. To avoid frame drops, this method should be called<br>
	 * as fast as the device frame rate.<br>
	 * The application can maintain the frames handles to defer processing. However, if the application maintains too long history, the device<br>
	 * may lack memory resources to produce new frames, and the following calls to this method shall return no new frames, until resources are<br>
	 * retained.<br>
	 * \param[in] pipe the pipeline<br>
	 * \param[out] output_frame frame handle to be released using rs2_release_frame<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return true if new frame was stored to output_frame<br>
	 * Original signature : <code>int rs2_pipeline_poll_for_frames(rs2_pipeline*, rs2_frame**, rs2_error**)</code><br>
	 * <i>native declaration : line 2558</i>
	 */
	int rs2_pipeline_poll_for_frames(Realsense2Library.rs2_pipeline pipe, PointerByReference output_frame, PointerByReference error);

	/**
	 * Wait until a new set of frames becomes available.<br>
	 * The frames set includes time-synchronized frames of each enabled stream in the pipeline.<br>
	 * The method blocks the calling thread, and fetches the latest unread frames set.<br>
	 * Device frames, which were produced while the function wasn't called, are dropped. To avoid frame drops, this method should be called<br>
	 * as fast as the device frame rate.<br>
	 * The application can maintain the frames handles to defer processing. However, if the application maintains too long history, the device<br>
	 * may lack memory resources to produce new frames, and the following call to this method shall fail to retrieve new frames, until resources<br>
	 * are retained.<br>
	 * \param[in] pipe           the pipeline<br>
	 * \param[in] timeout_ms     max time in milliseconds to wait until a frame becomes available<br>
	 * \param[out] output_frame  frame handle to be released using rs2_release_frame<br>
	 * \param[out] error         if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return true if new frame was stored to output_frame<br>
	 * Original signature : <code>int rs2_pipeline_try_wait_for_frames(rs2_pipeline*, rs2_frame**, unsigned int, rs2_error**)</code><br>
	 * <i>native declaration : line 2575</i>
	 */
	int rs2_pipeline_try_wait_for_frames(Realsense2Library.rs2_pipeline pipe, PointerByReference output_frame, int timeout_ms, PointerByReference error);

	/**
	 * Delete a pipeline instance.<br>
	 * Upon destruction, the pipeline will implicitly stop itself<br>
	 * \param[in] pipe to delete<br>
	 * Original signature : <code>void rs2_delete_pipeline(rs2_pipeline*)</code><br>
	 * <i>native declaration : line 2582</i>
	 */
	void rs2_delete_pipeline(Realsense2Library.rs2_pipeline pipe);

	/**
	 * Start the pipeline streaming with its default configuration.<br>
	 * The pipeline streaming loop captures samples from the device, and delivers them to the attached computer vision modules<br>
	 * and processing blocks, according to each module requirements and threading model.<br>
	 * During the loop execution, the application can access the camera streams by calling \c wait_for_frames() or \c poll_for_frames().<br>
	 * The streaming loop runs until the pipeline is stopped.<br>
	 * Starting the pipeline is possible only when it is not started. If the pipeline was started, an exception is raised.<br>
	 * * \param[in] pipe    a pointer to an instance of the pipeline<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return             The actual pipeline device and streams profile, which was successfully configured to the streaming device.<br>
	 * Original signature : <code>rs2_pipeline_profile* rs2_pipeline_start(rs2_pipeline*, rs2_error**)</code><br>
	 * <i>native declaration : line 2596</i>
	 */
	Realsense2Library.rs2_pipeline_profile rs2_pipeline_start(Realsense2Library.rs2_pipeline pipe, PointerByReference error);

	/**
	 * Start the pipeline streaming according to the configuraion.<br>
	 * The pipeline streaming loop captures samples from the device, and delivers them to the attached computer vision modules<br>
	 * and processing blocks, according to each module requirements and threading model.<br>
	 * During the loop execution, the application can access the camera streams by calling \c wait_for_frames() or \c poll_for_frames().<br>
	 * The streaming loop runs until the pipeline is stopped.<br>
	 * Starting the pipeline is possible only when it is not started. If the pipeline was started, an exception is raised.<br>
	 * The pipeline selects and activates the device upon start, according to configuration or a default configuration.<br>
	 * When the rs2::config is provided to the method, the pipeline tries to activate the config \c resolve() result. If the application<br>
	 * requests are conflicting with pipeline computer vision modules or no matching device is available on the platform, the method fails.<br>
	 * Available configurations and devices may change between config \c resolve() call and pipeline start, in case devices are connected<br>
	 * or disconnected, or another application acquires ownership of a device.<br>
	 * * \param[in] pipe    a pointer to an instance of the pipeline<br>
	 * \param[in] config   A rs2::config with requested filters on the pipeline configuration. By default no filters are applied.<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return             The actual pipeline device and streams profile, which was successfully configured to the streaming device.<br>
	 * Original signature : <code>rs2_pipeline_profile* rs2_pipeline_start_with_config(rs2_pipeline*, rs2_config*, rs2_error**)</code><br>
	 * <i>native declaration : line 2616</i>
	 */
	Realsense2Library.rs2_pipeline_profile rs2_pipeline_start_with_config(Realsense2Library.rs2_pipeline pipe, Realsense2Library.rs2_config config, PointerByReference error);

	/**
	 * Start the pipeline streaming with its default configuration.<br>
	 * The pipeline captures samples from the device, and delivers them to the through the provided frame callback.<br>
	 * Starting the pipeline is possible only when it is not started. If the pipeline was started, an exception is raised.<br>
	 * When starting the pipeline with a callback both \c wait_for_frames() or \c poll_for_frames() will throw exception.<br>
	 * * \param[in] pipe     A pointer to an instance of the pipeline<br>
	 * \param[in] on_frame function pointer to register as per-frame callback<br>
	 * \param[in] user auxiliary  data the user wishes to receive together with every frame callback<br>
	 * \param[out] error   If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return             The actual pipeline device and streams profile, which was successfully configured to the streaming device.<br>
	 * Original signature : <code>rs2_pipeline_profile* rs2_pipeline_start_with_callback(rs2_pipeline*, rs2_frame_callback_ptr, void*, rs2_error**)</code><br>
	 * <i>native declaration : line 2630</i>
	 */
	Realsense2Library.rs2_pipeline_profile rs2_pipeline_start_with_callback(Realsense2Library.rs2_pipeline pipe , Realsense2Library.rs2_frame_callback_ptr on_frame, Pointer user, PointerByReference error);

	/**
	 * Start the pipeline streaming with its default configuration.<br>
	 * The pipeline captures samples from the device, and delivers them to the through the provided frame callback.<br>
	 * Starting the pipeline is possible only when it is not started. If the pipeline was started, an exception is raised.<br>
	 * When starting the pipeline with a callback both \c wait_for_frames() or \c poll_for_frames() will throw exception. <br>
	 * * \param[in] pipe     A pointer to an instance of the pipeline<br>
	 * \param[in] callback callback object created from c++ application. ownership over the callback object is moved into the relevant streaming lock<br>
	 * \param[out] error   If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return             The actual pipeline device and streams profile, which was successfully configured to the streaming device.<br>
	 * Original signature : <code>rs2_pipeline_profile* rs2_pipeline_start_with_callback_cpp(rs2_pipeline*, rs2_frame_callback*, rs2_error**)</code><br>
	 * <i>native declaration : line 2643</i>
	 */
	Realsense2Library.rs2_pipeline_profile rs2_pipeline_start_with_callback_cpp(Realsense2Library.rs2_pipeline pipe , PointerByReference callback, PointerByReference error);
	/**
	 * Start the pipeline streaming according to the configuraion.<br>
	 * The pipeline captures samples from the device, and delivers them to the through the provided frame callback.<br>
	 * Starting the pipeline is possible only when it is not started. If the pipeline was started, an exception is raised.<br>
	 * When starting the pipeline with a callback both \c wait_for_frames() or \c poll_for_frames() will throw exception.<br>
	 * The pipeline selects and activates the device upon start, according to configuration or a default configuration.<br>
	 * When the rs2::config is provided to the method, the pipeline tries to activate the config \c resolve() result. If the application<br>
	 * requests are conflicting with pipeline computer vision modules or no matching device is available on the platform, the method fails.<br>
	 * Available configurations and devices may change between config \c resolve() call and pipeline start, in case devices are connected<br>
	 * or disconnected, or another application acquires ownership of a device.<br>
	 * * \param[in] pipe     A pointer to an instance of the pipeline<br>
	 * \param[in] config   A rs2::config with requested filters on the pipeline configuration. By default no filters are applied.<br>
	 * \param[in] on_frame function pointer to register as per-frame callback<br>
	 * \param[in] user auxiliary  data the user wishes to receive together with every frame callback<br>
	 * \param[out] error   If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return             The actual pipeline device and streams profile, which was successfully configured to the streaming device.<br>
	 * Original signature : <code>rs2_pipeline_profile* rs2_pipeline_start_with_config_and_callback(rs2_pipeline*, rs2_config*, rs2_frame_callback_ptr, void*, rs2_error**)</code><br>
	 * <i>native declaration : line 2663</i>
	 */
	Realsense2Library.rs2_pipeline_profile rs2_pipeline_start_with_config_and_callback(Realsense2Library.rs2_pipeline pipe, Realsense2Library.rs2_config config, Realsense2Library.rs2_frame_callback_ptr on_frame, Pointer user, PointerByReference error);

	/**
	 * Start the pipeline streaming according to the configuraion.<br>
	 * The pipeline captures samples from the device, and delivers them to the through the provided frame callback.<br>
	 * Starting the pipeline is possible only when it is not started. If the pipeline was started, an exception is raised.<br>
	 * When starting the pipeline with a callback both \c wait_for_frames() or \c poll_for_frames() will throw exception.<br>
	 * The pipeline selects and activates the device upon start, according to configuration or a default configuration.<br>
	 * When the rs2::config is provided to the method, the pipeline tries to activate the config \c resolve() result. If the application<br>
	 * requests are conflicting with pipeline computer vision modules or no matching device is available on the platform, the method fails.<br>
	 * Available configurations and devices may change between config \c resolve() call and pipeline start, in case devices are connected<br>
	 * or disconnected, or another application acquires ownership of a device.<br>
	 * * \param[in] pipe     A pointer to an instance of the pipeline<br>
	 * \param[in] config   A rs2::config with requested filters on the pipeline configuration. By default no filters are applied.<br>
	 * \param[in] callback callback object created from c++ application. ownership over the callback object is moved into the relevant streaming lock<br>
	 * \param[out] error   If non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return             The actual pipeline device and streams profile, which was successfully configured to the streaming device.<br>
	 * Original signature : <code>rs2_pipeline_profile* rs2_pipeline_start_with_config_and_callback_cpp(rs2_pipeline*, rs2_config*, rs2_frame_callback*, rs2_error**)</code><br>
	 * <i>native declaration : line 2682</i>
	 */
	Realsense2Library.rs2_pipeline_profile rs2_pipeline_start_with_config_and_callback_cpp(Realsense2Library.rs2_pipeline pipe, Realsense2Library.rs2_config config, PointerByReference callback, PointerByReference error);

	/**
	 * Return the active device and streams profiles, used by the pipeline.<br>
	 * The pipeline streams profiles are selected during \c start(). The method returns a valid result only when the pipeline is active -<br>
	 * between calls to \c start() and \c stop().<br>
	 * After \c stop() is called, the pipeline doesn't own the device, thus, the pipeline selected device may change in subsequent activations.<br>
	 * * \param[in] pipe    a pointer to an instance of the pipeline<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return  The actual pipeline device and streams profile, which was successfully configured to the streaming device on start.<br>
	 * Original signature : <code>rs2_pipeline_profile* rs2_pipeline_get_active_profile(rs2_pipeline*, rs2_error**)</code><br>
	 * <i>native declaration : line 2694</i>
	 */
	Realsense2Library.rs2_pipeline_profile rs2_pipeline_get_active_profile(Realsense2Library.rs2_pipeline pipe, PointerByReference error);
	/**
	 * Retrieve the device used by the pipeline.<br>
	 * The device class provides the application access to control camera additional settings -<br>
	 * get device information, sensor options information, options value query and set, sensor specific extensions.<br>
	 * Since the pipeline controls the device streams configuration, activation state and frames reading, calling<br>
	 * the device API functions, which execute those operations, results in unexpected behavior.<br>
	 * The pipeline streaming device is selected during pipeline \c start(). Devices of profiles, which are not returned by<br>
	 * pipeline \c start() or \c get_active_profile(), are not guaranteed to be used by the pipeline.<br>
	 * * \param[in] profile    A pointer to an instance of a pipeline profile<br>
	 * \param[out] error     if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return rs2_device* The pipeline selected device<br>
	 * Original signature : <code>rs2_device* rs2_pipeline_profile_get_device(rs2_pipeline_profile*, rs2_error**)</code><br>
	 * <i>native declaration : line 2709</i><br>
	 * @deprecated use the safer method {@link #rs2_pipeline_profile_get_device(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	PointerByReference rs2_pipeline_profile_get_device(Pointer profile, PointerByReference error);
	/**
	 * Retrieve the device used by the pipeline.<br>
	 * The device class provides the application access to control camera additional settings -<br>
	 * get device information, sensor options information, options value query and set, sensor specific extensions.<br>
	 * Since the pipeline controls the device streams configuration, activation state and frames reading, calling<br>
	 * the device API functions, which execute those operations, results in unexpected behavior.<br>
	 * The pipeline streaming device is selected during pipeline \c start(). Devices of profiles, which are not returned by<br>
	 * pipeline \c start() or \c get_active_profile(), are not guaranteed to be used by the pipeline.<br>
	 * * \param[in] profile    A pointer to an instance of a pipeline profile<br>
	 * \param[out] error     if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return rs2_device* The pipeline selected device<br>
	 * Original signature : <code>rs2_device* rs2_pipeline_profile_get_device(rs2_pipeline_profile*, rs2_error**)</code><br>
	 * <i>native declaration : line 2709</i>
	 */
	PointerByReference rs2_pipeline_profile_get_device(PointerByReference profile, PointerByReference error);
	/**
	 * Return the selected streams profiles, which are enabled in this profile.<br>
	 * * \param[in] profile    A pointer to an instance of a pipeline profile<br>
	 * \param[out] error     if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return   list of stream profiles<br>
	 * Original signature : <code>rs2_stream_profile_list* rs2_pipeline_profile_get_streams(rs2_pipeline_profile*, rs2_error**)</code><br>
	 * <i>native declaration : line 2718</i><br>
	 * @deprecated use the safer method {@link #rs2_pipeline_profile_get_streams(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	PointerByReference rs2_pipeline_profile_get_streams(Pointer profile, PointerByReference error);
	/**
	 * Return the selected streams profiles, which are enabled in this profile.<br>
	 * * \param[in] profile    A pointer to an instance of a pipeline profile<br>
	 * \param[out] error     if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return   list of stream profiles<br>
	 * Original signature : <code>rs2_stream_profile_list* rs2_pipeline_profile_get_streams(rs2_pipeline_profile*, rs2_error**)</code><br>
	 * <i>native declaration : line 2718</i>
	 */
	PointerByReference rs2_pipeline_profile_get_streams(PointerByReference profile, PointerByReference error);
	/**
	 * Deletes an instance of a pipeline profile<br>
	 * * \param[in] profile    A pointer to an instance of a pipeline profile<br>
	 * Original signature : <code>void rs2_delete_pipeline_profile(rs2_pipeline_profile*)</code><br>
	 * <i>native declaration : line 2725</i><br>
	 * @deprecated use the safer method {@link #rs2_delete_pipeline_profile(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_delete_pipeline_profile(Pointer profile);
	/**
	 * Deletes an instance of a pipeline profile<br>
	 * * \param[in] profile    A pointer to an instance of a pipeline profile<br>
	 * Original signature : <code>void rs2_delete_pipeline_profile(rs2_pipeline_profile*)</code><br>
	 * <i>native declaration : line 2725</i>
	 */
	void rs2_delete_pipeline_profile(PointerByReference profile);
	/**
	 * get the size of rs2_raw_data_buffer<br>
	 * \param[in] buffer  pointer to rs2_raw_data_buffer returned by rs2_send_and_receive_raw_data<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return size of rs2_raw_data_buffer<br>
	 * Original signature : <code>int rs2_get_raw_data_size(const rs2_raw_data_buffer*, rs2_error**)</code><br>
	 * <i>native declaration : line 2755</i><br>
	 * @deprecated use the safer method {@link #rs2_get_raw_data_size(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	int rs2_get_raw_data_size(Pointer buffer, PointerByReference error);
	/**
	 * get the size of rs2_raw_data_buffer<br>
	 * \param[in] buffer  pointer to rs2_raw_data_buffer returned by rs2_send_and_receive_raw_data<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return size of rs2_raw_data_buffer<br>
	 * Original signature : <code>int rs2_get_raw_data_size(const rs2_raw_data_buffer*, rs2_error**)</code><br>
	 * <i>native declaration : line 2755</i>
	 */
	int rs2_get_raw_data_size(PointerByReference buffer, PointerByReference error);
	/**
	 * Delete rs2_raw_data_buffer<br>
	 * \param[in] buffer        rs2_raw_data_buffer returned by rs2_send_and_receive_raw_data<br>
	 * Original signature : <code>void rs2_delete_raw_data(const rs2_raw_data_buffer*)</code><br>
	 * <i>native declaration : line 2761</i><br>
	 * @deprecated use the safer method {@link #rs2_delete_raw_data(com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_delete_raw_data(Pointer buffer);
	/**
	 * Delete rs2_raw_data_buffer<br>
	 * \param[in] buffer        rs2_raw_data_buffer returned by rs2_send_and_receive_raw_data<br>
	 * Original signature : <code>void rs2_delete_raw_data(const rs2_raw_data_buffer*)</code><br>
	 * <i>native declaration : line 2761</i>
	 */
	void rs2_delete_raw_data(PointerByReference buffer);
	/**
	 * Retrieve char array from rs2_raw_data_buffer<br>
	 * \param[in] buffer   rs2_raw_data_buffer returned by rs2_send_and_receive_raw_data<br>
	 * \param[out] error   if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return raw data<br>
	 * Original signature : <code>char* rs2_get_raw_data(const rs2_raw_data_buffer*, rs2_error**)</code><br>
	 * <i>native declaration : line 2769</i><br>
	 * @deprecated use the safer method {@link #rs2_get_raw_data(com.sun.jna.ptr.PointerByReference, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	Pointer rs2_get_raw_data(Pointer buffer, PointerByReference error);
	/**
	 * Retrieve char array from rs2_raw_data_buffer<br>
	 * \param[in] buffer   rs2_raw_data_buffer returned by rs2_send_and_receive_raw_data<br>
	 * \param[out] error   if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return raw data<br>
	 * Original signature : <code>char* rs2_get_raw_data(const rs2_raw_data_buffer*, rs2_error**)</code><br>
	 * <i>native declaration : line 2769</i>
	 */
	Pointer rs2_get_raw_data(PointerByReference buffer, PointerByReference error);
	/**
	 * Retrieve the API version from the source code. Evaluate that the value is conformant to the established policies<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return            the version API encoded into integer value "1.9.3" -> 10903<br>
	 * Original signature : <code>int rs2_get_api_version(rs2_error**)</code><br>
	 * <i>native declaration : line 2776</i>
	 */
	int rs2_get_api_version(PointerByReference error);
	/**
	 * Original signature : <code>void rs2_log_to_console(rs2_log_severity, rs2_error**)</code><br>
	 * <i>native declaration : line 2778</i>
	 */
	void rs2_log_to_console(int min_severity, PointerByReference error);
	/**
	 * Original signature : <code>void rs2_log_to_file(rs2_log_severity, const char*, rs2_error**)</code><br>
	 * <i>native declaration : line 2780</i><br>
	 * @deprecated use the safer methods {@link #rs2_log_to_file(int, java.lang.String, com.sun.jna.ptr.PointerByReference)} and {@link #rs2_log_to_file(int, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_log_to_file(int min_severity, Pointer file_path, PointerByReference error);
	/**
	 * Original signature : <code>void rs2_log_to_file(rs2_log_severity, const char*, rs2_error**)</code><br>
	 * <i>native declaration : line 2780</i>
	 */
	void rs2_log_to_file(int min_severity, String file_path, PointerByReference error);
	/**
	 * Add custom message into librealsense log<br>
	 * \param[in] severity  The log level for the message to be written under<br>
	 * \param[in] message   Message to be logged<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_log(rs2_log_severity, const char*, rs2_error**)</code><br>
	 * <i>native declaration : line 2788</i><br>
	 * @deprecated use the safer methods {@link #rs2_log(int, java.lang.String, com.sun.jna.ptr.PointerByReference)} and {@link #rs2_log(int, com.sun.jna.Pointer, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	void rs2_log(int severity, Pointer message, PointerByReference error);
	/**
	 * Add custom message into librealsense log<br>
	 * \param[in] severity  The log level for the message to be written under<br>
	 * \param[in] message   Message to be logged<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>void rs2_log(rs2_log_severity, const char*, rs2_error**)</code><br>
	 * <i>native declaration : line 2788</i>
	 */
	void rs2_log(int severity, String message, PointerByReference error);
	/**
	 * Given the 2D depth coordinate (x,y) provide the corresponding depth in metric units<br>
	 * \param[in] frame_ref  2D depth pixel coordinates (Left-Upper corner origin)<br>
	 * \param[in] x,y  2D depth pixel coordinates (Left-Upper corner origin)<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>float rs2_depth_frame_get_distance(const rs2_frame*, int, int, rs2_error**)</code><br>
	 * <i>native declaration : line 2796</i><br>
	 * @deprecated use the safer method {@link #rs2_depth_frame_get_distance(com.sun.jna.ptr.PointerByReference, int, int, com.sun.jna.ptr.PointerByReference)} instead
	 */
	@Deprecated
	float rs2_depth_frame_get_distance(Pointer frame_ref, int x, int y, PointerByReference error);
	/**
	 * Given the 2D depth coordinate (x,y) provide the corresponding depth in metric units<br>
	 * \param[in] frame_ref  2D depth pixel coordinates (Left-Upper corner origin)<br>
	 * \param[in] x,y  2D depth pixel coordinates (Left-Upper corner origin)<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * Original signature : <code>float rs2_depth_frame_get_distance(const rs2_frame*, int, int, rs2_error**)</code><br>
	 * <i>native declaration : line 2796</i>
	 */
	float rs2_depth_frame_get_distance(PointerByReference frame_ref, int x, int y, PointerByReference error);
	/**
	 * return the time at specific time point<br>
	 * \param[out] error  if non-null, receives any error that occurs during this call, otherwise, errors are ignored<br>
	 * \return            the time at specific time point, in live and record mode it will return the system time and in playback mode it will return the recorded time<br>
	 * Original signature : <code>rs2_time_t rs2_get_time(rs2_error**)</code><br>
	 * <i>native declaration : line 2803</i>
	 */
	double rs2_get_time(PointerByReference error);
	public static class rs2_stream_profile extends PointerType {
		public rs2_stream_profile(Pointer address) {
			super(address);
		}
		public rs2_stream_profile() {
			super();
		}
	};
	public static class rs2_notifications_callback extends PointerType {
		public rs2_notifications_callback(Pointer address) {
			super(address);
		}
		public rs2_notifications_callback() {
			super();
		}
	};
	public static class rs2_device extends PointerType {
		public rs2_device(Pointer address) {
			super(address);
		}
		public rs2_device() {
			super();
		}
	};
	public static class rs2_frame_queue extends PointerType {
		public rs2_frame_queue(Pointer address) {
			super(address);
		}
		public rs2_frame_queue() {
			super();
		}
	};
	public static class rs2_options_list extends PointerType {
		public rs2_options_list(Pointer address) {
			super(address);
		}
		public rs2_options_list() {
			super();
		}
	};
	public static class rs2_update_progress_callback extends PointerType {
		public rs2_update_progress_callback(Pointer address) {
			super(address);
		}
		public rs2_update_progress_callback() {
			super();
		}
	};
	public static class rs2_device_list extends PointerType {
		public rs2_device_list(Pointer address) {
			super(address);
		}
		public rs2_device_list() {
			super();
		}
	};
	public static class rs2_pipeline_profile extends PointerType {
		public rs2_pipeline_profile(Pointer address) {
			super(address);
		}
		public rs2_pipeline_profile() {
			super();
		}
	};
	public static class rs2_error extends PointerType {
		public rs2_error(Pointer address) {
			super(address);
		}
		public rs2_error() {
			super();
		}
	};
	public static class rs2_raw_data_buffer extends PointerType {
		public rs2_raw_data_buffer(Pointer address) {
			super(address);
		}
		public rs2_raw_data_buffer() {
			super();
		}
	};
	public static class rs2_source extends PointerType {
		public rs2_source(Pointer address) {
			super(address);
		}
		public rs2_source() {
			super();
		}
	};
	public static class rs2_notification extends PointerType {
		public rs2_notification(Pointer address) {
			super(address);
		}
		public rs2_notification() {
			super();
		}
	};
	public static class rs2_stream_profile_list extends PointerType {
		public rs2_stream_profile_list(Pointer address) {
			super(address);
		}
		public rs2_stream_profile_list() {
			super();
		}
	};
	public static class rs2_config extends PointerType {
		public rs2_config(Pointer address) {
			super(address);
		}
		public rs2_config() {
			super();
		}
	};
	public static class rs2_playback_status_changed_callback extends PointerType {
		public rs2_playback_status_changed_callback(Pointer address) {
			super(address);
		}
		public rs2_playback_status_changed_callback() {
			super();
		}
	};
	public static class rs2_devices_changed_callback extends PointerType {
		public rs2_devices_changed_callback(Pointer address) {
			super(address);
		}
		public rs2_devices_changed_callback() {
			super();
		}
	};
	public static class rs2_frame_callback extends PointerType {
		public rs2_frame_callback(Pointer address) {
			super(address);
		}
		public rs2_frame_callback() {
			super();
		}
	};
	public static class rs2_sensor extends PointerType {
		public rs2_sensor(Pointer address) {
			super(address);
		}
		public rs2_sensor() {
			super();
		}
	};
	public static class rs2_processing_block extends PointerType {
		public rs2_processing_block(Pointer address) {
			super(address);
		}
		public rs2_processing_block() {
			super();
		}
	};
	public static class rs2_pipeline extends PointerType {
		public rs2_pipeline(Pointer address) {
			super(address);
		}
		public rs2_pipeline() {
			super();
		}
	};
	public static class rs2_frame extends PointerType {
		public rs2_frame(Pointer address) {
			super(address);
		}
		public rs2_frame() {
			super();
		}
	};
	public static class rs2_context extends PointerType {
		public rs2_context(Pointer address) {
			super(address);
		}
		public rs2_context() {
			super();
		}
	};
	public static class rs2_options extends PointerType {
		public rs2_options(Pointer address) {
			super(address);
		}
		public rs2_options() {
			super();
		}
	};
	public static class rs2_sensor_list extends PointerType {
		public rs2_sensor_list(Pointer address) {
			super(address);
		}
		public rs2_sensor_list() {
			super();
		}
	};
	public static class rs2_device_hub extends PointerType {
		public rs2_device_hub(Pointer address) {
			super(address);
		}
		public rs2_device_hub() {
			super();
		}
	};
	public static class rs2_processing_block_list extends PointerType {
		public rs2_processing_block_list(Pointer address) {
			super(address);
		}
		public rs2_processing_block_list() {
			super();
		}
	};
	public static class rs2_frame_processor_callback extends PointerType {
		public rs2_frame_processor_callback(Pointer address) {
			super(address);
		}
		public rs2_frame_processor_callback() {
			super();
		}
	};
}
